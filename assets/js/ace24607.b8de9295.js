"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[78829],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(h,i(i({ref:t},s),{},{components:n})):a.createElement(h,i({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:r,i[1]=p;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},84338:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={},i="LLM Math",p={unversionedId:"guides/evaluation/llm_math",id:"guides/evaluation/llm_math",title:"LLM Math",description:"Evaluating chains that know how to do math.",source:"@site/docs/guides/evaluation/llm_math.md",sourceDirName:"guides/evaluation",slug:"/guides/evaluation/llm_math",permalink:"/langchain-docs-scratch/docs/guides/evaluation/llm_math",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/guides/evaluation/llm_math.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Using Hugging Face Datasets",permalink:"/langchain-docs-scratch/docs/guides/evaluation/huggingface_datasets"},next:{title:"Evaluating an OpenAPI Chain",permalink:"/langchain-docs-scratch/docs/guides/evaluation/openapi_eval"}},l={},c=[{value:"Setting up a chain",id:"setting-up-a-chain",level:2}],s=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var u;const d={toc:c},m="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"llm-math"},"LLM Math"),(0,r.kt)("p",null,"Evaluating chains that know how to do math."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Comment this out if you are NOT using tracing\nimport os\nos.environ["LANGCHAIN_HANDLER"] = "langchain"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.evaluation.loading import load_dataset\ndataset = load_dataset("llm-math")\n')),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Downloading readme:   0%|          | 0.00/21.0 [00:00<?, ?B/s]\n\n\n    Downloading and preparing dataset json/LangChainDatasets--llm-math to /Users/harrisonchase/.cache/huggingface/datasets/LangChainDatasets___json/LangChainDatasets--llm-math-509b11d101165afa/0.0.0/0f7e3662623656454fcd2b650f34e886a7db4b9104504885bd462096cc7a9f51...\n\n\n\n    Downloading data files:   0%|          | 0/1 [00:00<?, ?it/s]\n\n\n\n    Downloading data:   0%|          | 0.00/631 [00:00<?, ?B/s]\n\n\n\n    Extracting data files:   0%|          | 0/1 [00:00<?, ?it/s]\n\n\n\n    Generating train split: 0 examples [00:00, ? examples/s]\n\n\n    Dataset json downloaded and prepared to /Users/harrisonchase/.cache/huggingface/datasets/LangChainDatasets___json/LangChainDatasets--llm-math-509b11d101165afa/0.0.0/0f7e3662623656454fcd2b650f34e886a7db4b9104504885bd462096cc7a9f51. Subsequent calls will reuse this data.\n\n\n\n      0%|          | 0/1 [00:00<?, ?it/s]\n"))),(0,r.kt)("h2",{id:"setting-up-a-chain"},"Setting up a chain"),(0,r.kt)("p",null,"Now we need to create some pipelines for doing math."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.llms import OpenAI\nfrom langchain.chains import LLMMathChain\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"llm = OpenAI()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"chain = LLMMathChain(llm=llm)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"predictions = chain.apply(dataset)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"numeric_output = [float(p['answer'].strip().strip(\"Answer: \")) for p in predictions]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"correct = [example['answer'] == numeric_output[i] for i, example in enumerate(dataset)]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"sum(correct) / len(correct)\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    1.0\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'for i, example in enumerate(dataset):\n    print("input: ", example["question"])\n    print("expected output :", example["answer"])\n    print("prediction: ", numeric_output[i])\n')),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    input:  5\n    expected output : 5.0\n    prediction:  5.0\n    input:  5 + 3\n    expected output : 8.0\n    prediction:  8.0\n    input:  2^3.171\n    expected output : 9.006708689094099\n    prediction:  9.006708689094099\n    input:    2 ^3.171 \n    expected output : 9.006708689094099\n    prediction:  9.006708689094099\n    input:  two to the power of three point one hundred seventy one\n    expected output : 9.006708689094099\n    prediction:  9.006708689094099\n    input:  five + three squared minus 1\n    expected output : 13.0\n    prediction:  13.0\n    input:  2097 times 27.31\n    expected output : 57269.07\n    prediction:  57269.07\n    input:  two thousand ninety seven times twenty seven point thirty one\n    expected output : 57269.07\n    prediction:  57269.07\n    input:  209758 / 2714\n    expected output : 77.28739867354459\n    prediction:  77.28739867354459\n    input:  209758.857 divided by 2714.31\n    expected output : 77.27888745205964\n    prediction:  77.27888745205964\n"))))}h.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[41980],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,g=u["".concat(p,".").concat(m)]||u[m]||d[m]||a;return n?o.createElement(g,l(l({ref:t},c),{},{components:n})):o.createElement(g,l({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<a;s++)l[s]=n[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},78481:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var o=n(87462),r=(n(67294),n(3905));const a={},l="Prediction Guard",i={unversionedId:"modules/model_io/models/llms/integrations/predictionguard",id:"modules/model_io/models/llms/integrations/predictionguard",title:"Prediction Guard",description:"Basic LLM usage",source:"@site/docs/modules/model_io/models/llms/integrations/predictionguard.md",sourceDirName:"modules/model_io/models/llms/integrations",slug:"/modules/model_io/models/llms/integrations/predictionguard",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/llms/integrations/predictionguard",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/model_io/models/llms/integrations/predictionguard.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"PipelineAI",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/llms/integrations/pipelineai_example"},next:{title:"PromptLayer OpenAI",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/llms/integrations/promptlayer_openai"}},p={},s=[{value:"Basic LLM usage",id:"basic-llm-usage",level:2},{value:"Control the output structure/ type of LLMs",id:"control-the-output-structure-type-of-llms",level:2},{value:"Chaining",id:"chaining",level:2}],c={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"prediction-guard"},"Prediction Guard"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install predictionguard langchain\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import os\n\nimport predictionguard as pg\nfrom langchain.llms import PredictionGuard\nfrom langchain import PromptTemplate, LLMChain\n")),(0,r.kt)("h2",{id:"basic-llm-usage"},"Basic LLM usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Optional, add your OpenAI API Key. This is optional, as Prediction Guard allows\n# you to access all the latest open access models (see https://docs.predictionguard.com)\nos.environ["OPENAI_API_KEY"] = "<your OpenAI api key>"\n\n# Your Prediction Guard API key. Get one at predictionguard.com\nos.environ["PREDICTIONGUARD_TOKEN"] = "<your Prediction Guard access token>"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'pgllm = PredictionGuard(model="OpenAI-text-davinci-003")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'pgllm("Tell me a joke")\n')),(0,r.kt)("h2",{id:"control-the-output-structure-type-of-llms"},"Control the output structure/ type of LLMs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'template = """Respond to the following query based on the context.\n\nContext: EVERY comment, DM + email suggestion has led us to this EXCITING announcement! \ud83c\udf89 We have officially added TWO new candle subscription box options! \ud83d\udce6\nExclusive Candle Box - $80 \nMonthly Candle Box - $45 (NEW!)\nScent of The Month Box - $28 (NEW!)\nHead to stories to get ALLL the deets on each box! \ud83d\udc46 BONUS: Save 50% on your first box with code 50OFF! \ud83c\udf89\n\nQuery: {query}\n\nResult: """\nprompt = PromptTemplate(template=template, input_variables=["query"])\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Without "guarding" or controlling the output of the LLM.\npgllm(prompt.format(query="What kind of post is this?"))\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# With "guarding" or controlling the output of the LLM. See the \n# Prediction Guard docs (https://docs.predictionguard.com) to learn how to \n# control the output with integer, float, boolean, JSON, and other types and\n# structures.\npgllm = PredictionGuard(model="OpenAI-text-davinci-003", \n                        output={\n                                "type": "categorical",\n                                "categories": [\n                                    "product announcement", \n                                    "apology", \n                                    "relational"\n                                    ]\n                                })\npgllm(prompt.format(query="What kind of post is this?"))\n')),(0,r.kt)("h2",{id:"chaining"},"Chaining"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'pgllm = PredictionGuard(model="OpenAI-text-davinci-003")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'template = """Question: {question}\n\nAnswer: Let\'s think step by step."""\nprompt = PromptTemplate(template=template, input_variables=["question"])\nllm_chain = LLMChain(prompt=prompt, llm=pgllm, verbose=True)\n\nquestion = "What NFL team won the Super Bowl in the year Justin Beiber was born?"\n\nllm_chain.predict(question=question)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'template = """Write a {adjective} poem about {subject}."""\nprompt = PromptTemplate(template=template, input_variables=["adjective", "subject"])\nllm_chain = LLMChain(prompt=prompt, llm=pgllm, verbose=True)\n\nllm_chain.predict(adjective="sad", subject="ducks")\n')))}d.isMDXComponent=!0}}]);
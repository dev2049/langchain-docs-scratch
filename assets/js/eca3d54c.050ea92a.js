"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[66911],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},41551:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const a={},i="Split by tokens (NLTK)",l={unversionedId:"modules/data_io/text_splitters/how_to/nltk",id:"modules/data_io/text_splitters/how_to/nltk",title:"Split by tokens (NLTK)",description:"The Natural Language Toolkit, or more commonly NLTK, is a suite of libraries and programs for symbolic and statistical natural language processing (NLP) for English written in the Python programming language.",source:"@site/docs/modules/data_io/text_splitters/how_to/nltk.md",sourceDirName:"modules/data_io/text_splitters/how_to",slug:"/modules/data_io/text_splitters/how_to/nltk",permalink:"/langchain-docs-scratch/docs/modules/data_io/text_splitters/how_to/nltk",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/data_io/text_splitters/how_to/nltk.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Split by tokens (Hugging Face tokenizer)",permalink:"/langchain-docs-scratch/docs/modules/data_io/text_splitters/how_to/huggingface_length_function"},next:{title:"Recursively split by character",permalink:"/langchain-docs-scratch/docs/modules/data_io/text_splitters/how_to/recursive_text_splitter"}},s={},p=[],c=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var u;const d={toc:p},m="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"split-by-tokens-nltk"},"Split by tokens (NLTK)"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Natural_Language_Toolkit"},"The Natural Language Toolkit"),", or more commonly ",(0,o.kt)("a",{parentName:"p",href:"https://www.nltk.org/"},"NLTK"),", is a suite of libraries and programs for symbolic and statistical natural language processing (NLP) for English written in the Python programming language.")),(0,o.kt)("p",null,'Rather than just splitting on "\\n\\n", we can use ',(0,o.kt)("inlineCode",{parentName:"p"},"NLTK")," to split based on ",(0,o.kt)("a",{parentName:"p",href:"https://www.nltk.org/api/nltk.tokenize.html"},"NLTK tokenizers"),"."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"How the text is split: by ",(0,o.kt)("inlineCode",{parentName:"li"},"NLTK")," tokenizer."),(0,o.kt)("li",{parentName:"ol"},"How the chunk size is measured:by number of characters")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"#pip install nltk\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# This is a long document we can split up.\nwith open('../../../state_of_the_union.txt') as f:\n    state_of_the_union = f.read()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.text_splitter import NLTKTextSplitter\ntext_splitter = NLTKTextSplitter(chunk_size=1000)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"texts = text_splitter.split_text(state_of_the_union)\nprint(texts[0])\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Madam Speaker, Madam Vice President, our First Lady and Second Gentleman.\n    \n    Members of Congress and the Cabinet.\n    \n    Justices of the Supreme Court.\n    \n    My fellow Americans.\n    \n    Last year COVID-19 kept us apart.\n    \n    This year we are finally together again.\n    \n    Tonight, we meet as Democrats Republicans and Independents.\n    \n    But most importantly as Americans.\n    \n    With a duty to one another to the American people to the Constitution.\n    \n    And with an unwavering resolve that freedom will always triumph over tyranny.\n    \n    Six days ago, Russia\u2019s Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways.\n    \n    But he badly miscalculated.\n    \n    He thought he could roll into Ukraine and the world would roll over.\n    \n    Instead he met a wall of strength he never imagined.\n    \n    He met the Ukrainian people.\n    \n    From President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world.\n    \n    Groups of citizens blocking tanks with their bodies.\n"))))}h.isMDXComponent=!0}}]);
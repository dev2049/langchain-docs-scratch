"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[79329],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,k=u["".concat(i,".").concat(d)]||u[d]||m[d]||s;return n?r.createElement(k,a(a({ref:t},c),{},{components:n})):r.createElement(k,a({ref:t},c))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var p=2;p<s;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9416:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>k,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const s={},a="Split by tokens (SentenceTransformers)",l={unversionedId:"modules/data_io/text_splitters/how_to/sentence_transformer_token_splitter",id:"modules/data_io/text_splitters/how_to/sentence_transformer_token_splitter",title:"Split by tokens (SentenceTransformers)",description:"This notebook demonstrates how to use the SentenceTransformersTokenTextSplitter text splitter.",source:"@site/docs/modules/data_io/text_splitters/how_to/sentence_transformer_token_splitter.md",sourceDirName:"modules/data_io/text_splitters/how_to",slug:"/modules/data_io/text_splitters/how_to/sentence_transformer_token_splitter",permalink:"/langchain-docs-scratch/docs/modules/data_io/text_splitters/how_to/sentence_transformer_token_splitter",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/data_io/text_splitters/how_to/sentence_transformer_token_splitter.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Recursively split by character",permalink:"/langchain-docs-scratch/docs/modules/data_io/text_splitters/how_to/recursive_text_splitter"},next:{title:"Split by tokens (spaCy)",permalink:"/langchain-docs-scratch/docs/modules/data_io/text_splitters/how_to/spacy"}},i={},p=[],c=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var u;const m={toc:p},d="wrapper";function k(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"split-by-tokens-sentencetransformers"},"Split by tokens (SentenceTransformers)"),(0,o.kt)("p",null,"This notebook demonstrates how to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"SentenceTransformersTokenTextSplitter")," text splitter."),(0,o.kt)("p",null,"Language models have a token limit. You should not exceed the token limit. When you split your text into chunks it is therefore a good idea to count the number of tokens. There are many tokenizers. When you count tokens in your text you should use the same tokenizer as used in the language model. "),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"SentenceTransformersTokenTextSplitter")," is a specialized text splitter for use with the sentence-transformer models. The default behaviour is to split the text into chunks that fit the token window of the sentence transformer model that you would like to use."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.text_splitter import SentenceTransformersTokenTextSplitter\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'splitter = SentenceTransformersTokenTextSplitter(chunk_overlap=0)\ntext = "Lorem "\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"count_start_and_stop_tokens = 2\ntext_token_count = splitter.count_tokens(text=text) - count_start_and_stop_tokens\nprint(text_token_count)\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    2\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'token_multiplier = splitter.maximum_tokens_per_chunk // text_token_count + 1\n\n# `text_to_split` does not fit in a single chunk\ntext_to_split = text * token_multiplier\n\nprint(f"tokens in text to split: {splitter.count_tokens(text=text_to_split)}")\n')),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    tokens in text to split: 514\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"text_chunks = splitter.split_text(text=text_to_split)\n\nprint(text_chunks[1])\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    lorem\n"))))}k.isMDXComponent=!0}}]);
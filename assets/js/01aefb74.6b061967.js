"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[27530],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,b=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(b,i(i({ref:t},c),{},{components:n})):a.createElement(b,i({ref:t},c))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2371:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>b,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const r={},i="Airbyte JSON",l={unversionedId:"modules/data_io/document_loaders/integrations/airbyte_json",id:"modules/data_io/document_loaders/integrations/airbyte_json",title:"Airbyte JSON",description:"Airbyte is a data integration platform for ELT pipelines from APIs, databases & files to warehouses & lakes. It has the largest catalog of ELT connectors to data warehouses and databases.",source:"@site/docs/modules/data_io/document_loaders/integrations/airbyte_json.md",sourceDirName:"modules/data_io/document_loaders/integrations",slug:"/modules/data_io/document_loaders/integrations/airbyte_json",permalink:"/langchain-docs-scratch/docs/modules/data_io/document_loaders/integrations/airbyte_json",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/data_io/document_loaders/integrations/airbyte_json.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"PDF",permalink:"/langchain-docs-scratch/docs/modules/data_io/document_loaders/how_to/pdf"},next:{title:"Alibaba Cloud MaxCompute",permalink:"/langchain-docs-scratch/docs/modules/data_io/document_loaders/integrations/alibaba_cloud_maxcompute"}},s={},p=[],c=(d="CodeOutputBlock",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var d;const u={toc:p},m="wrapper";function b(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"airbyte-json"},"Airbyte JSON"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/airbytehq/airbyte"},"Airbyte")," is a data integration platform for ELT pipelines from APIs, databases & files to warehouses & lakes. It has the largest catalog of ELT connectors to data warehouses and databases.")),(0,o.kt)("p",null,"This covers how to load any source from Airbyte into a local JSON file that can be read in as a document"),(0,o.kt)("p",null,"Prereqs:\nHave docker desktop installed"),(0,o.kt)("p",null,"Steps:"),(0,o.kt)("p",null,"1) Clone Airbyte from GitHub - ",(0,o.kt)("inlineCode",{parentName:"p"},"git clone https://github.com/airbytehq/airbyte.git")),(0,o.kt)("p",null,"2) Switch into Airbyte directory - ",(0,o.kt)("inlineCode",{parentName:"p"},"cd airbyte")),(0,o.kt)("p",null,"3) Start Airbyte - ",(0,o.kt)("inlineCode",{parentName:"p"},"docker compose up")),(0,o.kt)("p",null,"4) In your browser, just visit\xa0http://localhost:8000. You will be asked for a username and password. By default, that's username\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"airbyte"),"\xa0and password\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"password"),"."),(0,o.kt)("p",null,"5) Setup any source you wish."),(0,o.kt)("p",null,"6) Set destination as Local JSON, with specified destination path - lets say ",(0,o.kt)("inlineCode",{parentName:"p"},"/json_data"),". Set up manual sync."),(0,o.kt)("p",null,"7) Run the connection."),(0,o.kt)("p",null,"7) To see what files are create, you can navigate to: ",(0,o.kt)("inlineCode",{parentName:"p"},"file:///tmp/airbyte_local")),(0,o.kt)("p",null,"8) Find your data and copy path. That path should be saved in the file variable below. It should start with ",(0,o.kt)("inlineCode",{parentName:"p"},"/tmp/airbyte_local")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.document_loaders import AirbyteJSONLoader\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ls /tmp/airbyte_local/json_data/\n")),(0,o.kt)(c,{lang:"bash",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    _airbyte_raw_pokemon.jsonl\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"loader = AirbyteJSONLoader('/tmp/airbyte_local/json_data/_airbyte_raw_pokemon.jsonl')\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"data = loader.load()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(data[0].page_content[:500])\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    abilities: \n    ability: \n    name: blaze\n    url: https://pokeapi.co/api/v2/ability/66/\n    \n    is_hidden: False\n    slot: 1\n    \n    \n    ability: \n    name: solar-power\n    url: https://pokeapi.co/api/v2/ability/94/\n    \n    is_hidden: True\n    slot: 3\n    \n    base_experience: 267\n    forms: \n    name: charizard\n    url: https://pokeapi.co/api/v2/pokemon-form/6/\n    \n    game_indices: \n    game_index: 180\n    version: \n    name: red\n    url: https://pokeapi.co/api/v2/version/1/\n    \n    \n    \n    game_index: 180\n    version: \n    name: blue\n    url: https://pokeapi.co/api/v2/version/2/\n    \n    \n    \n    game_index: 180\n    version: \n    n\n"))))}b.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[12887],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>g});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),l=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},m=function(e){var n=l(e.components);return r.createElement(i.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),c=l(t),u=o,g=c["".concat(i,".").concat(u)]||c[u]||p[u]||s;return t?r.createElement(g,a(a({ref:n},m),{},{components:t})):r.createElement(g,a({ref:n},m))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,a=new Array(s);a[0]=u;var d={};for(var i in n)hasOwnProperty.call(n,i)&&(d[i]=n[i]);d.originalType=e,d[c]="string"==typeof e?e:o,a[1]=d;for(var l=2;l<s;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},57293:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var r=t(87462),o=(t(67294),t(3905));const s={},a="Self Hosted Embeddings",d={unversionedId:"modules/model_io/models/text_embedding/integrations/self-hosted",id:"modules/model_io/models/text_embedding/integrations/self-hosted",title:"Self Hosted Embeddings",description:"Let's load the SelfHostedEmbeddings, SelfHostedHuggingFaceEmbeddings, and SelfHostedHuggingFaceInstructEmbeddings classes.",source:"@site/docs/modules/model_io/models/text_embedding/integrations/self-hosted.md",sourceDirName:"modules/model_io/models/text_embedding/integrations",slug:"/modules/model_io/models/text_embedding/integrations/self-hosted",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/text_embedding/integrations/self-hosted",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/model_io/models/text_embedding/integrations/self-hosted.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"SageMaker Endpoint Embeddings",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/text_embedding/integrations/sagemaker-endpoint"},next:{title:"Sentence Transformers Embeddings",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/text_embedding/integrations/sentence_transformers"}},i={},l=[],m={toc:l},c="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(c,(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"self-hosted-embeddings"},"Self Hosted Embeddings"),(0,o.kt)("p",null,"Let's load the SelfHostedEmbeddings, SelfHostedHuggingFaceEmbeddings, and SelfHostedHuggingFaceInstructEmbeddings classes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.embeddings import (\n    SelfHostedEmbeddings,\n    SelfHostedHuggingFaceEmbeddings,\n    SelfHostedHuggingFaceInstructEmbeddings,\n)\nimport runhouse as rh\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# For an on-demand A100 with GCP, Azure, or Lambda\ngpu = rh.cluster(name=\"rh-a10x\", instance_type=\"A100:1\", use_spot=False)\n\n# For an on-demand A10G with AWS (no single A100s on AWS)\n# gpu = rh.cluster(name='rh-a10x', instance_type='g5.2xlarge', provider='aws')\n\n# For an existing cluster\n# gpu = rh.cluster(ips=['<ip of the cluster>'],\n#                  ssh_creds={'ssh_user': '...', 'ssh_private_key':'<path_to_key>'},\n#                  name='my-cluster')\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"embeddings = SelfHostedHuggingFaceEmbeddings(hardware=gpu)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'text = "This is a test document."\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"query_result = embeddings.embed_query(text)\n")),(0,o.kt)("p",null,"And similarly for SelfHostedHuggingFaceInstructEmbeddings:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"embeddings = SelfHostedHuggingFaceInstructEmbeddings(hardware=gpu)\n")),(0,o.kt)("p",null,"Now let's load an embedding model with a custom load function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def get_pipeline():\n    from transformers import (\n        AutoModelForCausalLM,\n        AutoTokenizer,\n        pipeline,\n    )  # Must be inside the function in notebooks\n\n    model_id = "facebook/bart-base"\n    tokenizer = AutoTokenizer.from_pretrained(model_id)\n    model = AutoModelForCausalLM.from_pretrained(model_id)\n    return pipeline("feature-extraction", model=model, tokenizer=tokenizer)\n\n\ndef inference_fn(pipeline, prompt):\n    # Return last hidden state of the model\n    if isinstance(prompt, list):\n        return [emb[0][-1] for emb in pipeline(prompt)]\n    return pipeline(prompt)[0][-1]\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'embeddings = SelfHostedEmbeddings(\n    model_load_fn=get_pipeline,\n    hardware=gpu,\n    model_reqs=["./", "torch", "transformers"],\n    inference_fn=inference_fn,\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"query_result = embeddings.embed_query(text)\n")))}p.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8991],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),i=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},l=function(e){var t=i(e.components);return n.createElement(u.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=i(r),d=o,f=c["".concat(u,".").concat(d)]||c[d]||m[d]||a;return r?n.createElement(f,p(p({ref:t},l),{},{components:r})):n.createElement(f,p({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,p=new Array(a);p[0]=d;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[c]="string"==typeof e?e:o,p[1]=s;for(var i=2;i<a;i++)p[i]=r[i];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},66071:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>i});var n=r(87462),o=(r(67294),r(3905));const a={},p="Datetime parser",s={unversionedId:"modules/model_io/output_parsers/datetime",id:"modules/model_io/output_parsers/datetime",title:"Datetime parser",description:"This OutputParser shows out to parse LLM output into datetime format.",source:"@site/docs/modules/model_io/output_parsers/datetime.md",sourceDirName:"modules/model_io/output_parsers",slug:"/modules/model_io/output_parsers/datetime",permalink:"/langchain-docs-scratch/docs/modules/model_io/output_parsers/datetime",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/model_io/output_parsers/datetime.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"List parser",permalink:"/langchain-docs-scratch/docs/modules/model_io/output_parsers/comma_separated"},next:{title:"Enum parser",permalink:"/langchain-docs-scratch/docs/modules/model_io/output_parsers/enum"}},u={},i=[],l=(c="CodeOutputBlock",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var c;const m={toc:i},d="wrapper";function f(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"datetime-parser"},"Datetime parser"),(0,o.kt)("p",null,"This OutputParser shows out to parse LLM output into datetime format."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.prompts import PromptTemplate\nfrom langchain.output_parsers import DatetimeOutputParser\nfrom langchain.chains import LLMChain\nfrom langchain.llms import OpenAI\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'output_parser = DatetimeOutputParser()\ntemplate = """Answer the users question:\n\n{question}\n\n{format_instructions}"""\nprompt = PromptTemplate.from_template(template, partial_variables={"format_instructions": output_parser.get_format_instructions()})\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"chain = LLMChain(prompt=prompt, llm=OpenAI())\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'output = chain.run("around when was bitcoin founded?")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"output\n")),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    '\\n\\n2008-01-03T18:15:05.000000Z'\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"output_parser.parse(output)\n")),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    datetime.datetime(2008, 1, 3, 18, 15, 5)\n"))))}f.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[97496],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=o.createContext({}),c=function(e){var t=o.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return o.createElement(d.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,h=p["".concat(d,".").concat(m)]||p[m]||u[m]||r;return n?o.createElement(h,i(i({ref:t},l),{},{components:n})):o.createElement(h,i({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},21826:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=n(87462),a=(n(67294),n(3905));const r={},i="Chroma",s={unversionedId:"modules/data_io/vectorstores/integrations/chroma",id:"modules/data_io/vectorstores/integrations/chroma",title:"Chroma",description:"Chroma is a database for building AI applications with embeddings.",source:"@site/docs/modules/data_io/vectorstores/integrations/chroma.md",sourceDirName:"modules/data_io/vectorstores/integrations",slug:"/modules/data_io/vectorstores/integrations/chroma",permalink:"/langchain-docs-scratch/docs/modules/data_io/vectorstores/integrations/chroma",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/data_io/vectorstores/integrations/chroma.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Atlas",permalink:"/langchain-docs-scratch/docs/modules/data_io/vectorstores/integrations/atlas"},next:{title:"Deep Lake",permalink:"/langchain-docs-scratch/docs/modules/data_io/vectorstores/integrations/deeplake"}},d={},c=[{value:"Similarity search with score",id:"similarity-search-with-score",level:2},{value:"Persistance",id:"persistance",level:2},{value:"Initialize PeristedChromaDB",id:"initialize-peristedchromadb",level:3},{value:"Persist the Database",id:"persist-the-database",level:3},{value:"Load the Database from disk, and create the chain",id:"load-the-database-from-disk-and-create-the-chain",level:3},{value:"Retriever options",id:"retriever-options",level:2},{value:"MMR",id:"mmr",level:3},{value:"Updating a Document",id:"updating-a-document",level:2}],l=(p="CodeOutputBlock",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var p;const u={toc:c},m="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"chroma"},"Chroma"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"https://docs.trychroma.com/getting-started"},"Chroma")," is a database for building AI applications with embeddings.")),(0,a.kt)("p",null,"This notebook shows how to use functionality related to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Chroma")," vector database."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip install chromadb\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# get a token: https://platform.openai.com/account/api-keys\n\nfrom getpass import getpass\n\nOPENAI_API_KEY = getpass()\n")),(0,a.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"     \xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import os\n\nos.environ["OPENAI_API_KEY"] = OPENAI_API_KEY\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import Chroma\nfrom langchain.document_loaders import TextLoader\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"loader = TextLoader('../../../state_of_the_union.txt')\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings()\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'db = Chroma.from_documents(docs, embeddings)\n\nquery = "What did the president say about Ketanji Brown Jackson"\ndocs = db.similarity_search(query)\n')),(0,a.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    Using embedded DuckDB without persistence: data will be transient\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"print(docs[0].page_content)\n")),(0,a.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you\u2019re at it, pass the Disclose Act so Americans can know who is funding our elections. \n    \n    Tonight, I\u2019d like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer\u2014an Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n    \n    One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n    \n    And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation\u2019s top legal minds, who will continue Justice Breyer\u2019s legacy of excellence.\n"))),(0,a.kt)("h2",{id:"similarity-search-with-score"},"Similarity search with score"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"docs = db.similarity_search_with_score(query)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"docs[0]\n")),(0,a.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    (Document(page_content='Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you\u2019re at it, pass the Disclose Act so Americans can know who is funding our elections. \\n\\nTonight, I\u2019d like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer\u2014an Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \\n\\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \\n\\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation\u2019s top legal minds, who will continue Justice Breyer\u2019s legacy of excellence.', metadata={'source': '../../../state_of_the_union.txt'}),\n     0.3949805498123169)\n"))),(0,a.kt)("h2",{id:"persistance"},"Persistance"),(0,a.kt)("p",null,"The below steps cover how to persist a ChromaDB instance"),(0,a.kt)("h3",{id:"initialize-peristedchromadb"},"Initialize PeristedChromaDB"),(0,a.kt)("p",null,"Create embeddings for each chunk and insert into the Chroma vector database. The persist_directory argument tells ChromaDB where to store the database when it's persisted."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Embed and store the texts\n# Supplying a persist_directory will store the embeddings on disk\npersist_directory = 'db'\n\nembedding = OpenAIEmbeddings()\nvectordb = Chroma.from_documents(documents=docs, embedding=embedding, persist_directory=persist_directory)\n")),(0,a.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    Running Chroma using direct local API.\n    No existing DB found in db, skipping load\n    No existing DB found in db, skipping load\n"))),(0,a.kt)("h3",{id:"persist-the-database"},"Persist the Database"),(0,a.kt)("p",null,"We should call persist() to ensure the embeddings are written to disk."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"vectordb.persist()\nvectordb = None\n")),(0,a.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    Persisting DB to disk, putting it in the save folder db\n    PersistentDuckDB del, about to run persist\n    Persisting DB to disk, putting it in the save folder db\n"))),(0,a.kt)("h3",{id:"load-the-database-from-disk-and-create-the-chain"},"Load the Database from disk, and create the chain"),(0,a.kt)("p",null,"Be sure to pass the same persist_directory and embedding_function as you did when you instantiated the database. Initialize the chain we will use for question answering."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Now we can load the persisted database from disk, and use it as normal. \nvectordb = Chroma(persist_directory=persist_directory, embedding_function=embedding)\n")),(0,a.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    Running Chroma using direct local API.\n    loaded in 4 embeddings\n    loaded in 1 collections\n"))),(0,a.kt)("h2",{id:"retriever-options"},"Retriever options"),(0,a.kt)("p",null,"This section goes over different options for how to use Chroma as a retriever."),(0,a.kt)("h3",{id:"mmr"},"MMR"),(0,a.kt)("p",null,"In addition to using similarity search in the retriever object, you can also use ",(0,a.kt)("inlineCode",{parentName:"p"},"mmr"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'retriever = db.as_retriever(search_type="mmr")\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"retriever.get_relevant_documents(query)[0]\n")),(0,a.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    Document(page_content='Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you\u2019re at it, pass the Disclose Act so Americans can know who is funding our elections. \\n\\nTonight, I\u2019d like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer\u2014an Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \\n\\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \\n\\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation\u2019s top legal minds, who will continue Justice Breyer\u2019s legacy of excellence.', metadata={'source': '../../../state_of_the_union.txt'})\n"))),(0,a.kt)("h2",{id:"updating-a-document"},"Updating a Document"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"update_document")," function allows you to modify the content of a document in the Chroma instance after it has been added. Let's see an example of how to use this function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Import Document class\nfrom langchain.docstore.document import Document\n\n# Initial document content and id\ninitial_content = "This is an initial document content"\ndocument_id = "doc1"\n\n# Create an instance of Document with initial content and metadata\noriginal_doc = Document(page_content=initial_content, metadata={"page": "0"})\n\n# Initialize a Chroma instance with the original document\nnew_db = Chroma.from_documents(\n    collection_name="test_collection",\n    documents=[original_doc],\n    embedding=OpenAIEmbeddings(),  # using the same embeddings as before\n    ids=[document_id],\n)\n')),(0,a.kt)("p",null,'At this point, we have a new Chroma instance with a single document "This is an initial document content" with id "doc1". Now, let\'s update the content of the document.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Updated document content\nupdated_content = "This is the updated document content"\n\n# Create a new Document instance with the updated content\nupdated_doc = Document(page_content=updated_content, metadata={"page": "1"})\n\n# Update the document in the Chroma instance by passing the document id and the updated document\nnew_db.update_document(document_id=document_id, document=updated_doc)\n\n# Now, let\'s retrieve the updated document using similarity search\noutput = new_db.similarity_search(updated_content, k=1)\n\n# Print the content of the retrieved document\nprint(output[0].page_content, output[0].metadata)\n')),(0,a.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    This is the updated document content {'page': '1'}\n"))))}h.isMDXComponent=!0}}]);
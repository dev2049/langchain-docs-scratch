"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[60467],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=l(n),u=r,m=h["".concat(c,".").concat(u)]||h[u]||d[u]||i;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[h]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},58982:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={},o="BabyAGI with Tools",s={unversionedId:"use_cases/agents/baby_agi_with_agent",id:"use_cases/agents/baby_agi_with_agent",title:"BabyAGI with Tools",description:"This notebook builds on top of baby agi, but shows how you can swap out the execution chain. The previous execution chain was just an LLM which made stuff up. By swapping it out with an agent that has access to tools, we can hopefully get real reliable information",source:"@site/docs/use_cases/agents/baby_agi_with_agent.md",sourceDirName:"use_cases/agents",slug:"/use_cases/agents/baby_agi_with_agent",permalink:"/langchain-docs-scratch/docs/use_cases/agents/baby_agi_with_agent",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/use_cases/agents/baby_agi_with_agent.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"BabyAGI User Guide",permalink:"/langchain-docs-scratch/docs/use_cases/agents/baby_agi"},next:{title:"CAMEL Role-Playing Autonomous Cooperative Agents",permalink:"/langchain-docs-scratch/docs/use_cases/agents/camel_role_playing"}},c={},l=[{value:"Install and Import Required Modules",id:"install-and-import-required-modules",level:2},{value:"Connect to the Vector Store",id:"connect-to-the-vector-store",level:2},{value:"Define the Chains",id:"define-the-chains",level:2},{value:"Define the BabyAGI Controller",id:"define-the-babyagi-controller",level:3},{value:"Run the BabyAGI",id:"run-the-babyagi",level:3}],p=(h="CodeOutputBlock",function(e){return console.warn("Component "+h+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var h;const d={toc:l},u="wrapper";function m(e){let{components:t,...i}=e;return(0,r.kt)(u,(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"babyagi-with-tools"},"BabyAGI with Tools"),(0,r.kt)("p",null,"This notebook builds on top of ",(0,r.kt)("a",{target:"_blank",href:n(92394).Z},"baby agi"),", but shows how you can swap out the execution chain. The previous execution chain was just an LLM which made stuff up. By swapping it out with an agent that has access to tools, we can hopefully get real reliable information"),(0,r.kt)("h2",{id:"install-and-import-required-modules"},"Install and Import Required Modules"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import os\nfrom collections import deque\nfrom typing import Dict, List, Optional, Any\n\nfrom langchain import LLMChain, OpenAI, PromptTemplate\nfrom langchain.embeddings import OpenAIEmbeddings\nfrom langchain.llms import BaseLLM\nfrom langchain.vectorstores.base import VectorStore\nfrom pydantic import BaseModel, Field\nfrom langchain.chains.base import Chain\n")),(0,r.kt)("h2",{id:"connect-to-the-vector-store"},"Connect to the Vector Store"),(0,r.kt)("p",null,"Depending on what vectorstore you use, this step may look different."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.vectorstores import FAISS\nfrom langchain.docstore import InMemoryDocstore\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Define your embedding model\nembeddings_model = OpenAIEmbeddings()\n# Initialize the vectorstore as empty\nimport faiss\n\nembedding_size = 1536\nindex = faiss.IndexFlatL2(embedding_size)\nvectorstore = FAISS(embeddings_model.embed_query, index, InMemoryDocstore({}), {})\n")),(0,r.kt)("h2",{id:"define-the-chains"},"Define the Chains"),(0,r.kt)("p",null,"BabyAGI relies on three LLM chains:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Task creation chain to select new tasks to add to the list"),(0,r.kt)("li",{parentName:"ul"},"Task prioritization chain to re-prioritize tasks"),(0,r.kt)("li",{parentName:"ul"},"Execution Chain to execute the tasks")),(0,r.kt)("p",null,"NOTE: in this notebook, the Execution chain will now be an agent."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class TaskCreationChain(LLMChain):\n    """Chain to generates tasks."""\n\n    @classmethod\n    def from_llm(cls, llm: BaseLLM, verbose: bool = True) -> LLMChain:\n        """Get the response parser."""\n        task_creation_template = (\n            "You are an task creation AI that uses the result of an execution agent"\n            " to create new tasks with the following objective: {objective},"\n            " The last completed task has the result: {result}."\n            " This result was based on this task description: {task_description}."\n            " These are incomplete tasks: {incomplete_tasks}."\n            " Based on the result, create new tasks to be completed"\n            " by the AI system that do not overlap with incomplete tasks."\n            " Return the tasks as an array."\n        )\n        prompt = PromptTemplate(\n            template=task_creation_template,\n            input_variables=[\n                "result",\n                "task_description",\n                "incomplete_tasks",\n                "objective",\n            ],\n        )\n        return cls(prompt=prompt, llm=llm, verbose=verbose)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class TaskPrioritizationChain(LLMChain):\n    """Chain to prioritize tasks."""\n\n    @classmethod\n    def from_llm(cls, llm: BaseLLM, verbose: bool = True) -> LLMChain:\n        """Get the response parser."""\n        task_prioritization_template = (\n            "You are an task prioritization AI tasked with cleaning the formatting of and reprioritizing"\n            " the following tasks: {task_names}."\n            " Consider the ultimate objective of your team: {objective}."\n            " Do not remove any tasks. Return the result as a numbered list, like:"\n            " #. First task"\n            " #. Second task"\n            " Start the task list with number {next_task_id}."\n        )\n        prompt = PromptTemplate(\n            template=task_prioritization_template,\n            input_variables=["task_names", "next_task_id", "objective"],\n        )\n        return cls(prompt=prompt, llm=llm, verbose=verbose)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.agents import ZeroShotAgent, Tool, AgentExecutor\nfrom langchain import OpenAI, SerpAPIWrapper, LLMChain\n\ntodo_prompt = PromptTemplate.from_template(\n    "You are a planner who is an expert at coming up with a todo list for a given objective. Come up with a todo list for this objective: {objective}"\n)\ntodo_chain = LLMChain(llm=OpenAI(temperature=0), prompt=todo_prompt)\nsearch = SerpAPIWrapper()\ntools = [\n    Tool(\n        name="Search",\n        func=search.run,\n        description="useful for when you need to answer questions about current events",\n    ),\n    Tool(\n        name="TODO",\n        func=todo_chain.run,\n        description="useful for when you need to come up with todo lists. Input: an objective to create a todo list for. Output: a todo list for that objective. Please be very clear what the objective is!",\n    ),\n]\n\n\nprefix = """You are an AI who performs one task based on the following objective: {objective}. Take into account these previously completed tasks: {context}."""\nsuffix = """Question: {task}\n{agent_scratchpad}"""\nprompt = ZeroShotAgent.create_prompt(\n    tools,\n    prefix=prefix,\n    suffix=suffix,\n    input_variables=["objective", "task", "context", "agent_scratchpad"],\n)\n')),(0,r.kt)("h3",{id:"define-the-babyagi-controller"},"Define the BabyAGI Controller"),(0,r.kt)("p",null,"BabyAGI composes the chains defined above in a (potentially-)infinite loop."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def get_next_task(\n    task_creation_chain: LLMChain,\n    result: Dict,\n    task_description: str,\n    task_list: List[str],\n    objective: str,\n) -> List[Dict]:\n    """Get the next task."""\n    incomplete_tasks = ", ".join(task_list)\n    response = task_creation_chain.run(\n        result=result,\n        task_description=task_description,\n        incomplete_tasks=incomplete_tasks,\n        objective=objective,\n    )\n    new_tasks = response.split("\\n")\n    return [{"task_name": task_name} for task_name in new_tasks if task_name.strip()]\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def prioritize_tasks(\n    task_prioritization_chain: LLMChain,\n    this_task_id: int,\n    task_list: List[Dict],\n    objective: str,\n) -> List[Dict]:\n    """Prioritize tasks."""\n    task_names = [t["task_name"] for t in task_list]\n    next_task_id = int(this_task_id) + 1\n    response = task_prioritization_chain.run(\n        task_names=task_names, next_task_id=next_task_id, objective=objective\n    )\n    new_tasks = response.split("\\n")\n    prioritized_task_list = []\n    for task_string in new_tasks:\n        if not task_string.strip():\n            continue\n        task_parts = task_string.strip().split(".", 1)\n        if len(task_parts) == 2:\n            task_id = task_parts[0].strip()\n            task_name = task_parts[1].strip()\n            prioritized_task_list.append({"task_id": task_id, "task_name": task_name})\n    return prioritized_task_list\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def _get_top_tasks(vectorstore, query: str, k: int) -> List[str]:\n    """Get the top k tasks based on the query."""\n    results = vectorstore.similarity_search_with_score(query, k=k)\n    if not results:\n        return []\n    sorted_results, _ = zip(*sorted(results, key=lambda x: x[1], reverse=True))\n    return [str(item.metadata["task"]) for item in sorted_results]\n\n\ndef execute_task(\n    vectorstore, execution_chain: LLMChain, objective: str, task: str, k: int = 5\n) -> str:\n    """Execute a task."""\n    context = _get_top_tasks(vectorstore, query=objective, k=k)\n    return execution_chain.run(objective=objective, context=context, task=task)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class BabyAGI(Chain, BaseModel):\n    """Controller model for the BabyAGI agent."""\n\n    task_list: deque = Field(default_factory=deque)\n    task_creation_chain: TaskCreationChain = Field(...)\n    task_prioritization_chain: TaskPrioritizationChain = Field(...)\n    execution_chain: AgentExecutor = Field(...)\n    task_id_counter: int = Field(1)\n    vectorstore: VectorStore = Field(init=False)\n    max_iterations: Optional[int] = None\n\n    class Config:\n        """Configuration for this pydantic object."""\n\n        arbitrary_types_allowed = True\n\n    def add_task(self, task: Dict):\n        self.task_list.append(task)\n\n    def print_task_list(self):\n        print("\\033[95m\\033[1m" + "\\n*****TASK LIST*****\\n" + "\\033[0m\\033[0m")\n        for t in self.task_list:\n            print(str(t["task_id"]) + ": " + t["task_name"])\n\n    def print_next_task(self, task: Dict):\n        print("\\033[92m\\033[1m" + "\\n*****NEXT TASK*****\\n" + "\\033[0m\\033[0m")\n        print(str(task["task_id"]) + ": " + task["task_name"])\n\n    def print_task_result(self, result: str):\n        print("\\033[93m\\033[1m" + "\\n*****TASK RESULT*****\\n" + "\\033[0m\\033[0m")\n        print(result)\n\n    @property\n    def input_keys(self) -> List[str]:\n        return ["objective"]\n\n    @property\n    def output_keys(self) -> List[str]:\n        return []\n\n    def _call(self, inputs: Dict[str, Any]) -> Dict[str, Any]:\n        """Run the agent."""\n        objective = inputs["objective"]\n        first_task = inputs.get("first_task", "Make a todo list")\n        self.add_task({"task_id": 1, "task_name": first_task})\n        num_iters = 0\n        while True:\n            if self.task_list:\n                self.print_task_list()\n\n                # Step 1: Pull the first task\n                task = self.task_list.popleft()\n                self.print_next_task(task)\n\n                # Step 2: Execute the task\n                result = execute_task(\n                    self.vectorstore, self.execution_chain, objective, task["task_name"]\n                )\n                this_task_id = int(task["task_id"])\n                self.print_task_result(result)\n\n                # Step 3: Store the result in Pinecone\n                result_id = f"result_{task[\'task_id\']}"\n                self.vectorstore.add_texts(\n                    texts=[result],\n                    metadatas=[{"task": task["task_name"]}],\n                    ids=[result_id],\n                )\n\n                # Step 4: Create new tasks and reprioritize task list\n                new_tasks = get_next_task(\n                    self.task_creation_chain,\n                    result,\n                    task["task_name"],\n                    [t["task_name"] for t in self.task_list],\n                    objective,\n                )\n                for new_task in new_tasks:\n                    self.task_id_counter += 1\n                    new_task.update({"task_id": self.task_id_counter})\n                    self.add_task(new_task)\n                self.task_list = deque(\n                    prioritize_tasks(\n                        self.task_prioritization_chain,\n                        this_task_id,\n                        list(self.task_list),\n                        objective,\n                    )\n                )\n            num_iters += 1\n            if self.max_iterations is not None and num_iters == self.max_iterations:\n                print(\n                    "\\033[91m\\033[1m" + "\\n*****TASK ENDING*****\\n" + "\\033[0m\\033[0m"\n                )\n                break\n        return {}\n\n    @classmethod\n    def from_llm(\n        cls, llm: BaseLLM, vectorstore: VectorStore, verbose: bool = False, **kwargs\n    ) -> "BabyAGI":\n        """Initialize the BabyAGI Controller."""\n        task_creation_chain = TaskCreationChain.from_llm(llm, verbose=verbose)\n        task_prioritization_chain = TaskPrioritizationChain.from_llm(\n            llm, verbose=verbose\n        )\n        llm_chain = LLMChain(llm=llm, prompt=prompt)\n        tool_names = [tool.name for tool in tools]\n        agent = ZeroShotAgent(llm_chain=llm_chain, allowed_tools=tool_names)\n        agent_executor = AgentExecutor.from_agent_and_tools(\n            agent=agent, tools=tools, verbose=True\n        )\n        return cls(\n            task_creation_chain=task_creation_chain,\n            task_prioritization_chain=task_prioritization_chain,\n            execution_chain=agent_executor,\n            vectorstore=vectorstore,\n            **kwargs,\n        )\n')),(0,r.kt)("h3",{id:"run-the-babyagi"},"Run the BabyAGI"),(0,r.kt)("p",null,"Now it's time to create the BabyAGI controller and watch it try to accomplish your objective."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'OBJECTIVE = "Write a weather report for SF today"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"llm = OpenAI(temperature=0)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Logging of LLMChains\nverbose = False\n# If None, will keep on going forever\nmax_iterations: Optional[int] = 3\nbaby_agi = BabyAGI.from_llm(\n    llm=llm, vectorstore=vectorstore, verbose=verbose, max_iterations=max_iterations\n)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'baby_agi({"objective": OBJECTIVE})\n')),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    *****TASK LIST*****\n    \n    1: Make a todo list\n    \n    *****NEXT TASK*****\n    \n    1: Make a todo list\n    \n    \n    > Entering new AgentExecutor chain...\n    Thought: I need to gather data on the current weather conditions in SF\n    Action: Search\n    Action Input: Current weather conditions in SF\n    Observation: High 67F. Winds WNW at 10 to 15 mph. Clear to partly cloudy.\n    Thought: I need to make a todo list\n    Action: TODO\n    Action Input: Write a weather report for SF today\n    Observation: \n    \n    1. Research current weather conditions in San Francisco\n    2. Gather data on temperature, humidity, wind speed, and other relevant weather conditions\n    3. Analyze data to determine current weather trends\n    4. Write a brief introduction to the weather report\n    5. Describe current weather conditions in San Francisco\n    6. Discuss any upcoming weather changes\n    7. Summarize the weather report\n    8. Proofread and edit the report\n    9. Submit the report\n    Thought: I now know the final answer\n    Final Answer: A weather report for SF today should include research on current weather conditions in San Francisco, gathering data on temperature, humidity, wind speed, and other relevant weather conditions, analyzing data to determine current weather trends, writing a brief introduction to the weather report, describing current weather conditions in San Francisco, discussing any upcoming weather changes, summarizing the weather report, proofreading and editing the report, and submitting the report.\n    \n    > Finished chain.\n    \n    *****TASK RESULT*****\n    \n    A weather report for SF today should include research on current weather conditions in San Francisco, gathering data on temperature, humidity, wind speed, and other relevant weather conditions, analyzing data to determine current weather trends, writing a brief introduction to the weather report, describing current weather conditions in San Francisco, discussing any upcoming weather changes, summarizing the weather report, proofreading and editing the report, and submitting the report.\n    \n    *****TASK LIST*****\n    \n    2: Gather data on temperature, humidity, wind speed, and other relevant weather conditions\n    3: Analyze data to determine current weather trends\n    4: Write a brief introduction to the weather report\n    5: Describe current weather conditions in San Francisco\n    6: Discuss any upcoming weather changes\n    7: Summarize the weather report\n    8: Proofread and edit the report\n    9: Submit the report\n    1: Research current weather conditions in San Francisco\n    \n    *****NEXT TASK*****\n    \n    2: Gather data on temperature, humidity, wind speed, and other relevant weather conditions\n    \n    \n    > Entering new AgentExecutor chain...\n    Thought: I need to search for the current weather conditions in SF\n    Action: Search\n    Action Input: Current weather conditions in SF\n    Observation: High 67F. Winds WNW at 10 to 15 mph. Clear to partly cloudy.\n    Thought: I need to make a todo list\n    Action: TODO\n    Action Input: Create a weather report for SF today\n    Observation: \n    \n    1. Gather current weather data for SF, including temperature, wind speed, humidity, and precipitation.\n    2. Research historical weather data for SF to compare current conditions.\n    3. Analyze current and historical data to determine any trends or patterns.\n    4. Create a visual representation of the data, such as a graph or chart.\n    5. Write a summary of the weather report, including key findings and any relevant information.\n    6. Publish the weather report on a website or other platform.\n    Thought: I now know the final answer\n    Final Answer: Today in San Francisco, the temperature is 67F with winds WNW at 10 to 15 mph. The sky is clear to partly cloudy.\n    \n    > Finished chain.\n    \n    *****TASK RESULT*****\n    \n    Today in San Francisco, the temperature is 67F with winds WNW at 10 to 15 mph. The sky is clear to partly cloudy.\n    \n    *****TASK LIST*****\n    \n    3: Research current weather conditions in San Francisco\n    4: Compare the current weather conditions in San Francisco to the average for this time of year.\n    5: Identify any potential weather-related hazards in the area.\n    6: Research any historical weather patterns in San Francisco.\n    7: Analyze data to determine current weather trends\n    8: Include any relevant data from nearby cities in the report.\n    9: Include any relevant data from the National Weather Service in the report.\n    10: Include any relevant data from local news sources in the report.\n    11: Include any relevant data from online weather sources in the report.\n    12: Include any relevant data from local meteorologists in the report.\n    13: Include any relevant data from local weather stations in the report.\n    14: Include any relevant data from satellite images in the report.\n    15: Describe current weather conditions in San Francisco\n    16: Discuss any upcoming weather changes\n    17: Write a brief introduction to the weather report\n    18: Summarize the weather report\n    19: Proofread and edit the report\n    20: Submit the report\n    \n    *****NEXT TASK*****\n    \n    3: Research current weather conditions in San Francisco\n    \n    \n    > Entering new AgentExecutor chain...\n    Thought: I need to search for current weather conditions in San Francisco\n    Action: Search\n    Action Input: Current weather conditions in San Francisco\n    Observation: TodaySun 04/09 High 67 \xb7 1% Precip. ; TonightSun 04/09 Low 49 \xb7 9% Precip. ; TomorrowMon 04/10 High 64 \xb7 11% Precip.\n    Thought: I now know the final answer\n    Final Answer: Today in San Francisco, the high temperature is 67 degrees with 1% chance of precipitation. The low temperature tonight is 49 degrees with 9% chance of precipitation. Tomorrow's high temperature is 64 degrees with 11% chance of precipitation.\n    \n    > Finished chain.\n    \n    *****TASK RESULT*****\n    \n    Today in San Francisco, the high temperature is 67 degrees with 1% chance of precipitation. The low temperature tonight is 49 degrees with 9% chance of precipitation. Tomorrow's high temperature is 64 degrees with 11% chance of precipitation.\n    \n    *****TASK ENDING*****\n    \n\n\n\n\n\n    {'objective': 'Write a weather report for SF today'}\n"))))}m.isMDXComponent=!0},92394:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/baby_agi-cb6f2db9d4964af6e40dd59fc5d29ca8.ipynb"}}]);
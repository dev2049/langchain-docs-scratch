"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[273],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},s="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=m(e,["components","mdxType","originalType","parentName"]),s=p(n),u=r,d=s["".concat(l,".").concat(u)]||s[u]||h[u]||a;return n?o.createElement(d,i(i({ref:t},c),{},{components:n})):o.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var m={};for(var l in t)hasOwnProperty.call(t,l)&&(m[l]=t[l]);m.originalType=e,m[s]="string"==typeof e?e:r,i[1]=m;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},29968:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>m,toc:()=>p});var o=n(87462),r=(n(67294),n(3905));const a={},i="How to add Memory to an LLMChain",m={unversionedId:"modules/memory/how_to/adding_memory",id:"modules/memory/how_to/adding_memory",title:"How to add Memory to an LLMChain",description:"This notebook goes over how to use the Memory class with an LLMChain. For the purposes of this walkthrough, we will add  the ConversationBufferMemory class, although this can be any memory class.",source:"@site/docs/modules/memory/how_to/adding_memory.md",sourceDirName:"modules/memory/how_to",slug:"/modules/memory/how_to/adding_memory",permalink:"/langchain-docs-scratch/docs/modules/memory/how_to/adding_memory",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/memory/how_to/adding_memory.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Memory",permalink:"/langchain-docs-scratch/docs/modules/memory/"},next:{title:"How to add memory to a Multi-Input Chain",permalink:"/langchain-docs-scratch/docs/modules/memory/how_to/adding_memory_chain_multiple_inputs"}},l={},p=[],c=(s="CodeOutputBlock",function(e){return console.warn("Component "+s+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var s;const h={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-add-memory-to-an-llmchain"},"How to add Memory to an LLMChain"),(0,r.kt)("p",null,"This notebook goes over how to use the Memory class with an LLMChain. For the purposes of this walkthrough, we will add  the ",(0,r.kt)("inlineCode",{parentName:"p"},"ConversationBufferMemory")," class, although this can be any memory class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.memory import ConversationBufferMemory\nfrom langchain import OpenAI, LLMChain, PromptTemplate\n")),(0,r.kt)("p",null,"The most important step is setting up the prompt correctly. In the below prompt, we have two input keys: one for the actual input, another for the input from the Memory class. Importantly, we make sure the keys in the PromptTemplate and the ConversationBufferMemory match up (",(0,r.kt)("inlineCode",{parentName:"p"},"chat_history"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'template = """You are a chatbot having a conversation with a human.\n\n{chat_history}\nHuman: {human_input}\nChatbot:"""\n\nprompt = PromptTemplate(\n    input_variables=["chat_history", "human_input"], \n    template=template\n)\nmemory = ConversationBufferMemory(memory_key="chat_history")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"llm_chain = LLMChain(\n    llm=OpenAI(), \n    prompt=prompt, \n    verbose=True, \n    memory=memory,\n)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'llm_chain.predict(human_input="Hi there my friend")\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new LLMChain chain...\n    Prompt after formatting:\n    You are a chatbot having a conversation with a human.\n    \n    \n    Human: Hi there my friend\n    Chatbot:\n    \n    > Finished LLMChain chain.\n\n\n\n\n\n    ' Hi there, how are you doing today?'\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'llm_chain.predict(human_input="Not too bad - how are you?")\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    \n    \n    > Entering new LLMChain chain...\n    Prompt after formatting:\n    You are a chatbot having a conversation with a human.\n    \n    \n    Human: Hi there my friend\n    AI:  Hi there, how are you doing today?\n    Human: Not to bad - how are you?\n    Chatbot:\n    \n    > Finished LLMChain chain.\n\n\n\n\n\n    " I\'m doing great, thank you for asking!"\n'))))}d.isMDXComponent=!0}}]);
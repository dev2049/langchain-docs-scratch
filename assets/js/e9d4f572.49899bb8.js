"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[70057],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||s;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,r=new Array(s);r[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:o,r[1]=i;for(var u=2;u<s;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},86284:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var a=n(87462),o=(n(67294),n(3905));const s={},r="GitHub",i={unversionedId:"modules/data_io/document_loaders/integrations/github",id:"modules/data_io/document_loaders/integrations/github",title:"GitHub",description:"This notebooks shows how you can load issues and pull requests (PRs) for a given repository on GitHub. We will use the LangChain Python repository as an example.",source:"@site/docs/modules/data_io/document_loaders/integrations/github.md",sourceDirName:"modules/data_io/document_loaders/integrations",slug:"/modules/data_io/document_loaders/integrations/github",permalink:"/langchain-docs-scratch/docs/modules/data_io/document_loaders/integrations/github",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/data_io/document_loaders/integrations/github.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"GitBook",permalink:"/langchain-docs-scratch/docs/modules/data_io/document_loaders/integrations/gitbook"},next:{title:"Google BigQuery",permalink:"/langchain-docs-scratch/docs/modules/data_io/document_loaders/integrations/google_bigquery"}},l={},u=[{value:"Setup access token",id:"setup-access-token",level:2},{value:"Load Issues and PRs",id:"load-issues-and-prs",level:2},{value:"Only load issues",id:"only-load-issues",level:2}],c=(p="CodeOutputBlock",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var p;const d={toc:u},m="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"github"},"GitHub"),(0,o.kt)("p",null,"This notebooks shows how you can load issues and pull requests (PRs) for a given repository on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/"},"GitHub"),". We will use the LangChain Python repository as an example."),(0,o.kt)("h2",{id:"setup-access-token"},"Setup access token"),(0,o.kt)("p",null,"To access the GitHub API, you need a personal access token - you can set up yours here: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/settings/tokens?type=beta"},"https://github.com/settings/tokens?type=beta"),". You can either set this token as the environment variable ",(0,o.kt)("inlineCode",{parentName:"p"},"GITHUB_PERSONAL_ACCESS_TOKEN")," and it will be automatically pulled in, or you can pass it in directly at initializaiton as the ",(0,o.kt)("inlineCode",{parentName:"p"},"access_token")," named parameter."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# If you haven't set your access token as an environment variable, pass it in here.\nfrom getpass import getpass\n\nACCESS_TOKEN = getpass()\n")),(0,o.kt)("h2",{id:"load-issues-and-prs"},"Load Issues and PRs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.document_loaders import GitHubIssuesLoader\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'loader = GitHubIssuesLoader(\n    repo="hwchase17/langchain",\n    access_token=ACCESS_TOKEN,  # delete/comment out this argument if you\'ve set the access token as an env var.\n    creator="UmerHA",\n)\n')),(0,o.kt)("p",null,'Let\'s load all issues and PRs created by "UmerHA".'),(0,o.kt)("p",null,"Here's a list of all filters you can use:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"include_prs"),(0,o.kt)("li",{parentName:"ul"},"milestone"),(0,o.kt)("li",{parentName:"ul"},"state"),(0,o.kt)("li",{parentName:"ul"},"assignee"),(0,o.kt)("li",{parentName:"ul"},"creator"),(0,o.kt)("li",{parentName:"ul"},"mentioned"),(0,o.kt)("li",{parentName:"ul"},"labels"),(0,o.kt)("li",{parentName:"ul"},"sort"),(0,o.kt)("li",{parentName:"ul"},"direction"),(0,o.kt)("li",{parentName:"ul"},"since")),(0,o.kt)("p",null,"For more info, see ",(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/rest/issues/issues?apiVersion=2022-11-28#list-repository-issues"},"https://docs.github.com/en/rest/issues/issues?apiVersion=2022-11-28#list-repository-issues"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"docs = loader.load()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(docs[0].page_content)\nprint(docs[0].metadata)\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    # Creates GitHubLoader (#5257)\n    \n    GitHubLoader is a DocumentLoader that loads issues and PRs from GitHub.\n    \n    Fixes #5257\n    \n    Community members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\n    DataLoaders\n    - @eyurtsev\n    \n    {'url': 'https://github.com/hwchase17/langchain/pull/5408', 'title': 'DocumentLoader for GitHub', 'creator': 'UmerHA', 'created_at': '2023-05-29T14:50:53Z', 'comments': 0, 'state': 'open', 'labels': ['enhancement', 'lgtm', 'doc loader'], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5408, 'is_pull_request': True}\n"))),(0,o.kt)("h2",{id:"only-load-issues"},"Only load issues"),(0,o.kt)("p",null,"By default, the GitHub API returns considers pull requests to also be issues. To only get 'pure' issues (i.e., no pull requests), use ",(0,o.kt)("inlineCode",{parentName:"p"},"include_prs=False")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'loader = GitHubIssuesLoader(\n    repo="hwchase17/langchain",\n    access_token=ACCESS_TOKEN,  # delete/comment out this argument if you\'ve set the access token as an env var.\n    creator="UmerHA",\n    include_prs=False,\n)\ndocs = loader.load()\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(docs[0].page_content)\nprint(docs[0].metadata)\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    ### System Info\n    \n    LangChain version = 0.0.167\n    Python version = 3.11.0\n    System = Windows 11 (using Jupyter)\n    \n    ### Who can help?\n    \n    - @hwchase17\n    - @agola11\n    - @UmerHA (I have a fix ready, will submit a PR)\n    \n    ### Information\n    \n    - [ ] The official example notebooks/scripts\n    - [X] My own modified scripts\n    \n    ### Related Components\n    \n    - [X] LLMs/Chat Models\n    - [ ] Embedding Models\n    - [X] Prompts / Prompt Templates / Prompt Selectors\n    - [ ] Output Parsers\n    - [ ] Document Loaders\n    - [ ] Vector Stores / Retrievers\n    - [ ] Memory\n    - [ ] Agents / Agent Executors\n    - [ ] Tools / Toolkits\n    - [ ] Chains\n    - [ ] Callbacks/Tracing\n    - [ ] Async\n    \n    ### Reproduction\n    \n    ```\n    import os\n    os.environ[\"OPENAI_API_KEY\"] = \"...\"\n    \n    from langchain.chains import LLMChain\n    from langchain.chat_models import ChatOpenAI\n    from langchain.prompts import PromptTemplate\n    from langchain.prompts.chat import ChatPromptTemplate\n    from langchain.schema import messages_from_dict\n    \n    role_strings = [\n        (\"system\", \"you are a bird expert\"), \n        (\"human\", \"which bird has a point beak?\")\n    ]\n    prompt = ChatPromptTemplate.from_role_strings(role_strings)\n    chain = LLMChain(llm=ChatOpenAI(), prompt=prompt)\n    chain.run({})\n    ```\n    \n    ### Expected behavior\n    \n    Chain should run\n    {'url': 'https://github.com/hwchase17/langchain/issues/5027', 'title': \"ChatOpenAI models don't work with prompts created via ChatPromptTemplate.from_role_strings\", 'creator': 'UmerHA', 'created_at': '2023-05-20T10:39:18Z', 'comments': 1, 'state': 'open', 'labels': [], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5027, 'is_pull_request': False}\n"))))}h.isMDXComponent=!0}}]);
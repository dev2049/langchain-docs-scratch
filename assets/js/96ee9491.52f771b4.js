"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[38899],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=l(n),m=r,d=h["".concat(p,".").concat(m)]||h[m]||u[m]||i;return n?a.createElement(d,o(o({ref:t},c),{},{components:n})):a.createElement(d,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[h]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},96486:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={},o="Router chain",s={unversionedId:"modules/chains/how_to/router",id:"modules/chains/how_to/router",title:"Router chain",description:"This notebook demonstrates how to use the RouterChain paradigm to create a chain that dynamically selects the next chain to use for a given input.",source:"@site/docs/modules/chains/how_to/router.md",sourceDirName:"modules/chains/how_to",slug:"/modules/chains/how_to/router",permalink:"/langchain-docs-scratch/docs/modules/chains/how_to/router",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/chains/how_to/router.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"LLM chain",permalink:"/langchain-docs-scratch/docs/modules/chains/how_to/llm_chain"},next:{title:"Sequential chain",permalink:"/langchain-docs-scratch/docs/modules/chains/how_to/sequential_chains"}},p={},l=[{value:"LLMRouterChain",id:"llmrouterchain",level:2},{value:"EmbeddingRouterChain",id:"embeddingrouterchain",level:2}],c=(h="CodeOutputBlock",function(e){return console.warn("Component "+h+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var h;const u={toc:l},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"router-chain"},"Router chain"),(0,r.kt)("p",null,"This notebook demonstrates how to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"RouterChain")," paradigm to create a chain that dynamically selects the next chain to use for a given input. "),(0,r.kt)("p",null,"Router chains are made up of two components:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The RouterChain itself (responsible for selecting the next chain to call)"),(0,r.kt)("li",{parentName:"ul"},"destination_chains: chains that the router chain can route to")),(0,r.kt)("p",null,"In this notebook we will focus on the different types of routing chains. We will show these routing chains used in a ",(0,r.kt)("inlineCode",{parentName:"p"},"MultiPromptChain")," to create a question-answering chain that selects the prompt which is most relevant for a given question, and then answers the question using that prompt."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.chains.router import MultiPromptChain\nfrom langchain.llms import OpenAI\nfrom langchain.chains import ConversationChain\nfrom langchain.chains.llm import LLMChain\nfrom langchain.prompts import PromptTemplate\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'physics_template = """You are a very smart physics professor. \\\nYou are great at answering questions about physics in a concise and easy to understand manner. \\\nWhen you don\'t know the answer to a question you admit that you don\'t know.\n\nHere is a question:\n{input}"""\n\n\nmath_template = """You are a very good mathematician. You are great at answering math questions. \\\nYou are so good because you are able to break down hard problems into their component parts, \\\nanswer the component parts, and then put them together to answer the broader question.\n\nHere is a question:\n{input}"""\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'prompt_infos = [\n    {\n        "name": "physics", \n        "description": "Good for answering questions about physics", \n        "prompt_template": physics_template\n    },\n    {\n        "name": "math", \n        "description": "Good for answering math questions", \n        "prompt_template": math_template\n    }\n]\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"llm = OpenAI()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'destination_chains = {}\nfor p_info in prompt_infos:\n    name = p_info["name"]\n    prompt_template = p_info["prompt_template"]\n    prompt = PromptTemplate(template=prompt_template, input_variables=["input"])\n    chain = LLMChain(llm=llm, prompt=prompt)\n    destination_chains[name] = chain\ndefault_chain = ConversationChain(llm=llm, output_key="text")\n')),(0,r.kt)("h2",{id:"llmrouterchain"},"LLMRouterChain"),(0,r.kt)("p",null,"This chain uses an LLM to determine how to route things."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.chains.router.llm_router import LLMRouterChain, RouterOutputParser\nfrom langchain.chains.router.multi_prompt_prompt import MULTI_PROMPT_ROUTER_TEMPLATE\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'destinations = [f"{p[\'name\']}: {p[\'description\']}" for p in prompt_infos]\ndestinations_str = "\\n".join(destinations)\nrouter_template = MULTI_PROMPT_ROUTER_TEMPLATE.format(\n    destinations=destinations_str\n)\nrouter_prompt = PromptTemplate(\n    template=router_template,\n    input_variables=["input"],\n    output_parser=RouterOutputParser(),\n)\nrouter_chain = LLMRouterChain.from_llm(llm, router_prompt)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"chain = MultiPromptChain(router_chain=router_chain, destination_chains=destination_chains, default_chain=default_chain, verbose=True)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'print(chain.run("What is black body radiation?"))\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new MultiPromptChain chain...\n    physics: {'input': 'What is black body radiation?'}\n    > Finished chain.\n    \n    \n    Black body radiation is the term used to describe the electromagnetic radiation emitted by a \u201cblack body\u201d\u2014an object that absorbs all radiation incident upon it. A black body is an idealized physical body that absorbs all incident electromagnetic radiation, regardless of frequency or angle of incidence. It does not reflect, emit or transmit energy. This type of radiation is the result of the thermal motion of the body's atoms and molecules, and it is emitted at all wavelengths. The spectrum of radiation emitted is described by Planck's law and is known as the black body spectrum.\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'print(chain.run("What is the first prime number greater than 40 such that one plus the prime number is divisible by 3"))\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new MultiPromptChain chain...\n    math: {'input': 'What is the first prime number greater than 40 such that one plus the prime number is divisible by 3'}\n    > Finished chain.\n    ?\n    \n    The answer is 43. One plus 43 is 44 which is divisible by 3.\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'print(chain.run("What is the name of the type of cloud that rins"))\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new MultiPromptChain chain...\n    None: {'input': 'What is the name of the type of cloud that rains?'}\n    > Finished chain.\n     The type of cloud that rains is called a cumulonimbus cloud. It is a tall and dense cloud that is often accompanied by thunder and lightning.\n"))),(0,r.kt)("h2",{id:"embeddingrouterchain"},"EmbeddingRouterChain"),(0,r.kt)("p",null,"The EmbeddingRouterChain uses embeddings and similarity to route between destination chains."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.chains.router.embedding_router import EmbeddingRouterChain\nfrom langchain.embeddings import CohereEmbeddings\nfrom langchain.vectorstores import Chroma\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'names_and_descriptions = [\n    ("physics", ["for questions about physics"]),\n    ("math", ["for questions about math"]),\n]\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'router_chain = EmbeddingRouterChain.from_names_and_descriptions(\n    names_and_descriptions, Chroma, CohereEmbeddings(), routing_keys=["input"]\n)\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Using embedded DuckDB without persistence: data will be transient\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"chain = MultiPromptChain(router_chain=router_chain, destination_chains=destination_chains, default_chain=default_chain, verbose=True)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'print(chain.run("What is black body radiation?"))\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new MultiPromptChain chain...\n    physics: {'input': 'What is black body radiation?'}\n    > Finished chain.\n    \n    \n    Black body radiation is the emission of energy from an idealized physical body (known as a black body) that is in thermal equilibrium with its environment. It is emitted in a characteristic pattern of frequencies known as a black-body spectrum, which depends only on the temperature of the body. The study of black body radiation is an important part of astrophysics and atmospheric physics, as the thermal radiation emitted by stars and planets can often be approximated as black body radiation.\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'print(chain.run("What is the first prime number greater than 40 such that one plus the prime number is divisible by 3"))\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new MultiPromptChain chain...\n    math: {'input': 'What is the first prime number greater than 40 such that one plus the prime number is divisible by 3'}\n    > Finished chain.\n    ?\n    \n    Answer: The first prime number greater than 40 such that one plus the prime number is divisible by 3 is 43.\n"))))}d.isMDXComponent=!0}}]);
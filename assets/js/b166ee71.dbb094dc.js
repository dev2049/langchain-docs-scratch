"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[34105],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>g});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=a.createContext({}),c=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=c(e.components);return a.createElement(d.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),m=c(t),p=r,g=m["".concat(d,".").concat(p)]||m[p]||u[p]||i;return t?a.createElement(g,s(s({ref:n},l),{},{components:t})):a.createElement(g,s({ref:n},l))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=p;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o[m]="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},49307:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const i={},s="Elasticsearch",o={unversionedId:"modules/data_io/text_embedding/integrations/elasticsearch",id:"modules/data_io/text_embedding/integrations/elasticsearch",title:"Elasticsearch",description:"Walkthrough of how to generate embeddings using a hosted embedding model in Elasticsearch",source:"@site/docs/modules/data_io/text_embedding/integrations/elasticsearch.md",sourceDirName:"modules/data_io/text_embedding/integrations",slug:"/modules/data_io/text_embedding/integrations/elasticsearch",permalink:"/langchain-docs-scratch/docs/modules/data_io/text_embedding/integrations/elasticsearch",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/data_io/text_embedding/integrations/elasticsearch.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Cohere",permalink:"/langchain-docs-scratch/docs/modules/data_io/text_embedding/integrations/cohere"},next:{title:"Fake Embeddings",permalink:"/langchain-docs-scratch/docs/modules/data_io/text_embedding/integrations/fake"}},d={},c=[{value:"Testing with <code>from_credentials</code>",id:"testing-with-from_credentials",level:2},{value:"Testing with Existing Elasticsearch client connection",id:"testing-with-existing-elasticsearch-client-connection",level:2}],l={toc:c},m="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"elasticsearch"},"Elasticsearch"),(0,r.kt)("p",null,"Walkthrough of how to generate embeddings using a hosted embedding model in Elasticsearch"),(0,r.kt)("p",null,"The easiest way to instantiate the ",(0,r.kt)("inlineCode",{parentName:"p"},"ElasticsearchEmebddings")," class it either"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"using the ",(0,r.kt)("inlineCode",{parentName:"li"},"from_credentials")," constructor if you are using Elastic Cloud"),(0,r.kt)("li",{parentName:"ul"},"or using the ",(0,r.kt)("inlineCode",{parentName:"li"},"from_es_connection")," constructor with any Elasticsearch cluster")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip -q install elasticsearch langchain\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import elasticsearch\nfrom langchain.embeddings.elasticsearch import ElasticsearchEmbeddings\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Define the model ID\nmodel_id = 'your_model_id'\n")),(0,r.kt)("h2",{id:"testing-with-from_credentials"},"Testing with ",(0,r.kt)("inlineCode",{parentName:"h2"},"from_credentials")),(0,r.kt)("p",null,"This required an Elastic Cloud ",(0,r.kt)("inlineCode",{parentName:"p"},"cloud_id")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Instantiate ElasticsearchEmbeddings using credentials\nembeddings = ElasticsearchEmbeddings.from_credentials(\n    model_id,\n    es_cloud_id='your_cloud_id', \n    es_user='your_user', \n    es_password='your_password'\n)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Create embeddings for multiple documents\ndocuments = [\n    'This is an example document.', \n    'Another example document to generate embeddings for.'\n]\ndocument_embeddings = embeddings.embed_documents(documents)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Print document embeddings\nfor i, embedding in enumerate(document_embeddings):\n    print(f"Embedding for document {i+1}: {embedding}")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Create an embedding for a single query\nquery = 'This is a single query.'\nquery_embedding = embeddings.embed_query(query)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Print query embedding\nprint(f"Embedding for query: {query_embedding}")\n')),(0,r.kt)("h2",{id:"testing-with-existing-elasticsearch-client-connection"},"Testing with Existing Elasticsearch client connection"),(0,r.kt)("p",null,"This can be used with any Elasticsearch deployment"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Create Elasticsearch connection\nes_connection = Elasticsearch(\n    hosts=['https://es_cluster_url:port'], \n    basic_auth=('user', 'password')\n)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Instantiate ElasticsearchEmbeddings using es_connection\nembeddings = ElasticsearchEmbeddings.from_es_connection(\n  model_id,\n  es_connection,\n)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Create embeddings for multiple documents\ndocuments = [\n    'This is an example document.', \n    'Another example document to generate embeddings for.'\n]\ndocument_embeddings = embeddings.embed_documents(documents)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Print document embeddings\nfor i, embedding in enumerate(document_embeddings):\n    print(f"Embedding for document {i+1}: {embedding}")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Create an embedding for a single query\nquery = 'This is a single query.'\nquery_embedding = embeddings.embed_query(query)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Print query embedding\nprint(f"Embedding for query: {query_embedding}")\n')))}u.isMDXComponent=!0}}]);
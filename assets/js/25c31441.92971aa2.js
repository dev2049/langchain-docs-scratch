"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[11941],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>g});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=r.createContext({}),s=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=s(e.components);return r.createElement(d.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,d=e.parentName,l=m(e,["components","mdxType","originalType","parentName"]),c=s(t),u=o,g=c["".concat(d,".").concat(u)]||c[u]||p[u]||i;return t?r.createElement(g,a(a({ref:n},l),{},{components:t})):r.createElement(g,a({ref:n},l))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=u;var m={};for(var d in n)hasOwnProperty.call(n,d)&&(m[d]=n[d]);m.originalType=e,m[c]="string"==typeof e?e:o,a[1]=m;for(var s=2;s<i;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},47080:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>g,frontMatter:()=>i,metadata:()=>m,toc:()=>s});var r=t(87462),o=(t(67294),t(3905));const i={},a="MiniMax",m={unversionedId:"modules/model_io/models/text_embedding/integrations/minimax",id:"modules/model_io/models/text_embedding/integrations/minimax",title:"MiniMax",description:"MiniMax offers an embeddings service.",source:"@site/docs/modules/model_io/models/text_embedding/integrations/minimax.md",sourceDirName:"modules/model_io/models/text_embedding/integrations",slug:"/modules/model_io/models/text_embedding/integrations/minimax",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/text_embedding/integrations/minimax",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/model_io/models/text_embedding/integrations/minimax.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Llama-cpp",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/text_embedding/integrations/llamacpp"},next:{title:"ModelScope",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/text_embedding/integrations/modelscope_hub"}},d={},s=[],l=(c="CodeOutputBlock",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var c;const p={toc:s},u="wrapper";function g(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"minimax"},"MiniMax"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://api.minimax.chat/document/guides/embeddings?id=6464722084cdc277dfaa966a"},"MiniMax")," offers an embeddings service."),(0,o.kt)("p",null,"This example goes over how to use LangChain to interact with MiniMax Inference for text embedding."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import os\n\nos.environ["MINIMAX_GROUP_ID"] = "MINIMAX_GROUP_ID"\nos.environ["MINIMAX_API_KEY"] = "MINIMAX_API_KEY"\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.embeddings import MiniMaxEmbeddings\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"embeddings = MiniMaxEmbeddings()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'query_text = "This is a test query."\nquery_result = embeddings.embed_query(query_text)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'document_text = "This is a test document."\ndocument_result = embeddings.embed_documents([document_text])\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import numpy as np\n\nquery_numpy = np.array(query_result)\ndocument_numpy = np.array(document_result[0])\nsimilarity = np.dot(query_numpy, document_numpy) / (np.linalg.norm(query_numpy)*np.linalg.norm(document_numpy))\nprint(f"Cosine similarity between document and query: {similarity}")\n')),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Cosine similarity between document and query: 0.1573236279277012\n"))))}g.isMDXComponent=!0}}]);
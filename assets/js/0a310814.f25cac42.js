"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[98976],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,m=d["".concat(l,".").concat(u)]||d[u]||h[u]||o;return n?a.createElement(m,s(s({ref:t},p),{},{components:n})):a.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},32112:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:0},s="Agent types",i={unversionedId:"modules/agents/agent_types/index",id:"modules/agents/agent_types/index",title:"Agent types",description:"Action agents",source:"@site/docs/modules/agents/agent_types/index.mdx",sourceDirName:"modules/agents/agent_types",slug:"/modules/agents/agent_types/",permalink:"/langchain-docs-scratch/docs/modules/agents/agent_types/",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/agents/agent_types/index.mdx",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"sidebar",previous:{title:"Agents",permalink:"/langchain-docs-scratch/docs/modules/agents/"},next:{title:"Conversational agent",permalink:"/langchain-docs-scratch/docs/modules/agents/agent_types/chat_conversation_agent"}},l={},c=[{value:"Action agents",id:"action-agents",level:2},{value:"Zero-shot ReAct",id:"zero-shot-react",level:3},{value:"ReAct document store",id:"react-document-store",level:3},{value:"Self ask with search",id:"self-ask-with-search",level:3},{value:"Conversational",id:"conversational",level:3},{value:"Plan-and-execute agents",id:"plan-and-execute-agents",level:2}],p={toc:c},d="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"agent-types"},"Agent types"),(0,r.kt)("h2",{id:"action-agents"},"Action agents"),(0,r.kt)("p",null,"Agents use an LLM to determine which actions to take and in what order.\nAn action can either be using a tool and observing its output, or returning a response to the user.\nHere are the agents available in LangChain."),(0,r.kt)("h3",{id:"zero-shot-react"},(0,r.kt)("a",{parentName:"h3",href:"./react.html"},"Zero-shot ReAct")),(0,r.kt)("p",null,"This agent uses the ",(0,r.kt)("a",{parentName:"p",href:"https://arxiv.org/pdf/2205.00445.pdf"},"ReAct")," framework to determine which tool to use\nbased solely on the tool's description. Any number of tools can be provided.\nThis agent requires that a description is provided for each tool."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Note"),": This is the most general purpose action agent.")),(0,r.kt)("h3",{id:"react-document-store"},(0,r.kt)("a",{parentName:"h3",href:"./react_docstore.html"},"ReAct document store")),(0,r.kt)("p",null,"This agent uses the ReAct framework to interact with a docstore. Two tools must\nbe provided: a ",(0,r.kt)("inlineCode",{parentName:"p"},"Search")," tool and a ",(0,r.kt)("inlineCode",{parentName:"p"},"Lookup")," tool (they must be named exactly as so).\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"Search")," tool should search for a document, while the ",(0,r.kt)("inlineCode",{parentName:"p"},"Lookup")," tool should lookup\na term in the most recently found document.\nThis agent is equivalent to the\noriginal ",(0,r.kt)("a",{parentName:"p",href:"https://arxiv.org/pdf/2210.03629.pdf"},"ReAct paper"),", specifically the Wikipedia example."),(0,r.kt)("h3",{id:"self-ask-with-search"},(0,r.kt)("a",{parentName:"h3",href:"./self_ask_with_search.html"},"Self ask with search")),(0,r.kt)("p",null,"This agent utilizes a single tool that should be named ",(0,r.kt)("inlineCode",{parentName:"p"},"Intermediate Answer"),".\nThis tool should be able to lookup factual answers to questions. This agent\nis equivalent to the original ",(0,r.kt)("a",{parentName:"p",href:"https://ofir.io/self-ask.pdf"},"self ask with search paper"),",\nwhere a Google search API was provided as the tool."),(0,r.kt)("h3",{id:"conversational"},(0,r.kt)("a",{parentName:"h3",href:"./chat_conversation_agent.html"},"Conversational")),(0,r.kt)("p",null,"This agent is designed to be used in conversational settings.\nThe prompt is designed to make the agent helpful and conversational.\nIt uses the ReAct framework to decide which tool to use, and uses memory to remember the previous conversation interactions."),(0,r.kt)("h2",{id:"plan-and-execute-agents"},(0,r.kt)("a",{parentName:"h2",href:"./plan_and_execute.html"},"Plan-and-execute agents")),(0,r.kt)("p",null,"Plan and execute agents accomplish an objective by first planning what to do, then executing the sub tasks. This idea is largely inspired by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/yoheinakajima/babyagi"},"BabyAGI")," and then the ",(0,r.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/2305.04091"},'"Plan-and-Solve" paper'),"."))}h.isMDXComponent=!0}}]);
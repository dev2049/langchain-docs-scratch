"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[82629],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=s(n),d=r,h=c["".concat(p,".").concat(d)]||c[d]||u[d]||o;return n?a.createElement(h,l(l({ref:t},m),{},{components:n})):a.createElement(h,l({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1911:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={},l="Select by maximal marginal relevance (MMR)",i={unversionedId:"modules/model_io/prompts/example_selectors/how_to/mmr",id:"modules/model_io/prompts/example_selectors/how_to/mmr",title:"Select by maximal marginal relevance (MMR)",description:"The MaxMarginalRelevanceExampleSelector selects examples based on a combination of which examples are most similar to the inputs, while also optimizing for diversity. It does this by finding the examples with the embeddings that have the greatest cosine similarity with the inputs, and then iteratively adding them while penalizing them for closeness to already selected examples.",source:"@site/docs/modules/model_io/prompts/example_selectors/how_to/mmr.md",sourceDirName:"modules/model_io/prompts/example_selectors/how_to",slug:"/modules/model_io/prompts/example_selectors/how_to/mmr",permalink:"/langchain-docs-scratch/docs/modules/model_io/prompts/example_selectors/how_to/mmr",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/model_io/prompts/example_selectors/how_to/mmr.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Select by length",permalink:"/langchain-docs-scratch/docs/modules/model_io/prompts/example_selectors/how_to/length_based"},next:{title:"Select by n-gram overlap",permalink:"/langchain-docs-scratch/docs/modules/model_io/prompts/example_selectors/how_to/ngram_overlap"}},p={},s=[],m=(c="CodeOutputBlock",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var c;const u={toc:s},d="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"select-by-maximal-marginal-relevance-mmr"},"Select by maximal marginal relevance (MMR)"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"MaxMarginalRelevanceExampleSelector")," selects examples based on a combination of which examples are most similar to the inputs, while also optimizing for diversity. It does this by finding the examples with the embeddings that have the greatest cosine similarity with the inputs, and then iteratively adding them while penalizing them for closeness to already selected examples."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.prompts.example_selector import MaxMarginalRelevanceExampleSelector, SemanticSimilarityExampleSelector\nfrom langchain.vectorstores import FAISS\nfrom langchain.embeddings import OpenAIEmbeddings\nfrom langchain.prompts import FewShotPromptTemplate, PromptTemplate\n\nexample_prompt = PromptTemplate(\n    input_variables=["input", "output"],\n    template="Input: {input}\\nOutput: {output}",\n)\n\n# These are a lot of examples of a pretend task of creating antonyms.\nexamples = [\n    {"input": "happy", "output": "sad"},\n    {"input": "tall", "output": "short"},\n    {"input": "energetic", "output": "lethargic"},\n    {"input": "sunny", "output": "gloomy"},\n    {"input": "windy", "output": "calm"},\n]\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'example_selector = MaxMarginalRelevanceExampleSelector.from_examples(\n    # This is the list of examples available to select from.\n    examples, \n    # This is the embedding class used to produce embeddings which are used to measure semantic similarity.\n    OpenAIEmbeddings(), \n    # This is the VectorStore class that is used to store the embeddings and do a similarity search over.\n    FAISS, \n    # This is the number of examples to produce.\n    k=2\n)\nmmr_prompt = FewShotPromptTemplate(\n    # We provide an ExampleSelector instead of examples.\n    example_selector=example_selector,\n    example_prompt=example_prompt,\n    prefix="Give the antonym of every input",\n    suffix="Input: {adjective}\\nOutput:", \n    input_variables=["adjective"],\n)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Input is a feeling, so should select the happy/sad example as the first one\nprint(mmr_prompt.format(adjective="worried"))\n')),(0,r.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Give the antonym of every input\n    \n    Input: happy\n    Output: sad\n    \n    Input: windy\n    Output: calm\n    \n    Input: worried\n    Output:\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Let\'s compare this to what we would just get if we went solely off of similarity,\n# by using SemanticSimilarityExampleSelector instead of MaxMarginalRelevanceExampleSelector.\nexample_selector = SemanticSimilarityExampleSelector.from_examples(\n    # This is the list of examples available to select from.\n    examples, \n    # This is the embedding class used to produce embeddings which are used to measure semantic similarity.\n    OpenAIEmbeddings(), \n    # This is the VectorStore class that is used to store the embeddings and do a similarity search over.\n    FAISS, \n    # This is the number of examples to produce.\n    k=2\n)\nsimilar_prompt = FewShotPromptTemplate(\n    # We provide an ExampleSelector instead of examples.\n    example_selector=example_selector,\n    example_prompt=example_prompt,\n    prefix="Give the antonym of every input",\n    suffix="Input: {adjective}\\nOutput:", \n    input_variables=["adjective"],\n)\nprint(similar_prompt.format(adjective="worried"))\n')),(0,r.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Give the antonym of every input\n    \n    Input: happy\n    Output: sad\n    \n    Input: sunny\n    Output: gloomy\n    \n    Input: worried\n    Output:\n"))))}h.isMDXComponent=!0}}]);
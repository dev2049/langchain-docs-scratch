"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[70380],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=s(t),m=r,h=c["".concat(p,".").concat(m)]||c[m]||d[m]||o;return t?a.createElement(h,l(l({ref:n},u),{},{components:t})):a.createElement(h,l({ref:n},u))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=m;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},69391:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=t(87462),r=(t(67294),t(3905));const o={},l="Banana",i={unversionedId:"ecosystem/integrations/bananadev",id:"ecosystem/integrations/bananadev",title:"Banana",description:"This page covers how to use the Banana ecosystem within LangChain.",source:"@site/docs/ecosystem/integrations/bananadev.mdx",sourceDirName:"ecosystem/integrations",slug:"/ecosystem/integrations/bananadev",permalink:"/langchain-docs-scratch/docs/ecosystem/integrations/bananadev",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/ecosystem/integrations/bananadev.mdx",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Azure OpenAI",permalink:"/langchain-docs-scratch/docs/ecosystem/integrations/azure_openai"},next:{title:"Beam",permalink:"/langchain-docs-scratch/docs/ecosystem/integrations/beam"}},p={},s=[{value:"Installation and Setup",id:"installation-and-setup",level:2},{value:"Define your Banana Template",id:"define-your-banana-template",level:2},{value:"Build the Banana app",id:"build-the-banana-app",level:2},{value:"Wrappers",id:"wrappers",level:2},{value:"LLM",id:"llm",level:3}],u={toc:s},c="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"banana"},"Banana"),(0,r.kt)("p",null,"This page covers how to use the Banana ecosystem within LangChain.\nIt is broken into two parts: installation and setup, and then references to specific Banana wrappers."),(0,r.kt)("h2",{id:"installation-and-setup"},"Installation and Setup"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Install with ",(0,r.kt)("inlineCode",{parentName:"li"},"pip install banana-dev")),(0,r.kt)("li",{parentName:"ul"},"Get an Banana api key and set it as an environment variable (",(0,r.kt)("inlineCode",{parentName:"li"},"BANANA_API_KEY"),")")),(0,r.kt)("h2",{id:"define-your-banana-template"},"Define your Banana Template"),(0,r.kt)("p",null,"If you want to use an available language model template you can find one ",(0,r.kt)("a",{parentName:"p",href:"https://app.banana.dev/templates/conceptofmind/serverless-template-palmyra-base"},"here"),".\nThis template uses the Palmyra-Base model by ",(0,r.kt)("a",{parentName:"p",href:"https://writer.com/product/api/"},"Writer"),".\nYou can check out an example Banana repository ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/conceptofmind/serverless-template-palmyra-base"},"here"),"."),(0,r.kt)("h2",{id:"build-the-banana-app"},"Build the Banana app"),(0,r.kt)("p",null,'Banana Apps must include the "output" key in the return json.\nThere is a rigid response structure.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Return the results as a dictionary\nresult = {'output': result}\n")),(0,r.kt)("p",null,"An example inference function would be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def inference(model_inputs:dict) -> dict:\n    global model\n    global tokenizer\n\n    # Parse out your arguments\n    prompt = model_inputs.get('prompt', None)\n    if prompt == None:\n        return {'message': \"No prompt provided\"}\n\n    # Run the model\n    input_ids = tokenizer.encode(prompt, return_tensors='pt').cuda()\n    output = model.generate(\n        input_ids,\n        max_length=100,\n        do_sample=True,\n        top_k=50,\n        top_p=0.95,\n        num_return_sequences=1,\n        temperature=0.9,\n        early_stopping=True,\n        no_repeat_ngram_size=3,\n        num_beams=5,\n        length_penalty=1.5,\n        repetition_penalty=1.5,\n        bad_words_ids=[[tokenizer.encode(' ', add_prefix_space=True)[0]]]\n        )\n\n    result = tokenizer.decode(output[0], skip_special_tokens=True)\n    # Return the results as a dictionary\n    result = {'output': result}\n    return result\n")),(0,r.kt)("p",null,"You can find a full example of a Banana app ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/conceptofmind/serverless-template-palmyra-base/blob/main/app.py"},"here"),"."),(0,r.kt)("h2",{id:"wrappers"},"Wrappers"),(0,r.kt)("h3",{id:"llm"},"LLM"),(0,r.kt)("p",null,"There exists an Banana LLM wrapper, which you can access with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.llms import Banana\n")),(0,r.kt)("p",null,"You need to provide a model key located in the dashboard:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'llm = Banana(model_key="YOUR_MODEL_KEY")\n')))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[20565],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),u=a,g=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return n?r.createElement(g,l(l({ref:t},c),{},{components:n})):r.createElement(g,l({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},39461:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={},l="RELLM",i={unversionedId:"modules/model_io/models/llms/integrations/rellm_experimental",id:"modules/model_io/models/llms/integrations/rellm_experimental",title:"RELLM",description:"RELLM is a library that wraps local Hugging Face pipeline models for structured decoding.",source:"@site/docs/modules/model_io/models/llms/integrations/rellm_experimental.md",sourceDirName:"modules/model_io/models/llms/integrations",slug:"/modules/model_io/models/llms/integrations/rellm_experimental",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/llms/integrations/rellm_experimental",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/model_io/models/llms/integrations/rellm_experimental.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"PromptLayer OpenAI",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/llms/integrations/promptlayer_openai"},next:{title:"Replicate",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/llms/integrations/replicate"}},s={},p=[{value:"Hugging Face Baseline",id:"hugging-face-baseline",level:3},{value:"RELLM LLM Wrapper",id:"rellm-llm-wrapper",level:2}],c=(m="CodeOutputBlock",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var m;const d={toc:p},u="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"rellm"},"RELLM"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/r2d4/rellm"},"RELLM")," is a library that wraps local Hugging Face pipeline models for structured decoding."),(0,a.kt)("p",null,"It works by generating tokens one at a time. At each step, it masks tokens that don't conform to the provided partial regular expression."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Warning - this module is still experimental")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip install rellm > /dev/null\n")),(0,a.kt)("h3",{id:"hugging-face-baseline"},"Hugging Face Baseline"),(0,a.kt)("p",null,"First, let's establish a qualitative baseline by checking the output of the model without structured decoding."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import logging\nlogging.basicConfig(level=logging.ERROR)\nprompt = """Human: "What\'s the capital of the United States?"\nAI Assistant:{\n  "action": "Final Answer",\n  "action_input": "The capital of the United States is Washington D.C."\n}\nHuman: "What\'s the capital of Pennsylvania?"\nAI Assistant:{\n  "action": "Final Answer",\n  "action_input": "The capital of Pennsylvania is Harrisburg."\n}\nHuman: "What 2 + 5?"\nAI Assistant:{\n  "action": "Final Answer",\n  "action_input": "2 + 5 = 7."\n}\nHuman: \'What\'s the capital of Maryland?\'\nAI Assistant:"""\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from transformers import pipeline\nfrom langchain.llms import HuggingFacePipeline\n\nhf_model = pipeline("text-generation", model="cerebras/Cerebras-GPT-590M", max_new_tokens=200)\n\noriginal_model = HuggingFacePipeline(pipeline=hf_model)\n\ngenerated = original_model.generate([prompt], stop=["Human:"])\nprint(generated)\n')),(0,a.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.\n\n\n    generations=[[Generation(text=' \"What\\'s the capital of Maryland?\"\\n', generation_info=None)]] llm_output=None\n"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"That's not so impressive, is it? It didn't answer the question and it didn't follow the JSON format at all! Let's try with the structured decoder."))),(0,a.kt)("h2",{id:"rellm-llm-wrapper"},"RELLM LLM Wrapper"),(0,a.kt)("p",null,"Let's try that again, now providing a regex to match the JSON structured format."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import regex # Note this is the regex library NOT python\'s re stdlib module\n\n# We\'ll choose a regex that matches to a structured json string that looks like:\n# {\n#  "action": "Final Answer",\n# "action_input": string or dict\n# }\npattern = regex.compile(r\'\\{\\s*"action":\\s*"Final Answer",\\s*"action_input":\\s*(\\{.*\\}|"[^"]*")\\s*\\}\\nHuman:\')\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.experimental.llms import RELLM\n\nmodel = RELLM(pipeline=hf_model, regex=pattern, max_new_tokens=200)\n\ngenerated = model.predict(prompt, stop=["Human:"])\nprint(generated)\n')),(0,a.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    {"action": "Final Answer",\n      "action_input": "The capital of Maryland is Baltimore."\n    }\n    \n'))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Voila! Free of parsing errors.")))}g.isMDXComponent=!0}}]);
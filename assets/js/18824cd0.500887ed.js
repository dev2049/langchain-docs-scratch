"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[96207],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>h});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),d=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=d(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=d(r),p=o,h=u["".concat(c,".").concat(p)]||u[p]||m[p]||a;return r?n.createElement(h,i(i({ref:t},l),{},{components:r})):n.createElement(h,i({ref:t},l))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var d=2;d<a;d++)i[d]=r[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},48689:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>u,default:()=>f,frontMatter:()=>l,metadata:()=>m,toc:()=>h});var n=r(87462),o=(r(67294),r(3905));const a=(i="CodeOutputBlock",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var i;const s={toc:[{value:"Similarity search",id:"similarity-search",level:3},{value:"Similarity search by vector",id:"similarity-search-by-vector",level:3}]},c="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(c,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This walkthrough uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"FAISS")," vector database, which makes use of the Facebook AI Similarity Search (FAISS) library."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pip install faiss-cpu\n")),(0,o.kt)("p",null,"We want to use OpenAIEmbeddings so we have to get the OpenAI API Key."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import os\nimport getpass\n\nos.environ['OPENAI_API_KEY'] = getpass.getpass('OpenAI API Key:')\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.document_loaders import TextLoader\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import FAISS\n\n\nraw_documents = TextLoader('../../../state_of_the_union.txt').load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocuments = text_splitter.split_documents(raw_documents)\n\ndb = FAISS.from_documents(documents, OpenAIEmbeddings())\n")),(0,o.kt)("h3",{id:"similarity-search"},"Similarity search"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'query = "What did the president say about Ketanji Brown Jackson"\ndocs = db.similarity_search(query)\nprint(docs[0].page_content)\n')),(0,o.kt)(a,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you\u2019re at it, pass the Disclose Act so Americans can know who is funding our elections.\n\n    Tonight, I\u2019d like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer\u2014an Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.\n\n    One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.\n\n    And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation\u2019s top legal minds, who will continue Justice Breyer\u2019s legacy of excellence.\n"))),(0,o.kt)("h3",{id:"similarity-search-by-vector"},"Similarity search by vector"),(0,o.kt)("p",null,"It is also possible to do a search for documents similar to a given embedding vector using ",(0,o.kt)("inlineCode",{parentName:"p"},"similarity_search_by_vector")," which accepts an embedding vector as a parameter instead of a string."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"embedding_vector = embeddings.embed_query(query)\ndocs = db.similarity_search_by_vector(embedding_vector)\n")))}d.isMDXComponent=!0;const l={sidebar_position:3},u="Vector stores",m={unversionedId:"modules/data_io/vectorstores/index",id:"modules/data_io/vectorstores/index",title:"Vector stores",description:"One of the most common ways to store and search over unstructured data is to embed it and store the resulting embedding",source:"@site/docs/modules/data_io/vectorstores/index.mdx",sourceDirName:"modules/data_io/vectorstores",slug:"/modules/data_io/vectorstores/",permalink:"/langchain-docs-scratch/docs/modules/data_io/vectorstores/",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/data_io/vectorstores/index.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"sidebar",previous:{title:"TensorflowHub",permalink:"/langchain-docs-scratch/docs/modules/data_io/text_embedding/integrations/tensorflowhub"},next:{title:"AnalyticDB",permalink:"/langchain-docs-scratch/docs/modules/data_io/vectorstores/integrations/analyticdb"}},p={},h=[{value:"Get started",id:"get-started",level:2}],y={toc:h},g="wrapper";function f(e){let{components:t,...r}=e;return(0,o.kt)(g,(0,n.Z)({},y,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"vector-stores"},"Vector stores"),(0,o.kt)("p",null,"One of the most common ways to store and search over unstructured data is to embed it and store the resulting embedding\nvectors, and then at query time to embed the unstructured query and retrieve the embedding vectors that are\n'most similar' to the embedded query. A vector store takes care of storing embedded data and performing vector search\nfor you."),(0,o.kt)("h2",{id:"get-started"},"Get started"),(0,o.kt)("p",null,"This walkthrough showcases basic functionality related to VectorStores. A key part of working with vector stores is creating the vector to put in them, which is usually created via embeddings. Therefore, it is recommended that you familiarize yourself with the ",(0,o.kt)("a",{parentName:"p",href:"/docs/modules/model_io/models/embeddings.html"},"text embedding model")," interfaces before diving into this."),(0,o.kt)(d,{mdxType:"GetStarted"}))}f.isMDXComponent=!0}}]);
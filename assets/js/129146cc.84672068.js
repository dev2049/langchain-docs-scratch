"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[74587],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var l=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,l,o=function(e,t){if(null==e)return{};var n,l,o={},a=Object.keys(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=l.createContext({}),p=function(e){var t=l.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return l.createElement(i.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},u=l.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=o,g=m["".concat(i,".").concat(u)]||m[u]||d[u]||a;return n?l.createElement(g,r(r({ref:t},c),{},{components:n})):l.createElement(g,r({ref:t},c))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[m]="string"==typeof e?e:o,r[1]=s;for(var p=2;p<a;p++)r[p]=n[p];return l.createElement.apply(null,r)}return l.createElement.apply(null,n)}u.displayName="MDXCreateElement"},88800:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var l=n(87462),o=(n(67294),n(3905));const a={},r="GPT4All",s={unversionedId:"modules/model_io/models/llms/integrations/gpt4all",id:"modules/model_io/models/llms/integrations/gpt4all",title:"GPT4All",description:"GitHub:nomic-ai/gpt4all an ecosystem of open-source chatbots trained on a massive collections of clean assistant data including code, stories and dialogue.",source:"@site/docs/modules/model_io/models/llms/integrations/gpt4all.md",sourceDirName:"modules/model_io/models/llms/integrations",slug:"/modules/model_io/models/llms/integrations/gpt4all",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/llms/integrations/gpt4all",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/model_io/models/llms/integrations/gpt4all.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"GooseAI",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/llms/integrations/gooseai_example"},next:{title:"Hugging Face Hub",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/llms/integrations/huggingface_hub"}},i={},p=[{value:"Specify Model",id:"specify-model",level:3}],c=(m="CodeOutputBlock",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var m;const d={toc:p},u="wrapper";function g(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,l.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"gpt4all"},"GPT4All"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/nomic-ai/gpt4all"},"GitHub:nomic-ai/gpt4all")," an ecosystem of open-source chatbots trained on a massive collections of clean assistant data including code, stories and dialogue."),(0,o.kt)("p",null,"This example goes over how to use LangChain to interact with ",(0,o.kt)("inlineCode",{parentName:"p"},"GPT4All")," models."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"%pip install gpt4all > /dev/null\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Note: you may need to restart the kernel to use updated packages.\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain import PromptTemplate, LLMChain\nfrom langchain.llms import GPT4All\nfrom langchain.callbacks.streaming_stdout import StreamingStdOutCallbackHandler\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'template = """Question: {question}\n\nAnswer: Let\'s think step by step."""\n\nprompt = PromptTemplate(template=template, input_variables=["question"])\n')),(0,o.kt)("h3",{id:"specify-model"},"Specify Model"),(0,o.kt)("p",null,"To run locally, download a compatible ggml-formatted model. For more info, visit ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nomic-ai/gpt4all"},"https://github.com/nomic-ai/gpt4all")),(0,o.kt)("p",null,"For full installation instructions go ",(0,o.kt)("a",{parentName:"p",href:"https://gpt4all.io/index.html"},"here"),"."),(0,o.kt)("p",null,"The GPT4All Chat installer needs to decompress a 3GB LLM model during the installation process!"),(0,o.kt)("p",null,"Note that new models are uploaded regularly - check the link above for the most recent ",(0,o.kt)("inlineCode",{parentName:"p"},".bin")," URL"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"local_path = './models/ggml-gpt4all-l13b-snoozy.bin'  # replace with your desired local file path\n")),(0,o.kt)("p",null,"Uncomment the below block to download a model. You may want to update ",(0,o.kt)("inlineCode",{parentName:"p"},"url")," to a new version."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# import requests\n\n# from pathlib import Path\n# from tqdm import tqdm\n\n# Path(local_path).parent.mkdir(parents=True, exist_ok=True)\n\n# # Example model. Check https://github.com/nomic-ai/gpt4all for the latest models.\n# url = 'http://gpt4all.io/models/ggml-gpt4all-l13b-snoozy.bin'\n\n# # send a GET request to the URL to download the file. Stream since it's large\n# response = requests.get(url, stream=True)\n\n# # open the file in binary mode and write the contents of the response to it in chunks\n# # This is a large file, so be prepared to wait.\n# with open(local_path, 'wb') as f:\n#     for chunk in tqdm(response.iter_content(chunk_size=8192)):\n#         if chunk:\n#             f.write(chunk)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Callbacks support token-wise streaming\ncallbacks = [StreamingStdOutCallbackHandler()]\n# Verbose is required to pass to the callback manager\nllm = GPT4All(model=local_path, callbacks=callbacks, verbose=True)\n# If you want to use a custom model add the backend parameter\n# Check https://docs.gpt4all.io/gpt4all_python.html for supported backends\nllm = GPT4All(model=local_path, backend='gptj', callbacks=callbacks, verbose=True)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"llm_chain = LLMChain(prompt=prompt, llm=llm)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'question = "What NFL team won the Super Bowl in the year Justin Bieber was born?"\n\nllm_chain.run(question)\n')))}g.isMDXComponent=!0}}]);
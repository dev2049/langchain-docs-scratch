"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[74690],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(n),p=s,m=u["".concat(l,".").concat(p)]||u[p]||h[p]||a;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,i=new Array(a);i[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:s,i[1]=o;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6958:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=n(87462),s=(n(67294),n(3905));const a={},i="ElasticSearch",o={unversionedId:"modules/data_io/vectorstores/integrations/elasticsearch",id:"modules/data_io/vectorstores/integrations/elasticsearch",title:"ElasticSearch",description:"Elasticsearch is a distributed, RESTful search and analytics engine. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface and schema-free JSON documents.",source:"@site/docs/modules/data_io/vectorstores/integrations/elasticsearch.md",sourceDirName:"modules/data_io/vectorstores/integrations",slug:"/modules/data_io/vectorstores/integrations/elasticsearch",permalink:"/langchain-docs-scratch/docs/modules/data_io/vectorstores/integrations/elasticsearch",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/data_io/vectorstores/integrations/elasticsearch.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"DocArrayInMemorySearch",permalink:"/langchain-docs-scratch/docs/modules/data_io/vectorstores/integrations/docarray_in_memory"},next:{title:"FAISS",permalink:"/langchain-docs-scratch/docs/modules/data_io/vectorstores/integrations/faiss"}},l={},c=[{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2},{value:"Test adding vectors",id:"test-adding-vectors",level:2},{value:"Test knn search using query vector builder",id:"test-knn-search-using-query-vector-builder",level:2},{value:"Test knn search using pre generated vector",id:"test-knn-search-using-pre-generated-vector",level:2},{value:"Test source option",id:"test-source-option",level:2},{value:"Test fields option",id:"test-fields-option",level:2},{value:"Test with es client connection rather than cloud_id",id:"test-with-es-client-connection-rather-than-cloud_id",level:3}],d=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",e)});var u;const h={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,s.kt)(p,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"elasticsearch"},"ElasticSearch"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("a",{parentName:"p",href:"https://www.elastic.co/elasticsearch/"},"Elasticsearch")," is a distributed, RESTful search and analytics engine. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface and schema-free JSON documents.")),(0,s.kt)("p",null,"This notebook shows how to use functionality related to the ",(0,s.kt)("inlineCode",{parentName:"p"},"Elasticsearch")," database."),(0,s.kt)("h1",{id:"elasticvectorsearch-class"},"ElasticVectorSearch class"),(0,s.kt)("h2",{id:"installation"},"Installation"),(0,s.kt)("p",null,"Check out ",(0,s.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/install-elasticsearch.html"},"Elasticsearch installation instructions"),"."),(0,s.kt)("p",null,"To connect to an Elasticsearch instance that does not require\nlogin credentials, pass the Elasticsearch URL and index name along with the\nembedding object to the constructor."),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'        from langchain import ElasticVectorSearch\n        from langchain.embeddings import OpenAIEmbeddings\n\n        embedding = OpenAIEmbeddings()\n        elastic_vector_search = ElasticVectorSearch(\n            elasticsearch_url="http://localhost:9200",\n            index_name="test_index",\n            embedding=embedding\n        )\n')),(0,s.kt)("p",null,"To connect to an Elasticsearch instance that requires login credentials,\nincluding Elastic Cloud, use the Elasticsearch URL format\nhttps://username:password@es_host:9243. For example, to connect to Elastic\nCloud, create the Elasticsearch URL with the required authentication details and\npass it to the ElasticVectorSearch constructor as the named parameter\nelasticsearch_url."),(0,s.kt)("p",null,"You can obtain your Elastic Cloud URL and login credentials by logging in to the\nElastic Cloud console at ",(0,s.kt)("a",{parentName:"p",href:"https://cloud.elastic.co"},"https://cloud.elastic.co"),', selecting your deployment, and\nnavigating to the "Deployments" page.'),(0,s.kt)("p",null,'To obtain your Elastic Cloud password for the default "elastic" user:'),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Log in to the Elastic Cloud console at ",(0,s.kt)("a",{parentName:"li",href:"https://cloud.elastic.co"},"https://cloud.elastic.co")),(0,s.kt)("li",{parentName:"ol"},'Go to "Security" > "Users"'),(0,s.kt)("li",{parentName:"ol"},'Locate the "elastic" user and click "Edit"'),(0,s.kt)("li",{parentName:"ol"},'Click "Reset password"'),(0,s.kt)("li",{parentName:"ol"},"Follow the prompts to reset the password")),(0,s.kt)("p",null,"Format for Elastic Cloud URLs is\nhttps://username:",(0,s.kt)("a",{parentName:"p",href:"mailto:password@cluster_id.region_id.gcp.cloud.es.io"},"password@cluster_id.region_id.gcp.cloud.es.io"),":9243."),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'        from langchain import ElasticVectorSearch\n        from langchain.embeddings import OpenAIEmbeddings\n\n        embedding = OpenAIEmbeddings()\n\n        elastic_host = "cluster_id.region_id.gcp.cloud.es.io"\n        elasticsearch_url = f"https://username:password@{elastic_host}:9243"\n        elastic_vector_search = ElasticVectorSearch(\n            elasticsearch_url=elasticsearch_url,\n            index_name="test_index",\n            embedding=embedding\n        )\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"pip install elasticsearch\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"import os\nimport getpass\n\nos.environ['OPENAI_API_KEY'] = getpass.getpass('OpenAI API Key:')\n")),(0,s.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"    OpenAI API Key: \xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\n"))),(0,s.kt)("h2",{id:"example"},"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import ElasticVectorSearch\nfrom langchain.document_loaders import TextLoader\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.document_loaders import TextLoader\nloader = TextLoader('../../../state_of_the_union.txt')\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings()\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'db = ElasticVectorSearch.from_documents(docs, embeddings, elasticsearch_url="http://localhost:9200")\n\nquery = "What did the president say about Ketanji Brown Jackson"\ndocs = db.similarity_search(query)\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"print(docs[0].page_content)\n")),(0,s.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"    In state after state, new laws have been passed, not only to suppress the vote, but to subvert entire elections. \n    \n    We cannot let this happen. \n    \n    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you\u2019re at it, pass the Disclose Act so Americans can know who is funding our elections. \n    \n    Tonight, I\u2019d like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer\u2014an Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n    \n    One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n    \n    And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation\u2019s top legal minds, who will continue Justice Breyer\u2019s legacy of excellence.\n"))),(0,s.kt)("h1",{id:"elasticknnsearch-class"},"ElasticKnnSearch Class"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"ElasticKnnSearch")," implements features allowing storing vectors and documents in Elasticsearch for use with approximate ",(0,s.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/knn-search.html"},"kNN search")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"pip install langchain elasticsearch\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.vectorstores.elastic_vector_search import ElasticKnnSearch\nfrom langchain.embeddings import ElasticsearchEmbeddings\nimport elasticsearch\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'# Initialize ElasticsearchEmbeddings\nmodel_id = "<model_id_from_es>" \ndims = dim_count\nes_cloud_id = "ESS_CLOUD_ID"\nes_user = "es_user"\nes_password = "es_pass"\ntest_index = "<index_name>"\n#input_field = "your_input_field" # if different from \'text_field\'\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# Generate embedding object\nembeddings = ElasticsearchEmbeddings.from_credentials(\n    model_id,\n    #input_field=input_field,\n    es_cloud_id=es_cloud_id,\n    es_user=es_user,\n    es_password=es_password,\n)\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# Initialize ElasticKnnSearch\nknn_search = ElasticKnnSearch(\n    es_cloud_id=es_cloud_id, \n    es_user=es_user, \n    es_password=es_password, \n    index_name= test_index, \n    embedding= embeddings\n)\n")),(0,s.kt)("h2",{id:"test-adding-vectors"},"Test adding vectors"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'# Test `add_texts` method\ntexts = ["Hello, world!", "Machine learning is fun.", "I love Python."]\nknn_search.add_texts(texts)\n\n# Test `from_texts` method\nnew_texts = ["This is a new text.", "Elasticsearch is powerful.", "Python is great for data analysis."]\nknn_search.from_texts(new_texts, dims=dims)\n')),(0,s.kt)("h2",{id:"test-knn-search-using-query-vector-builder"},"Test knn search using query vector builder"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# Test `knn_search` method with model_id and query_text\nquery = \"Hello\"\nknn_result = knn_search.knn_search(query = query, model_id= model_id, k=2)\nprint(f\"kNN search results for query '{query}': {knn_result}\")\nprint(f\"The 'text' field value from the top hit is: '{knn_result['hits']['hits'][0]['_source']['text']}'\")\n\n# Test `hybrid_search` method\nquery = \"Hello\"\nhybrid_result = knn_search.knn_hybrid_search(query = query, model_id= model_id, k=2)\nprint(f\"Hybrid search results for query '{query}': {hybrid_result}\")\nprint(f\"The 'text' field value from the top hit is: '{hybrid_result['hits']['hits'][0]['_source']['text']}'\")\n")),(0,s.kt)("h2",{id:"test-knn-search-using-pre-generated-vector"},"Test knn search using pre generated vector"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# Generate embedding for tests\nquery_text = 'Hello'\nquery_embedding = embeddings.embed_query(query_text)\nprint(f\"Length of embedding: {len(query_embedding)}\\nFirst two items in embedding: {query_embedding[:2]}\")\n\n# Test knn Search\nknn_result = knn_search.knn_search(query_vector = query_embedding, k=2)\nprint(f\"The 'text' field value from the top hit is: '{knn_result['hits']['hits'][0]['_source']['text']}'\")\n\n# Test hybrid search - Requires both query_text and query_vector\nknn_result = knn_search.knn_hybrid_search(query_vector = query_embedding, query=query_text, k=2)\nprint(f\"The 'text' field value from the top hit is: '{knn_result['hits']['hits'][0]['_source']['text']}'\")\n")),(0,s.kt)("h2",{id:"test-source-option"},"Test source option"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# Test `knn_search` method with model_id and query_text\nquery = \"Hello\"\nknn_result = knn_search.knn_search(query = query, model_id= model_id, k=2, source=False)\nassert not '_source' in knn_result['hits']['hits'][0].keys()\n\n# Test `hybrid_search` method\nquery = \"Hello\"\nhybrid_result = knn_search.knn_hybrid_search(query = query, model_id= model_id, k=2, source=False)\nassert not '_source' in hybrid_result['hits']['hits'][0].keys()\n")),(0,s.kt)("h2",{id:"test-fields-option"},"Test fields option"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# Test `knn_search` method with model_id and query_text\nquery = \"Hello\"\nknn_result = knn_search.knn_search(query = query, model_id= model_id, k=2, fields=['text'])\nassert 'text' in knn_result['hits']['hits'][0]['fields'].keys()\n\n# Test `hybrid_search` method\nquery = \"Hello\"\nhybrid_result = knn_search.knn_hybrid_search(query = query, model_id= model_id, k=2, fields=['text'])\nassert 'text' in hybrid_result['hits']['hits'][0]['fields'].keys()\n")),(0,s.kt)("h3",{id:"test-with-es-client-connection-rather-than-cloud_id"},"Test with es client connection rather than cloud_id"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# Create Elasticsearch connection\nes_connection = Elasticsearch(\n    hosts=['https://es_cluster_url:port'], \n    basic_auth=('user', 'password')\n)\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# Instantiate ElasticsearchEmbeddings using es_connection\nembeddings = ElasticsearchEmbeddings.from_es_connection(\n    model_id,\n    es_connection,\n)\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# Initialize ElasticKnnSearch\nknn_search = ElasticKnnSearch(\n    es_connection = es_connection,\n    index_name= test_index, \n    embedding= embeddings\n)\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# Test `knn_search` method with model_id and query_text\nquery = \"Hello\"\nknn_result = knn_search.knn_search(query = query, model_id= model_id, k=2)\nprint(f\"kNN search results for query '{query}': {knn_result}\")\nprint(f\"The 'text' field value from the top hit is: '{knn_result['hits']['hits'][0]['_source']['text']}'\")\n")))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[39608],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),l=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(n),h=r,m=p["".concat(u,".").concat(h)]||p[h]||d[h]||i;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[p]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},11606:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>p,default:()=>y,frontMatter:()=>c,metadata:()=>d,toc:()=>m});var a=n(87462),r=(n(67294),n(3905));const i=(o="CodeOutputBlock",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var o;const s={toc:[{value:"Prepare Data",id:"prepare-data",level:2},{value:"Quickstart",id:"quickstart",level:2},{value:"The <code>stuff</code> Chain",id:"the-stuff-chain",level:2},{value:"The <code>map_reduce</code> Chain",id:"the-map_reduce-chain",level:2},{value:"The <code>refine</code> Chain",id:"the-refine-chain",level:2},{value:"The <code>map-rerank</code> Chain",id:"the-map-rerank-chain",level:2}]},u="wrapper";function l(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"prepare-data"},"Prepare Data"),(0,r.kt)("p",null,"First we prepare the data. For this example we do similarity search over a vector database, but these documents could be fetched in any manner (the point of this notebook to highlight what to do AFTER you fetch the documents)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.embeddings.cohere import CohereEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores.elastic_vector_search import ElasticVectorSearch\nfrom langchain.vectorstores import Chroma\nfrom langchain.docstore.document import Document\nfrom langchain.prompts import PromptTemplate\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'with open("../../state_of_the_union.txt") as f:\n    state_of_the_union = f.read()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ntexts = text_splitter.split_text(state_of_the_union)\n\nembeddings = OpenAIEmbeddings()\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'docsearch = Chroma.from_texts(texts, embeddings, metadatas=[{"source": str(i)} for i in range(len(texts))])\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Running Chroma using direct local API.\n    Using DuckDB in-memory for database. Data will be transient.\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'query = "What did the president say about Justice Breyer"\ndocs = docsearch.similarity_search(query)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.chains.qa_with_sources import load_qa_with_sources_chain\nfrom langchain.llms import OpenAI\n")),(0,r.kt)("h2",{id:"quickstart"},"Quickstart"),(0,r.kt)("p",null,"If you just want to get started as quickly as possible, this is the recommended way to do it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain = load_qa_with_sources_chain(OpenAI(temperature=0), chain_type="stuff")\nquery = "What did the president say about Justice Breyer"\nchain({"input_documents": docs, "question": query}, return_only_outputs=True)\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'output_text': ' The president thanked Justice Breyer for his service.\\nSOURCES: 30-pl'}\n"))),(0,r.kt)("p",null,"If you want more control and understanding over what is happening, please see the information below."),(0,r.kt)("h2",{id:"the-stuff-chain"},"The ",(0,r.kt)("inlineCode",{parentName:"h2"},"stuff")," Chain"),(0,r.kt)("p",null,"This sections shows results of using the ",(0,r.kt)("inlineCode",{parentName:"p"},"stuff")," Chain to do question answering with sources."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain = load_qa_with_sources_chain(OpenAI(temperature=0), chain_type="stuff")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'query = "What did the president say about Justice Breyer"\nchain({"input_documents": docs, "question": query}, return_only_outputs=True)\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'output_text': ' The president thanked Justice Breyer for his service.\\nSOURCES: 30-pl'}\n"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Custom Prompts")),(0,r.kt)("p",null,"You can also use your own prompts with this chain. In this example, we will respond in Italian."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'template = """Given the following extracted parts of a long document and a question, create a final answer with references ("SOURCES"). \nIf you don\'t know the answer, just say that you don\'t know. Don\'t try to make up an answer.\nALWAYS return a "SOURCES" part in your answer.\nRespond in Italian.\n\nQUESTION: {question}\n=========\n{summaries}\n=========\nFINAL ANSWER IN ITALIAN:"""\nPROMPT = PromptTemplate(template=template, input_variables=["summaries", "question"])\n\nchain = load_qa_with_sources_chain(OpenAI(temperature=0), chain_type="stuff", prompt=PROMPT)\nquery = "What did the president say about Justice Breyer"\nchain({"input_documents": docs, "question": query}, return_only_outputs=True)\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'output_text': '\\nNon so cosa abbia detto il presidente riguardo a Justice Breyer.\\nSOURCES: 30, 31, 33'}\n"))),(0,r.kt)("h2",{id:"the-map_reduce-chain"},"The ",(0,r.kt)("inlineCode",{parentName:"h2"},"map_reduce")," Chain"),(0,r.kt)("p",null,"This sections shows results of using the ",(0,r.kt)("inlineCode",{parentName:"p"},"map_reduce")," Chain to do question answering with sources."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain = load_qa_with_sources_chain(OpenAI(temperature=0), chain_type="map_reduce")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'query = "What did the president say about Justice Breyer"\nchain({"input_documents": docs, "question": query}, return_only_outputs=True)\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'output_text': ' The president thanked Justice Breyer for his service.\\nSOURCES: 30-pl'}\n"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Intermediate Steps")),(0,r.kt)("p",null,"We can also return the intermediate steps for ",(0,r.kt)("inlineCode",{parentName:"p"},"map_reduce")," chains, should we want to inspect them. This is done with the ",(0,r.kt)("inlineCode",{parentName:"p"},"return_intermediate_steps")," variable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain = load_qa_with_sources_chain(OpenAI(temperature=0), chain_type="map_reduce", return_intermediate_steps=True)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain({"input_documents": docs, "question": query}, return_only_outputs=True)\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'intermediate_steps': [' \"Tonight, I\u2019d like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer\u2014an Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.\"',\n      ' None',\n      ' None',\n      ' None'],\n     'output_text': ' The president thanked Justice Breyer for his service.\\nSOURCES: 30-pl'}\n"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Custom Prompts")),(0,r.kt)("p",null,"You can also use your own prompts with this chain. In this example, we will respond in Italian."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'question_prompt_template = """Use the following portion of a long document to see if any of the text is relevant to answer the question. \nReturn any relevant text in Italian.\n{context}\nQuestion: {question}\nRelevant text, if any, in Italian:"""\nQUESTION_PROMPT = PromptTemplate(\n    template=question_prompt_template, input_variables=["context", "question"]\n)\n\ncombine_prompt_template = """Given the following extracted parts of a long document and a question, create a final answer with references ("SOURCES"). \nIf you don\'t know the answer, just say that you don\'t know. Don\'t try to make up an answer.\nALWAYS return a "SOURCES" part in your answer.\nRespond in Italian.\n\nQUESTION: {question}\n=========\n{summaries}\n=========\nFINAL ANSWER IN ITALIAN:"""\nCOMBINE_PROMPT = PromptTemplate(\n    template=combine_prompt_template, input_variables=["summaries", "question"]\n)\n\nchain = load_qa_with_sources_chain(OpenAI(temperature=0), chain_type="map_reduce", return_intermediate_steps=True, question_prompt=QUESTION_PROMPT, combine_prompt=COMBINE_PROMPT)\nchain({"input_documents": docs, "question": query}, return_only_outputs=True)\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'intermediate_steps': [\"\\nStasera vorrei onorare qualcuno che ha dedicato la sua vita a servire questo paese: il giustizia Stephen Breyer - un veterano dell'esercito, uno studioso costituzionale e un giustizia in uscita della Corte Suprema degli Stati Uniti. Giustizia Breyer, grazie per il tuo servizio.\",\n      ' Non pertinente.',\n      ' Non rilevante.',\n      \" Non c'\xe8 testo pertinente.\"],\n     'output_text': ' Non conosco la risposta. SOURCES: 30, 31, 33, 20.'}\n"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Batch Size")),(0,r.kt)("p",null,"When using the ",(0,r.kt)("inlineCode",{parentName:"p"},"map_reduce")," chain, one thing to keep in mind is the batch size you are using during the map step. If this is too high, it could cause rate limiting errors. You can control this by setting the batch size on the LLM used. Note that this only applies for LLMs with this parameter. Below is an example of doing so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"llm = OpenAI(batch_size=5, temperature=0)\n")),(0,r.kt)("h2",{id:"the-refine-chain"},"The ",(0,r.kt)("inlineCode",{parentName:"h2"},"refine")," Chain"),(0,r.kt)("p",null,"This sections shows results of using the ",(0,r.kt)("inlineCode",{parentName:"p"},"refine")," Chain to do question answering with sources."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain = load_qa_with_sources_chain(OpenAI(temperature=0), chain_type="refine")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'query = "What did the president say about Justice Breyer"\nchain({"input_documents": docs, "question": query}, return_only_outputs=True)\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'output_text': \"\\n\\nThe president said that he was honoring Justice Breyer for his dedication to serving the country and that he was a retiring Justice of the United States Supreme Court. He also thanked him for his service and praised his career as a top litigator in private practice, a former federal public defender, and a family of public school educators and police officers. He noted Justice Breyer's reputation as a consensus builder and the broad range of support he has received from the Fraternal Order of Police to former judges appointed by Democrats and Republicans. He also highlighted the importance of securing the border and fixing the immigration system in order to advance liberty and justice, and mentioned the new technology, joint patrols, dedicated immigration judges, and commitments to support partners in South and Central America that have been put in place. He also expressed his commitment to the LGBTQ+ community, noting the need for the bipartisan Equality Act and the importance of protecting transgender Americans from state laws targeting them. He also highlighted his commitment to bipartisanship, noting the 80 bipartisan bills he signed into law last year, and his plans to strengthen the Violence Against Women Act. Additionally, he announced that the Justice Department will name a chief prosecutor for pandemic fraud and his plan to lower the deficit by more than one trillion dollars in a\"}\n"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Intermediate Steps")),(0,r.kt)("p",null,"We can also return the intermediate steps for ",(0,r.kt)("inlineCode",{parentName:"p"},"refine")," chains, should we want to inspect them. This is done with the ",(0,r.kt)("inlineCode",{parentName:"p"},"return_intermediate_steps")," variable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain = load_qa_with_sources_chain(OpenAI(temperature=0), chain_type="refine", return_intermediate_steps=True)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain({"input_documents": docs, "question": query}, return_only_outputs=True)\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'intermediate_steps': ['\\nThe president said that he was honoring Justice Breyer for his dedication to serving the country and that he was a retiring Justice of the United States Supreme Court. He also thanked Justice Breyer for his service.',\n      '\\n\\nThe president said that he was honoring Justice Breyer for his dedication to serving the country and that he was a retiring Justice of the United States Supreme Court. He also thanked Justice Breyer for his service, noting his background as a top litigator in private practice, a former federal public defender, and a family of public school educators and police officers. He praised Justice Breyer for being a consensus builder and for receiving a broad range of support from the Fraternal Order of Police to former judges appointed by Democrats and Republicans. He also noted that in order to advance liberty and justice, it was necessary to secure the border and fix the immigration system, and that the government was taking steps to do both. \\n\\nSource: 31',\n      '\\n\\nThe president said that he was honoring Justice Breyer for his dedication to serving the country and that he was a retiring Justice of the United States Supreme Court. He also thanked Justice Breyer for his service, noting his background as a top litigator in private practice, a former federal public defender, and a family of public school educators and police officers. He praised Justice Breyer for being a consensus builder and for receiving a broad range of support from the Fraternal Order of Police to former judges appointed by Democrats and Republicans. He also noted that in order to advance liberty and justice, it was necessary to secure the border and fix the immigration system, and that the government was taking steps to do both. He also mentioned the need to pass the bipartisan Equality Act to protect LGBTQ+ Americans, and to strengthen the Violence Against Women Act that he had written three decades ago. \\n\\nSource: 31, 33',\n      '\\n\\nThe president said that he was honoring Justice Breyer for his dedication to serving the country and that he was a retiring Justice of the United States Supreme Court. He also thanked Justice Breyer for his service, noting his background as a top litigator in private practice, a former federal public defender, and a family of public school educators and police officers. He praised Justice Breyer for being a consensus builder and for receiving a broad range of support from the Fraternal Order of Police to former judges appointed by Democrats and Republicans. He also noted that in order to advance liberty and justice, it was necessary to secure the border and fix the immigration system, and that the government was taking steps to do both. He also mentioned the need to pass the bipartisan Equality Act to protect LGBTQ+ Americans, and to strengthen the Violence Against Women Act that he had written three decades ago. Additionally, he mentioned his plan to lower costs to give families a fair shot, lower the deficit, and go after criminals who stole billions in relief money meant for small businesses and millions of Americans. He also announced that the Justice Department will name a chief prosecutor for pandemic fraud. \\n\\nSource: 20, 31, 33'],\n     'output_text': '\\n\\nThe president said that he was honoring Justice Breyer for his dedication to serving the country and that he was a retiring Justice of the United States Supreme Court. He also thanked Justice Breyer for his service, noting his background as a top litigator in private practice, a former federal public defender, and a family of public school educators and police officers. He praised Justice Breyer for being a consensus builder and for receiving a broad range of support from the Fraternal Order of Police to former judges appointed by Democrats and Republicans. He also noted that in order to advance liberty and justice, it was necessary to secure the border and fix the immigration system, and that the government was taking steps to do both. He also mentioned the need to pass the bipartisan Equality Act to protect LGBTQ+ Americans, and to strengthen the Violence Against Women Act that he had written three decades ago. Additionally, he mentioned his plan to lower costs to give families a fair shot, lower the deficit, and go after criminals who stole billions in relief money meant for small businesses and millions of Americans. He also announced that the Justice Department will name a chief prosecutor for pandemic fraud. \\n\\nSource: 20, 31, 33'}\n"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Custom Prompts")),(0,r.kt)("p",null,"You can also use your own prompts with this chain. In this example, we will respond in Italian."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'refine_template = (\n    "The original question is as follows: {question}\\n"\n    "We have provided an existing answer, including sources: {existing_answer}\\n"\n    "We have the opportunity to refine the existing answer"\n    "(only if needed) with some more context below.\\n"\n    "------------\\n"\n    "{context_str}\\n"\n    "------------\\n"\n    "Given the new context, refine the original answer to better "\n    "answer the question (in Italian)"\n    "If you do update it, please update the sources as well. "\n    "If the context isn\'t useful, return the original answer."\n)\nrefine_prompt = PromptTemplate(\n    input_variables=["question", "existing_answer", "context_str"],\n    template=refine_template,\n)\n\n\nquestion_template = (\n    "Context information is below. \\n"\n    "---------------------\\n"\n    "{context_str}"\n    "\\n---------------------\\n"\n    "Given the context information and not prior knowledge, "\n    "answer the question in Italian: {question}\\n"\n)\nquestion_prompt = PromptTemplate(\n    input_variables=["context_str", "question"], template=question_template\n)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain = load_qa_with_sources_chain(OpenAI(temperature=0), chain_type="refine", return_intermediate_steps=True, question_prompt=question_prompt, refine_prompt=refine_prompt)\nchain({"input_documents": docs, "question": query}, return_only_outputs=True)\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'intermediate_steps': ['\\nIl presidente ha detto che Justice Breyer ha dedicato la sua vita al servizio di questo paese e ha onorato la sua carriera.',\n      \"\\n\\nIl presidente ha detto che Justice Breyer ha dedicato la sua vita al servizio di questo paese, ha onorato la sua carriera e ha contribuito a costruire un consenso. Ha ricevuto un ampio sostegno, dall'Ordine Fraterno della Polizia a ex giudici nominati da democratici e repubblicani. Inoltre, ha sottolineato l'importanza di avanzare la libert\xe0 e la giustizia attraverso la sicurezza delle frontiere e la risoluzione del sistema di immigrazione. Ha anche menzionato le nuove tecnologie come scanner all'avanguardia per rilevare meglio il traffico di droga, le pattuglie congiunte con Messico e Guatemala per catturare pi\xf9 trafficanti di esseri umani, l'istituzione di giudici di immigrazione dedicati per far s\xec che le famiglie che fuggono da per\",\n      \"\\n\\nIl presidente ha detto che Justice Breyer ha dedicato la sua vita al servizio di questo paese, ha onorato la sua carriera e ha contribuito a costruire un consenso. Ha ricevuto un ampio sostegno, dall'Ordine Fraterno della Polizia a ex giudici nominati da democratici e repubblicani. Inoltre, ha sottolineato l'importanza di avanzare la libert\xe0 e la giustizia attraverso la sicurezza delle frontiere e la risoluzione del sistema di immigrazione. Ha anche menzionato le nuove tecnologie come scanner all'avanguardia per rilevare meglio il traffico di droga, le pattuglie congiunte con Messico e Guatemala per catturare pi\xf9 trafficanti di esseri umani, l'istituzione di giudici di immigrazione dedicati per far s\xec che le famiglie che fuggono da per\",\n      \"\\n\\nIl presidente ha detto che Justice Breyer ha dedicato la sua vita al servizio di questo paese, ha onorato la sua carriera e ha contribuito a costruire un consenso. Ha ricevuto un ampio sostegno, dall'Ordine Fraterno della Polizia a ex giudici nominati da democratici e repubblicani. Inoltre, ha sottolineato l'importanza di avanzare la libert\xe0 e la giustizia attraverso la sicurezza delle frontiere e la risoluzione del sistema di immigrazione. Ha anche menzionato le nuove tecnologie come scanner all'avanguardia per rilevare meglio il traffico di droga, le pattuglie congiunte con Messico e Guatemala per catturare pi\xf9 trafficanti di esseri umani, l'istituzione di giudici di immigrazione dedicati per far s\xec che le famiglie che fuggono da per\"],\n     'output_text': \"\\n\\nIl presidente ha detto che Justice Breyer ha dedicato la sua vita al servizio di questo paese, ha onorato la sua carriera e ha contribuito a costruire un consenso. Ha ricevuto un ampio sostegno, dall'Ordine Fraterno della Polizia a ex giudici nominati da democratici e repubblicani. Inoltre, ha sottolineato l'importanza di avanzare la libert\xe0 e la giustizia attraverso la sicurezza delle frontiere e la risoluzione del sistema di immigrazione. Ha anche menzionato le nuove tecnologie come scanner all'avanguardia per rilevare meglio il traffico di droga, le pattuglie congiunte con Messico e Guatemala per catturare pi\xf9 trafficanti di esseri umani, l'istituzione di giudici di immigrazione dedicati per far s\xec che le famiglie che fuggono da per\"}\n"))),(0,r.kt)("h2",{id:"the-map-rerank-chain"},"The ",(0,r.kt)("inlineCode",{parentName:"h2"},"map-rerank")," Chain"),(0,r.kt)("p",null,"This sections shows results of using the ",(0,r.kt)("inlineCode",{parentName:"p"},"map-rerank")," Chain to do question answering with sources."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"chain = load_qa_with_sources_chain(OpenAI(temperature=0), chain_type=\"map_rerank\", metadata_keys=['source'], return_intermediate_steps=True)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'query = "What did the president say about Justice Breyer"\nresult = chain({"input_documents": docs, "question": query}, return_only_outputs=True)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'result["output_text"]\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    ' The President thanked Justice Breyer for his service and honored him for dedicating his life to serve the country.'\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'result["intermediate_steps"]\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    [{'answer': ' The President thanked Justice Breyer for his service and honored him for dedicating his life to serve the country.',\n      'score': '100'},\n     {'answer': ' This document does not answer the question', 'score': '0'},\n     {'answer': ' This document does not answer the question', 'score': '0'},\n     {'answer': ' This document does not answer the question', 'score': '0'}]\n"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Custom Prompts")),(0,r.kt)("p",null,"You can also use your own prompts with this chain. In this example, we will respond in Italian."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.output_parsers import RegexParser\n\noutput_parser = RegexParser(\n    regex=r"(.*?)\\nScore: (.*)",\n    output_keys=["answer", "score"],\n)\n\nprompt_template = """Use the following pieces of context to answer the question at the end. If you don\'t know the answer, just say that you don\'t know, don\'t try to make up an answer.\n\nIn addition to giving an answer, also return a score of how fully it answered the user\'s question. This should be in the following format:\n\nQuestion: [question here]\nHelpful Answer In Italian: [answer here]\nScore: [score between 0 and 100]\n\nBegin!\n\nContext:\n---------\n{context}\n---------\nQuestion: {question}\nHelpful Answer In Italian:"""\nPROMPT = PromptTemplate(\n    template=prompt_template,\n    input_variables=["context", "question"],\n    output_parser=output_parser,\n)\nchain = load_qa_with_sources_chain(OpenAI(temperature=0), chain_type="map_rerank", metadata_keys=[\'source\'], return_intermediate_steps=True, prompt=PROMPT)\nquery = "What did the president say about Justice Breyer"\nresult = chain({"input_documents": docs, "question": query}, return_only_outputs=True)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"result\n")),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'source': 30,\n     'intermediate_steps': [{'answer': ' Il presidente ha detto che Justice Breyer ha dedicato la sua vita a servire questo paese e ha onorato la sua carriera.',\n       'score': '100'},\n      {'answer': ' Il presidente non ha detto nulla sulla Giustizia Breyer.',\n       'score': '100'},\n      {'answer': ' Non so.', 'score': '0'},\n      {'answer': ' Il presidente non ha detto nulla sulla giustizia Breyer.',\n       'score': '100'}],\n     'output_text': ' Il presidente ha detto che Justice Breyer ha dedicato la sua vita a servire questo paese e ha onorato la sua carriera.'}\n"))))}l.isMDXComponent=!0;const c={},p="Document QA with sources",d={unversionedId:"modules/chains/popular/qa_with_sources",id:"modules/chains/popular/qa_with_sources",title:"Document QA with sources",description:"This notebook walks through how to use LangChain for question answering with sources over a list of documents.",source:"@site/docs/modules/chains/popular/qa_with_sources.mdx",sourceDirName:"modules/chains/popular",slug:"/modules/chains/popular/qa_with_sources",permalink:"/langchain-docs-scratch/docs/modules/chains/popular/qa_with_sources",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/chains/popular/qa_with_sources.mdx",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Hypothetical Document Embeddings",permalink:"/langchain-docs-scratch/docs/modules/chains/popular/hyde"},next:{title:"Document QA",permalink:"/langchain-docs-scratch/docs/modules/chains/popular/question_answering"}},h={},m=[{value:"Overview",id:"overview",level:2}],g={toc:m},f="wrapper";function y(e){let{components:t,...n}=e;return(0,r.kt)(f,(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"document-qa-with-sources"},"Document QA with sources"),(0,r.kt)("p",null,"This notebook walks through how to use LangChain for question answering with sources over a list of documents."),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"LangChain provides an assortment of chains specifically tailored for dealing with unstructured text data: StuffDocumentsChain, MapReduceDocumentsChain, RefineDocumentsChain, and MapRerankDocumentsChain. These chains form the basic building blocks for developing more complex chains that interact with such data. They are designed to take both documents and a question as input, then utilize the language model to formulate a response based on the provided documents."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"StuffDocumentsChain"),": This chain is the most straightforward among the three. It simply injects all input documents into the prompt as context and returns the answer to the question. It is suitable for QA tasks over a small number of documents."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MapReduceDocumentsChain"),": This chain incorporates a preprocessing step to select relevant sections from each document until the total number of tokens is less than the maximum number of tokens allowed by the model. It then uses the transformed documents as context to answer the question. It is suitable for QA tasks over larger documents and can run the preprocessing step in parallel, reducing the running time."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RefineDocumentsChain"),": This chain iterates over the input documents one by one, updating an intermediate answer with each iteration. It uses the previous version of the answer and the next document as context. It is suitable for QA tasks over a large number of documents."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MapRerankDocumentsChain"),": This chain runs an initial prompt on each chunk of data, that not only tries to complete a task but also gives a score for how certain it is in its answer. The responses are then ranked according to this score, and the highest score is returned.")),(0,r.kt)(l,{mdxType:"Example"}))}y.isMDXComponent=!0}}]);
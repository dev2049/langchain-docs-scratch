"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[58091],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>g});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=r.createContext({}),c=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(d.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=c(t),u=a,g=m["".concat(d,".").concat(u)]||m[u]||p[u]||o;return t?r.createElement(g,s(s({ref:n},l),{},{components:t})):r.createElement(g,s({ref:n},l))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=u;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=e,i[m]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},85442:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=t(87462),a=(t(67294),t(3905));const o={},s="Sentence Transformers Embeddings",i={unversionedId:"modules/data_io/text_embedding/integrations/sentence_transformers",id:"modules/data_io/text_embedding/integrations/sentence_transformers",title:"Sentence Transformers Embeddings",description:"SentenceTransformers embeddings are called using the HuggingFaceEmbeddings integration. We have also added an alias for SentenceTransformerEmbeddings for users who are more familiar with directly using that package.",source:"@site/docs/modules/data_io/text_embedding/integrations/sentence_transformers.md",sourceDirName:"modules/data_io/text_embedding/integrations",slug:"/modules/data_io/text_embedding/integrations/sentence_transformers",permalink:"/langchain-docs-scratch/docs/modules/data_io/text_embedding/integrations/sentence_transformers",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/data_io/text_embedding/integrations/sentence_transformers.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Self Hosted Embeddings",permalink:"/langchain-docs-scratch/docs/modules/data_io/text_embedding/integrations/self-hosted"},next:{title:"TensorflowHub",permalink:"/langchain-docs-scratch/docs/modules/data_io/text_embedding/integrations/tensorflowhub"}},d={},c=[],l=(m="CodeOutputBlock",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var m;const p={toc:c},u="wrapper";function g(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sentence-transformers-embeddings"},"Sentence Transformers Embeddings"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.sbert.net/"},"SentenceTransformers")," embeddings are called using the ",(0,a.kt)("inlineCode",{parentName:"p"},"HuggingFaceEmbeddings")," integration. We have also added an alias for ",(0,a.kt)("inlineCode",{parentName:"p"},"SentenceTransformerEmbeddings")," for users who are more familiar with directly using that package."),(0,a.kt)("p",null,"SentenceTransformers is a python package that can generate text and image embeddings, originating from ",(0,a.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/1908.10084"},"Sentence-BERT")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip install sentence_transformers > /dev/null\n")),(0,a.kt)(l,{lang:"bash",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    \n    [notice] A new release of pip is available: 23.0.1 -> 23.1.1\n    [notice] To update, run: pip install --upgrade pip\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.embeddings import HuggingFaceEmbeddings, SentenceTransformerEmbeddings\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'embeddings = HuggingFaceEmbeddings(model_name="all-MiniLM-L6-v2")\n# Equivalent to SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'text = "This is a test document."\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"query_result = embeddings.embed_query(text)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'doc_result = embeddings.embed_documents([text, "This is not a test document."])\n')))}g.isMDXComponent=!0}}]);
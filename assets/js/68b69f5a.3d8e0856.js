"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[80679],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),l=c(n),u=a,g=l["".concat(s,".").concat(u)]||l[u]||p[u]||o;return n?r.createElement(g,i(i({ref:t},m),{},{components:n})):r.createElement(g,i({ref:t},m))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d[l]="string"==typeof e?e:a,i[1]=d;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},34063:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={},i="MiniMax",d={unversionedId:"modules/data_io/text_embedding/integrations/minimax",id:"modules/data_io/text_embedding/integrations/minimax",title:"MiniMax",description:"MiniMax offers an embeddings service.",source:"@site/docs/modules/data_io/text_embedding/integrations/minimax.md",sourceDirName:"modules/data_io/text_embedding/integrations",slug:"/modules/data_io/text_embedding/integrations/minimax",permalink:"/langchain-docs-scratch/docs/modules/data_io/text_embedding/integrations/minimax",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/data_io/text_embedding/integrations/minimax.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Llama-cpp",permalink:"/langchain-docs-scratch/docs/modules/data_io/text_embedding/integrations/llamacpp"},next:{title:"ModelScope",permalink:"/langchain-docs-scratch/docs/modules/data_io/text_embedding/integrations/modelscope_hub"}},s={},c=[],m=(l="CodeOutputBlock",function(e){return console.warn("Component "+l+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var l;const p={toc:c},u="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"minimax"},"MiniMax"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://api.minimax.chat/document/guides/embeddings?id=6464722084cdc277dfaa966a"},"MiniMax")," offers an embeddings service."),(0,a.kt)("p",null,"This example goes over how to use LangChain to interact with MiniMax Inference for text embedding."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import os\n\nos.environ["MINIMAX_GROUP_ID"] = "MINIMAX_GROUP_ID"\nos.environ["MINIMAX_API_KEY"] = "MINIMAX_API_KEY"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.embeddings import MiniMaxEmbeddings\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"embeddings = MiniMaxEmbeddings()\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'query_text = "This is a test query."\nquery_result = embeddings.embed_query(query_text)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'document_text = "This is a test document."\ndocument_result = embeddings.embed_documents([document_text])\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import numpy as np\n\nquery_numpy = np.array(query_result)\ndocument_numpy = np.array(document_result[0])\nsimilarity = np.dot(query_numpy, document_numpy) / (np.linalg.norm(query_numpy)*np.linalg.norm(document_numpy))\nprint(f"Cosine similarity between document and query: {similarity}")\n')),(0,a.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    Cosine similarity between document and query: 0.1573236279277012\n"))))}g.isMDXComponent=!0}}]);
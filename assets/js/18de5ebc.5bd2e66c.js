"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[74972],{3905:(e,t,a)=>{a.d(t,{Zo:()=>i,kt:()=>g});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function p(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?p(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):p(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function m(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},p=Object.keys(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},i=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,p=e.originalType,l=e.parentName,i=m(e,["components","mdxType","originalType","parentName"]),u=s(a),d=o,g=u["".concat(l,".").concat(d)]||u[d]||c[d]||p;return a?n.createElement(g,r(r({ref:t},i),{},{components:a})):n.createElement(g,r({ref:t},i))}));function g(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var p=a.length,r=new Array(p);r[0]=d;var m={};for(var l in t)hasOwnProperty.call(t,l)&&(m[l]=t[l]);m.originalType=e,m[u]="string"==typeof e?e:o,r[1]=m;for(var s=2;s<p;s++)r[s]=a[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},96692:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>u,default:()=>f,frontMatter:()=>i,metadata:()=>c,toc:()=>g});var n=a(87462),o=(a(67294),a(3905));const p=(r="CodeOutputBlock",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var r;const m={toc:[{value:"Create a prompt template",id:"create-a-prompt-template",level:2},{value:"Template formats",id:"template-formats",level:2},{value:"Validate template",id:"validate-template",level:2},{value:"Chat prompt template",id:"chat-prompt-template",level:2},{value:"Format output",id:"format-output",level:2},{value:"Different types of <code>MessagePromptTemplate</code>",id:"different-types-of-messageprompttemplate",level:2}]},l="wrapper";function s(e){let{components:t,...a}=e;return(0,o.kt)(l,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from langchain import PromptTemplate\n\n\ntemplate = """\nI want you to act as a naming consultant for new companies.\nWhat is a good name for a company that makes {product}?\n"""\n\nprompt = PromptTemplate(\n    input_variables=["product"],\n    template=template,\n)\nprompt.format(product="colorful socks")\n# -> I want you to act as a naming consultant for new companies.\n# -> What is a good name for a company that makes colorful socks?\n')),(0,o.kt)("h2",{id:"create-a-prompt-template"},"Create a prompt template"),(0,o.kt)("p",null,"You can create simple hardcoded prompts using the ",(0,o.kt)("inlineCode",{parentName:"p"},"PromptTemplate")," class. Prompt templates can take any number of input variables, and can be formatted to generate a prompt."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from langchain import PromptTemplate\n\n# An example prompt with no input variables\nno_input_prompt = PromptTemplate(input_variables=[], template="Tell me a joke.")\nno_input_prompt.format()\n# -> "Tell me a joke."\n\n# An example prompt with one input variable\none_input_prompt = PromptTemplate(input_variables=["adjective"], template="Tell me a {adjective} joke.")\none_input_prompt.format(adjective="funny")\n# -> "Tell me a funny joke."\n\n# An example prompt with multiple input variables\nmultiple_input_prompt = PromptTemplate(\n    input_variables=["adjective", "content"], \n    template="Tell me a {adjective} joke about {content}."\n)\nmultiple_input_prompt.format(adjective="funny", content="chickens")\n# -> "Tell me a funny joke about chickens."\n')),(0,o.kt)("p",null,"If you do not wish to specify ",(0,o.kt)("inlineCode",{parentName:"p"},"input_variables")," manually, you can also create a ",(0,o.kt)("inlineCode",{parentName:"p"},"PromptTemplate")," using ",(0,o.kt)("inlineCode",{parentName:"p"},"from_template")," class method. ",(0,o.kt)("inlineCode",{parentName:"p"},"langchain")," will automatically infer the ",(0,o.kt)("inlineCode",{parentName:"p"},"input_variables")," based on the ",(0,o.kt)("inlineCode",{parentName:"p"},"template")," passed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'template = "Tell me a {adjective} joke about {content}."\n\nprompt_template = PromptTemplate.from_template(template)\nprompt_template.input_variables\n# -> [\'adjective\', \'content\']\nprompt_template.format(adjective="funny", content="chickens")\n# -> Tell me a funny joke about chickens.\n')),(0,o.kt)("p",null,"You can create custom prompt templates that format the prompt in any way you want. For more information, see ",(0,o.kt)("a",{parentName:"p",href:"examples/custom_prompt_template.ipynb"},"Custom Prompt Templates"),"."),(0,o.kt)("h2",{id:"template-formats"},"Template formats"),(0,o.kt)("p",null,"By default, ",(0,o.kt)("inlineCode",{parentName:"p"},"PromptTemplate")," will treat the provided template as a Python f-string. You can specify other template format through ",(0,o.kt)("inlineCode",{parentName:"p"},"template_format")," argument:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Make sure jinja2 is installed before running this\n\njinja2_template = "Tell me a {{ adjective }} joke about {{ content }}"\nprompt_template = PromptTemplate.from_template(template=jinja2_template, template_format="jinja2")\n\nprompt_template.format(adjective="funny", content="chickens")\n# -> Tell me a funny joke about chickens.\n')),(0,o.kt)("p",null,"Currently, ",(0,o.kt)("inlineCode",{parentName:"p"},"PromptTemplate")," only supports ",(0,o.kt)("inlineCode",{parentName:"p"},"jinja2")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"f-string")," templating format. If there is any other templating format that you would like to use, feel free to open an issue in the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/hwchase17/langchain/issues"},"Github")," page."),(0,o.kt)("h2",{id:"validate-template"},"Validate template"),(0,o.kt)("p",null,"By default, ",(0,o.kt)("inlineCode",{parentName:"p"},"PromptTemplate")," will validate the ",(0,o.kt)("inlineCode",{parentName:"p"},"template")," string by checking whether the ",(0,o.kt)("inlineCode",{parentName:"p"},"input_variables")," match the variables defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"template"),". You can disable this behavior by setting ",(0,o.kt)("inlineCode",{parentName:"p"},"validate_template")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"False")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'template = "I am learning langchain because {reason}."\n\nprompt_template = PromptTemplate(template=template, \n                                 input_variables=["reason", "foo"]) # ValueError due to extra variables\nprompt_template = PromptTemplate(template=template, \n                                 input_variables=["reason", "foo"], \n                                 validate_template=False) # No error\n')),(0,o.kt)("h2",{id:"chat-prompt-template"},"Chat prompt template"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"../models/chat"},"Chat Models")," take a list of ",(0,o.kt)("inlineCode",{parentName:"p"},"chat messages as")," input - this list commonly referred to as a ",(0,o.kt)("inlineCode",{parentName:"p"},"prompt"),".\nThese chat messages differ from raw string (which you would pass into a ",(0,o.kt)("a",{parentName:"p",href:"../models/llms.rst"},"LLM")," model) in that every message is associated with a ",(0,o.kt)("inlineCode",{parentName:"p"},"role"),"."),(0,o.kt)("p",null,"For example, in OpenAI ",(0,o.kt)("a",{parentName:"p",href:"https://platform.openai.com/docs/guides/chat/introduction"},"Chat Completion API"),", a chat message can be associated with the AI, human or system role. The model is supposed to follow instruction from system chat message more closely."),(0,o.kt)("p",null,"LangChain provides several prompt templates to make constructing and working with prompts easily. You are encouraged to use these chat related prompt templates instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"PromptTemplate")," when querying chat models to fully exploit the potential of underlying chat model."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.prompts import (\n    ChatPromptTemplate,\n    PromptTemplate,\n    SystemMessagePromptTemplate,\n    AIMessagePromptTemplate,\n    HumanMessagePromptTemplate,\n)\nfrom langchain.schema import (\n    AIMessage,\n    HumanMessage,\n    SystemMessage\n)\n")),(0,o.kt)("p",null,"To create a message template associated with a role, you use ",(0,o.kt)("inlineCode",{parentName:"p"},"MessagePromptTemplate"),"."),(0,o.kt)("p",null,"For convenience, there is a ",(0,o.kt)("inlineCode",{parentName:"p"},"from_template")," method exposed on the template. If you were to use this template, this is what it would look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'template="You are a helpful assistant that translates {input_language} to {output_language}."\nsystem_message_prompt = SystemMessagePromptTemplate.from_template(template)\nhuman_template="{text}"\nhuman_message_prompt = HumanMessagePromptTemplate.from_template(human_template)\n')),(0,o.kt)("p",null,"If you wanted to construct the ",(0,o.kt)("inlineCode",{parentName:"p"},"MessagePromptTemplate")," more directly, you could create a PromptTemplate outside and then pass it in, eg:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'prompt=PromptTemplate(\n    template="You are a helpful assistant that translates {input_language} to {output_language}.",\n    input_variables=["input_language", "output_language"],\n)\nsystem_message_prompt_2 = SystemMessagePromptTemplate(prompt=prompt)\n\nassert system_message_prompt == system_message_prompt_2\n')),(0,o.kt)("p",null,"After that, you can build a ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatPromptTemplate")," from one or more ",(0,o.kt)("inlineCode",{parentName:"p"},"MessagePromptTemplates"),". You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatPromptTemplate"),"'s ",(0,o.kt)("inlineCode",{parentName:"p"},"format_prompt")," -- this returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"PromptValue"),", which you can convert to a string or Message object, depending on whether you want to use the formatted value as input to an llm or chat model."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chat_prompt = ChatPromptTemplate.from_messages([system_message_prompt, human_message_prompt])\n\n# get a chat completion from the formatted messages\nchat_prompt.format_prompt(input_language="English", output_language="French", text="I love programming.").to_messages()\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [SystemMessage(content='You are a helpful assistant that translates English to French.', additional_kwargs={}),\n     HumanMessage(content='I love programming.', additional_kwargs={})]\n"))),(0,o.kt)("h2",{id:"format-output"},"Format output"),(0,o.kt)("p",null,"The output of the format method is available as string, list of messages and ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatPromptValue")),(0,o.kt)("p",null,"As string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'output = chat_prompt.format(input_language="English", output_language="French", text="I love programming.")\noutput\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    'System: You are a helpful assistant that translates English to French.\\nHuman: I love programming.'\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# or alternatively \noutput_2 = chat_prompt.format_prompt(input_language="English", output_language="French", text="I love programming.").to_string()\n\nassert output == output_2\n')),(0,o.kt)("p",null,"As ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatPromptValue")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chat_prompt.format_prompt(input_language="English", output_language="French", text="I love programming.")\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    ChatPromptValue(messages=[SystemMessage(content='You are a helpful assistant that translates English to French.', additional_kwargs={}), HumanMessage(content='I love programming.', additional_kwargs={})])\n"))),(0,o.kt)("p",null,"As list of Message objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chat_prompt.format_prompt(input_language="English", output_language="French", text="I love programming.").to_messages()\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [SystemMessage(content='You are a helpful assistant that translates English to French.', additional_kwargs={}),\n     HumanMessage(content='I love programming.', additional_kwargs={})]\n"))),(0,o.kt)("h2",{id:"different-types-of-messageprompttemplate"},"Different types of ",(0,o.kt)("inlineCode",{parentName:"h2"},"MessagePromptTemplate")),(0,o.kt)("p",null,"LangChain provides different types of ",(0,o.kt)("inlineCode",{parentName:"p"},"MessagePromptTemplate"),". The most commonly used are ",(0,o.kt)("inlineCode",{parentName:"p"},"AIMessagePromptTemplate"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"SystemMessagePromptTemplate")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"HumanMessagePromptTemplate"),", which create an AI message, system message and human message respectively."),(0,o.kt)("p",null,"However, in cases where the chat model supports taking chat message with arbitrary role, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatMessagePromptTemplate"),", which allows user to specify the role name."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.prompts import ChatMessagePromptTemplate\n\nprompt = "May the {subject} be with you"\n\nchat_message_prompt = ChatMessagePromptTemplate.from_template(role="Jedi", template=prompt)\nchat_message_prompt.format(subject="force")\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    ChatMessage(content='May the force be with you', additional_kwargs={}, role='Jedi')\n"))),(0,o.kt)("p",null,"LangChain also provides ",(0,o.kt)("inlineCode",{parentName:"p"},"MessagesPlaceholder"),", which gives you full control of what messages to be rendered during formatting. This can be useful when you are uncertain of what role you should be using for your message prompt templates or when you wish to insert a list of messages during formatting."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.prompts import MessagesPlaceholder\n\nhuman_prompt = "Summarize our conversation so far in {word_count} words."\nhuman_message_template = HumanMessagePromptTemplate.from_template(human_prompt)\n\nchat_prompt = ChatPromptTemplate.from_messages([MessagesPlaceholder(variable_name="conversation"), human_message_template])\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'human_message = HumanMessage(content="What is the best way to learn programming?")\nai_message = AIMessage(content="""\\\n1. Choose a programming language: Decide on a programming language that you want to learn. \n\n2. Start with the basics: Familiarize yourself with the basic programming concepts such as variables, data types and control structures.\n\n3. Practice, practice, practice: The best way to learn programming is through hands-on experience\\\n""")\n\nchat_prompt.format_prompt(conversation=[human_message, ai_message], word_count="10").to_messages()\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [HumanMessage(content='What is the best way to learn programming?', additional_kwargs={}),\n     AIMessage(content='1. Choose a programming language: Decide on a programming language that you want to learn. \\n\\n2. Start with the basics: Familiarize yourself with the basic programming concepts such as variables, data types and control structures.\\n\\n3. Practice, practice, practice: The best way to learn programming is through hands-on experience', additional_kwargs={}),\n     HumanMessage(content='Summarize our conversation so far in 10 words.', additional_kwargs={})]\n"))))}s.isMDXComponent=!0;const i={sidebar_position:0},u="Prompt templates",c={unversionedId:"modules/model_io/prompts/prompt_templates/index",id:"modules/model_io/prompts/prompt_templates/index",title:"Prompt templates",description:"Language models take text as input - that text is commonly referred to as a prompt.",source:"@site/docs/modules/model_io/prompts/prompt_templates/index.mdx",sourceDirName:"modules/model_io/prompts/prompt_templates",slug:"/modules/model_io/prompts/prompt_templates/",permalink:"/langchain-docs-scratch/docs/modules/model_io/prompts/prompt_templates/",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/model_io/prompts/prompt_templates/index.mdx",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"sidebar",previous:{title:"Prompts",permalink:"/langchain-docs-scratch/docs/modules/model_io/prompts/"},next:{title:"Connecting to a Feature Store",permalink:"/langchain-docs-scratch/docs/modules/model_io/prompts/prompt_templates/connecting_to_a_feature_store"}},d={},g=[{value:"What is a prompt template?",id:"what-is-a-prompt-template",level:2}],h={toc:g},k="wrapper";function f(e){let{components:t,...a}=e;return(0,o.kt)(k,(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"prompt-templates"},"Prompt templates"),(0,o.kt)("p",null,"Language models take text as input - that text is commonly referred to as a prompt.\nTypically this is not simply a hardcoded string but rather a combination of a template, some examples, and user input.\nLangChain provides several classes and functions to make constructing and working with prompts easy."),(0,o.kt)("p",null,"For advanced usage, check out the ",(0,o.kt)("strong",{parentName:"p"},"How-to")," section."),(0,o.kt)("h2",{id:"what-is-a-prompt-template"},"What is a prompt template?"),(0,o.kt)("p",null,'A prompt template refers to a reproducible way to generate a prompt. It contains a text string ("the template"), that can take in a set of parameters from the end user and generate a prompt.'),(0,o.kt)("p",null,"The prompt template may contain:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"instructions to the language model,"),(0,o.kt)("li",{parentName:"ul"},"a set of few shot examples to help the language model generate a better response,"),(0,o.kt)("li",{parentName:"ul"},"a question to the language model.")),(0,o.kt)("p",null,"Here's an example:"),(0,o.kt)(s,{mdxType:"GetStarted"}))}f.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[24057],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>g});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(a),d=r,g=c["".concat(s,".").concat(d)]||c[d]||m[d]||o;return a?n.createElement(g,l(l({ref:t},p),{},{components:a})):n.createElement(g,l({ref:t},p))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},99623:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var n=a(87462),r=(a(67294),a(3905));const o={},l="PowerBI Dataset Agent",i={unversionedId:"modules/agents/toolkits/powerbi",id:"modules/agents/toolkits/powerbi",title:"PowerBI Dataset Agent",description:"This notebook showcases an agent designed to interact with a Power BI Dataset. The agent is designed to answer more general questions about a dataset, as well as recover from errors.",source:"@site/docs/modules/agents/toolkits/powerbi.md",sourceDirName:"modules/agents/toolkits",slug:"/modules/agents/toolkits/powerbi",permalink:"/langchain-docs-scratch/docs/modules/agents/toolkits/powerbi",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/agents/toolkits/powerbi.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"PlayWright Browser Toolkit",permalink:"/langchain-docs-scratch/docs/modules/agents/toolkits/playwright"},next:{title:"Python Agent",permalink:"/langchain-docs-scratch/docs/modules/agents/toolkits/python"}},s={},u=[{value:"Some notes",id:"some-notes",level:3},{value:"Initialization",id:"initialization",level:2},{value:"Example: describing a table",id:"example-describing-a-table",level:2},{value:"Example: simple query on a table",id:"example-simple-query-on-a-table",level:2},{value:"Example: running queries",id:"example-running-queries",level:2},{value:"Example: add your own few-shot prompts",id:"example-add-your-own-few-shot-prompts",level:2}],p={toc:u},c="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"powerbi-dataset-agent"},"PowerBI Dataset Agent"),(0,r.kt)("p",null,"This notebook showcases an agent designed to interact with a Power BI Dataset. The agent is designed to answer more general questions about a dataset, as well as recover from errors."),(0,r.kt)("p",null,"Note that, as this agent is in active development, all answers might not be correct. It runs against the ",(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/rest/api/power-bi/datasets/execute-queries"},"executequery endpoint"),", which does not allow deletes."),(0,r.kt)("h3",{id:"some-notes"},"Some notes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It relies on authentication with the azure.identity package, which can be installed with ",(0,r.kt)("inlineCode",{parentName:"li"},"pip install azure-identity"),". Alternatively you can create the powerbi dataset with a token as a string without supplying the credentials."),(0,r.kt)("li",{parentName:"ul"},"You can also supply a username to impersonate for use with datasets that have RLS enabled. "),(0,r.kt)("li",{parentName:"ul"},"The toolkit uses a LLM to create the query from the question, the agent uses the LLM for the overall execution."),(0,r.kt)("li",{parentName:"ul"},"Testing was done mostly with a ",(0,r.kt)("inlineCode",{parentName:"li"},"text-davinci-003")," model, codex models did not seem to perform ver well.")),(0,r.kt)("h2",{id:"initialization"},"Initialization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.agents.agent_toolkits import create_pbi_agent\nfrom langchain.agents.agent_toolkits import PowerBIToolkit\nfrom langchain.utilities.powerbi import PowerBIDataset\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.agents import AgentExecutor\nfrom azure.identity import DefaultAzureCredential\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'fast_llm = ChatOpenAI(temperature=0.5, max_tokens=1000, model_name="gpt-3.5-turbo", verbose=True)\nsmart_llm = ChatOpenAI(temperature=0, max_tokens=100, model_name="gpt-4", verbose=True)\n\ntoolkit = PowerBIToolkit(\n    powerbi=PowerBIDataset(dataset_id="<dataset_id>", table_names=[\'table1\', \'table2\'], credential=DefaultAzureCredential()), \n    llm=smart_llm\n)\n\nagent_executor = create_pbi_agent(\n    llm=fast_llm,\n    toolkit=toolkit,\n    verbose=True,\n)\n')),(0,r.kt)("h2",{id:"example-describing-a-table"},"Example: describing a table"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent_executor.run("Describe table1")\n')),(0,r.kt)("h2",{id:"example-simple-query-on-a-table"},"Example: simple query on a table"),(0,r.kt)("p",null,"In this example, the agent actually figures out the correct query to get a row count of the table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent_executor.run("How many records are in table1?")\n')),(0,r.kt)("h2",{id:"example-running-queries"},"Example: running queries"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent_executor.run("How many records are there by dimension1 in table2?")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent_executor.run("What unique values are there for dimensions2 in table2")\n')),(0,r.kt)("h2",{id:"example-add-your-own-few-shot-prompts"},"Example: add your own few-shot prompts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'#fictional example\nfew_shots = """\nQuestion: How many rows are in the table revenue?\nDAX: EVALUATE ROW("Number of rows", COUNTROWS(revenue_details))\n----\nQuestion: How many rows are in the table revenue where year is not empty?\nDAX: EVALUATE ROW("Number of rows", COUNTROWS(FILTER(revenue_details, revenue_details[year] <> "")))\n----\nQuestion: What was the average of value in revenue in dollars?\nDAX: EVALUATE ROW("Average", AVERAGE(revenue_details[dollar_value]))\n----\n"""\ntoolkit = PowerBIToolkit(\n    powerbi=PowerBIDataset(dataset_id="<dataset_id>", table_names=[\'table1\', \'table2\'], credential=DefaultAzureCredential()), \n    llm=smart_llm,\n    examples=few_shots,\n)\nagent_executor = create_pbi_agent(\n    llm=fast_llm,\n    toolkit=toolkit,\n    verbose=True,\n)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent_executor.run("What was the maximum of value in revenue in dollars in 2022?")\n')))}m.isMDXComponent=!0}}]);
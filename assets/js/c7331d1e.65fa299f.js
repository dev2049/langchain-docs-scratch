"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[79580],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),d=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(i.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=o,h=u["".concat(i,".").concat(m)]||u[m]||p[m]||r;return n?a.createElement(h,c(c({ref:t},s),{},{components:n})):a.createElement(h,c({ref:t},s))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,c=new Array(r);c[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[u]="string"==typeof e?e:o,c[1]=l;for(var d=2;d<r;d++)c[d]=n[d];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2748:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=n(87462),o=(n(67294),n(3905));const r={},c="Blockchain",l={unversionedId:"modules/data_io/document_loaders/integrations/blockchain",id:"modules/data_io/document_loaders/integrations/blockchain",title:"Blockchain",description:"Overview",source:"@site/docs/modules/data_io/document_loaders/integrations/blockchain.md",sourceDirName:"modules/data_io/document_loaders/integrations",slug:"/modules/data_io/document_loaders/integrations/blockchain",permalink:"/langchain-docs-scratch/docs/modules/data_io/document_loaders/integrations/blockchain",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/data_io/document_loaders/integrations/blockchain.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Blackboard",permalink:"/langchain-docs-scratch/docs/modules/data_io/document_loaders/integrations/blackboard"},next:{title:"chatgpt_loader",permalink:"/langchain-docs-scratch/docs/modules/data_io/document_loaders/integrations/chatgpt_loader"}},i={},d=[{value:"Overview",id:"overview",level:2},{value:"Load NFTs into Document Loader",id:"load-nfts-into-document-loader",level:2},{value:"Option 1: Ethereum Mainnet (default BlockchainType)",id:"option-1-ethereum-mainnet-default-blockchaintype",level:3},{value:"Option 2: Polygon Mainnet",id:"option-2-polygon-mainnet",level:3}],s={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"blockchain"},"Blockchain"),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"The intention of this notebook is to provide a means of testing functionality in the Langchain Document Loader for Blockchain."),(0,o.kt)("p",null,"Initially this Loader supports:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Loading NFTs as Documents from NFT Smart Contracts (ERC721 and ERC1155)"),(0,o.kt)("li",{parentName:"ul"},"Ethereum Mainnnet, Ethereum Testnet, Polygon Mainnet, Polygon Testnet (default is eth-mainnet)"),(0,o.kt)("li",{parentName:"ul"},"Alchemy's getNFTsForCollection API")),(0,o.kt)("p",null,"It can be extended if the community finds value in this loader.  Specifically:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Additional APIs can be added (e.g. Tranction-related APIs)")),(0,o.kt)("p",null,"This Document Loader Requires:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A free ",(0,o.kt)("a",{parentName:"li",href:"https://www.alchemy.com/"},"Alchemy API Key"))),(0,o.kt)("p",null,"The output takes the following format:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"pageContent= Individual NFT"),(0,o.kt)("li",{parentName:"ul"},"metadata={'source': '0x1a92f7381b9f03921564a437210bb9396471050c', 'blockchain': 'eth-mainnet', 'tokenId': '0x15'})")),(0,o.kt)("h2",{id:"load-nfts-into-document-loader"},"Load NFTs into Document Loader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# get ALCHEMY_API_KEY from https://www.alchemy.com/ \n\nalchemyApiKey = "..."\n')),(0,o.kt)("h3",{id:"option-1-ethereum-mainnet-default-blockchaintype"},"Option 1: Ethereum Mainnet (default BlockchainType)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.document_loaders.blockchain import BlockchainDocumentLoader, BlockchainType\ncontractAddress = "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d" # Bored Ape Yacht Club contract address\n\nblockchainType = BlockchainType.ETH_MAINNET  #default value, optional parameter\n\nblockchainLoader = BlockchainDocumentLoader(contract_address=contractAddress,\n                                            api_key=alchemyApiKey)\n\nnfts = blockchainLoader.load()\n\nnfts[:2]\n')),(0,o.kt)("h3",{id:"option-2-polygon-mainnet"},"Option 2: Polygon Mainnet"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'contractAddress = "0x448676ffCd0aDf2D85C1f0565e8dde6924A9A7D9" # Polygon Mainnet contract address\n\nblockchainType = BlockchainType.POLYGON_MAINNET \n\nblockchainLoader = BlockchainDocumentLoader(contract_address=contractAddress, \n                                            blockchainType=blockchainType, \n                                            api_key=alchemyApiKey)\n\nnfts = blockchainLoader.load()\n\nnfts[:2]\n')))}p.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[97609],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=a.createContext({}),l=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(m.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,m=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=l(n),g=r,u=c["".concat(m,".").concat(g)]||c[g]||d[g]||o;return n?a.createElement(u,i(i({ref:t},p),{},{components:n})):a.createElement(u,i({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var m in t)hasOwnProperty.call(t,m)&&(s[m]=t[m]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},43280:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={},i="Figma",s={unversionedId:"modules/data_io/document_loaders/integrations/figma",id:"modules/data_io/document_loaders/integrations/figma",title:"Figma",description:"Figma is a collaborative web application for interface design.",source:"@site/docs/modules/data_io/document_loaders/integrations/figma.md",sourceDirName:"modules/data_io/document_loaders/integrations",slug:"/modules/data_io/document_loaders/integrations/figma",permalink:"/langchain-docs-scratch/docs/modules/data_io/document_loaders/integrations/figma",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/data_io/document_loaders/integrations/figma.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Facebook Chat",permalink:"/langchain-docs-scratch/docs/modules/data_io/document_loaders/integrations/facebook_chat"},next:{title:"Git",permalink:"/langchain-docs-scratch/docs/modules/data_io/document_loaders/integrations/git"}},m={},l=[],p={toc:l},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"figma"},"Figma"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://www.figma.com/"},"Figma")," is a collaborative web application for interface design.")),(0,r.kt)("p",null,"This notebook covers how to load data from the ",(0,r.kt)("inlineCode",{parentName:"p"},"Figma")," REST API into a format that can be ingested into LangChain, along with example usage for code generation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import os\n\n\nfrom langchain.document_loaders.figma import FigmaFileLoader\n\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.indexes import VectorstoreIndexCreator\nfrom langchain.chains import ConversationChain, LLMChain\nfrom langchain.memory import ConversationBufferWindowMemory\nfrom langchain.prompts.chat import (\n    ChatPromptTemplate,\n    SystemMessagePromptTemplate,\n    AIMessagePromptTemplate,\n    HumanMessagePromptTemplate,\n)\n")),(0,r.kt)("p",null,"The Figma API Requires an access token, node_ids, and a file key."),(0,r.kt)("p",null,"The file key can be pulled from the URL.  ",(0,r.kt)("a",{parentName:"p",href:"https://www.figma.com/file/%7Bfilekey%7D/sampleFilename"},"https://www.figma.com/file/{filekey}/sampleFilename")),(0,r.kt)("p",null,"Node IDs are also available in the URL. Click on anything and look for the '?node-id={node_id}' param."),(0,r.kt)("p",null,"Access token instructions are in the Figma help center article: ",(0,r.kt)("a",{parentName:"p",href:"https://help.figma.com/hc/en-us/articles/8085703771159-Manage-personal-access-tokens"},"https://help.figma.com/hc/en-us/articles/8085703771159-Manage-personal-access-tokens")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"figma_loader = FigmaFileLoader(\n    os.environ.get('ACCESS_TOKEN'),\n    os.environ.get('NODE_IDS'),\n    os.environ.get('FILE_KEY')\n)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# see https://python.langchain.com/en/latest/modules/indexes/getting_started.html for more details\nindex = VectorstoreIndexCreator().from_loaders([figma_loader])\nfigma_doc_retriever = index.vectorstore.as_retriever()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def generate_code(human_input):\n    # I have no idea if the Jon Carmack thing makes for better code. YMMV.\n    # See https://python.langchain.com/en/latest/modules/models/chat/getting_started.html for chat info\n    system_prompt_template = """You are expert coder Jon Carmack. Use the provided design context to create idomatic HTML/CSS code as possible based on the user request.\n    Everything must be inline in one file and your response must be directly renderable by the browser.\n    Figma file nodes and metadata: {context}"""\n\n    human_prompt_template = "Code the {text}. Ensure it\'s mobile responsive"\n    system_message_prompt = SystemMessagePromptTemplate.from_template(system_prompt_template)\n    human_message_prompt = HumanMessagePromptTemplate.from_template(human_prompt_template)\n    # delete the gpt-4 model_name to use the default gpt-3.5 turbo for faster results\n    gpt_4 = ChatOpenAI(temperature=.02, model_name=\'gpt-4\')\n    # Use the retriever\'s \'get_relevant_documents\' method if needed to filter down longer docs\n    relevant_nodes = figma_doc_retriever.get_relevant_documents(human_input)\n    conversation = [system_message_prompt, human_message_prompt]\n    chat_prompt = ChatPromptTemplate.from_messages(conversation)\n    response = gpt_4(chat_prompt.format_prompt( \n        context=relevant_nodes, \n        text=human_input).to_messages())\n    return response\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'response = generate_code("page top header")\n')),(0,r.kt)("p",null,"Returns the following in ",(0,r.kt)("inlineCode",{parentName:"p"},"response.content"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'<!DOCTYPE html>\\n<html lang="en">\\n<head>\\n    <meta charset="UTF-8">\\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\\n    <style>\\n        @import url(\\\'https://fonts.googleapis.com/css2?family=DM+Sans:wght@500;700&family=Inter:wght@600&display=swap\\\');\\n\\n        body {\\n            margin: 0;\\n            font-family: \\\'DM Sans\\\', sans-serif;\\n        }\\n\\n        .header {\\n            display: flex;\\n            justify-content: space-between;\\n            align-items: center;\\n            padding: 20px;\\n            background-color: #fff;\\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n        }\\n\\n        .header h1 {\\n            font-size: 16px;\\n            font-weight: 700;\\n            margin: 0;\\n        }\\n\\n        .header nav {\\n            display: flex;\\n            align-items: center;\\n        }\\n\\n        .header nav a {\\n            font-size: 14px;\\n            font-weight: 500;\\n            text-decoration: none;\\n            color: #000;\\n            margin-left: 20px;\\n        }\\n\\n        @media (max-width: 768px) {\\n            .header nav {\\n                display: none;\\n            }\\n        }\\n    </style>\\n</head>\\n<body>\\n    <header class="header">\\n        <h1>Company Contact</h1>\\n        <nav>\\n            <a href="#">Lorem Ipsum</a>\\n            <a href="#">Lorem Ipsum</a>\\n            <a href="#">Lorem Ipsum</a>\\n        </nav>\\n    </header>\\n</body>\\n</html>\n')))}d.isMDXComponent=!0}}]);
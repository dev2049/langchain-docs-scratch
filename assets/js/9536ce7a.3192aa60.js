"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[22296],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,h=m["".concat(c,".").concat(d)]||m[d]||p[d]||o;return n?r.createElement(h,s(s({ref:t},u),{},{components:n})):r.createElement(h,s({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[m]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},868:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={},s="Zep",i={unversionedId:"modules/data_io/retrievers/integrations/zep_memorystore",id:"modules/data_io/retrievers/integrations/zep_memorystore",title:"Zep",description:"Zep - A long-term memory store for LLM applications.",source:"@site/docs/modules/data_io/retrievers/integrations/zep_memorystore.md",sourceDirName:"modules/data_io/retrievers/integrations",slug:"/modules/data_io/retrievers/integrations/zep_memorystore",permalink:"/langchain-docs-scratch/docs/modules/data_io/retrievers/integrations/zep_memorystore",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/data_io/retrievers/integrations/zep_memorystore.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Wikipedia",permalink:"/langchain-docs-scratch/docs/modules/data_io/retrievers/integrations/wikipedia"},next:{title:"Self-querying with Chroma",permalink:"/langchain-docs-scratch/docs/modules/data_io/retrievers/self_query/chroma_self_query"}},c={},l=[{value:"Retriever Example",id:"retriever-example",level:2},{value:"Initialize the Zep Chat Message History Class and add a chat message history to the memory store",id:"initialize-the-zep-chat-message-history-class-and-add-a-chat-message-history-to-the-memory-store",level:3},{value:"Use the Zep Retriever to vector search over the Zep memory",id:"use-the-zep-retriever-to-vector-search-over-the-zep-memory",level:3}],u=(m="CodeOutputBlock",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var m;const p={toc:l},d="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"zep"},"Zep"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"https://docs.getzep.com/"},"Zep")," - A long-term memory store for LLM applications.")),(0,a.kt)("p",null,"More on ",(0,a.kt)("inlineCode",{parentName:"p"},"Zep"),":"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Zep")," stores, summarizes, embeds, indexes, and enriches conversational AI chat histories, and exposes them via simple, low-latency APIs."),(0,a.kt)("p",null,"Key Features:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Long-term memory persistence, with access to historical messages irrespective of your summarization strategy."),(0,a.kt)("li",{parentName:"ul"},"Auto-summarization of memory messages based on a configurable message window. A series of summaries are stored, providing flexibility for future summarization strategies."),(0,a.kt)("li",{parentName:"ul"},"Vector search over memories, with messages automatically embedded on creation."),(0,a.kt)("li",{parentName:"ul"},"Auto-token counting of memories and summaries, allowing finer-grained control over prompt assembly."),(0,a.kt)("li",{parentName:"ul"},"Python and JavaScript SDKs.")),(0,a.kt)("p",null,"Zep's Go Extractor model is easily extensible, with a simple, clean interface available to build new enrichment functionality, such as summarizers, entity extractors, embedders, and more."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Zep")," project: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/getzep/zep"},"https://github.com/getzep/zep")),(0,a.kt)("h2",{id:"retriever-example"},"Retriever Example"),(0,a.kt)("p",null,"This notebook demonstrates how to search historical chat message histories using the ",(0,a.kt)("a",{parentName:"p",href:"https://getzep.github.io/"},"Zep Long-term Memory Store"),"."),(0,a.kt)("p",null,"We'll demonstrate:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Adding conversation history to the Zep memory store."),(0,a.kt)("li",{parentName:"ol"},"Vector search over the conversation history.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.memory.chat_message_histories import ZepChatMessageHistory\nfrom langchain.schema import HumanMessage, AIMessage\nfrom uuid import uuid4\n\n# Set this to your Zep server URL\nZEP_API_URL = "http://localhost:8000"\n')),(0,a.kt)("h3",{id:"initialize-the-zep-chat-message-history-class-and-add-a-chat-message-history-to-the-memory-store"},"Initialize the Zep Chat Message History Class and add a chat message history to the memory store"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NOTE:")," Unlike other Retrievers, the content returned by the Zep Retriever is session/user specific. A ",(0,a.kt)("inlineCode",{parentName:"p"},"session_id")," is required when instantiating the Retriever."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"session_id = str(uuid4())  # This is a unique identifier for the user/session\n\n# Set up Zep Chat History. We'll use this to add chat histories to the memory store\nzep_chat_history = ZepChatMessageHistory(\n    session_id=session_id,\n    url=ZEP_API_URL,\n)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Preload some messages into the memory. The default message window is 12 messages. We want to push beyond this to demonstrate auto-summarization.\ntest_history = [\n    {"role": "human", "content": "Who was Octavia Butler?"},\n    {\n        "role": "ai",\n        "content": (\n            "Octavia Estelle Butler (June 22, 1947 \u2013 February 24, 2006) was an American"\n            " science fiction author."\n        ),\n    },\n    {"role": "human", "content": "Which books of hers were made into movies?"},\n    {\n        "role": "ai",\n        "content": (\n            "The most well-known adaptation of Octavia Butler\'s work is the FX series"\n            " Kindred, based on her novel of the same name."\n        ),\n    },\n    {"role": "human", "content": "Who were her contemporaries?"},\n    {\n        "role": "ai",\n        "content": (\n            "Octavia Butler\'s contemporaries included Ursula K. Le Guin, Samuel R."\n            " Delany, and Joanna Russ."\n        ),\n    },\n    {"role": "human", "content": "What awards did she win?"},\n    {\n        "role": "ai",\n        "content": (\n            "Octavia Butler won the Hugo Award, the Nebula Award, and the MacArthur"\n            " Fellowship."\n        ),\n    },\n    {\n        "role": "human",\n        "content": "Which other women sci-fi writers might I want to read?",\n    },\n    {\n        "role": "ai",\n        "content": "You might want to read Ursula K. Le Guin or Joanna Russ.",\n    },\n    {\n        "role": "human",\n        "content": (\n            "Write a short synopsis of Butler\'s book, Parable of the Sower. What is it"\n            " about?"\n        ),\n    },\n    {\n        "role": "ai",\n        "content": (\n            "Parable of the Sower is a science fiction novel by Octavia Butler,"\n            " published in 1993. It follows the story of Lauren Olamina, a young woman"\n            " living in a dystopian future where society has collapsed due to"\n            " environmental disasters, poverty, and violence."\n        ),\n    },\n]\n\nfor msg in test_history:\n    zep_chat_history.append(\n        HumanMessage(content=msg["content"])\n        if msg["role"] == "human"\n        else AIMessage(content=msg["content"])\n    )\n')),(0,a.kt)("h3",{id:"use-the-zep-retriever-to-vector-search-over-the-zep-memory"},"Use the Zep Retriever to vector search over the Zep memory"),(0,a.kt)("p",null,"Zep provides native vector search over historical conversation memory. Embedding happens automatically."),(0,a.kt)("p",null,"NOTE: Embedding of messages occurs asynchronously, so the first query may not return results. Subsequent queries will return results as the embeddings are generated."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.retrievers import ZepRetriever\n\nzep_retriever = ZepRetriever(\n    session_id=session_id,  # Ensure that you provide the session_id when instantiating the Retriever\n    url=ZEP_API_URL,\n    top_k=5,\n)\n\nawait zep_retriever.aget_relevant_documents("Who wrote Parable of the Sower?")\n')),(0,a.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    [Document(page_content='Who was Octavia Butler?', metadata={'score': 0.7759001673780126, 'uuid': '3a82a02f-056e-4c6a-b960-67ebdf3b2b93', 'created_at': '2023-05-25T15:03:30.2041Z', 'role': 'human', 'token_count': 8}),\n     Document(page_content=\"Octavia Butler's contemporaries included Ursula K. Le Guin, Samuel R. Delany, and Joanna Russ.\", metadata={'score': 0.7602262941130749, 'uuid': 'a2fc9c21-0897-46c8-bef7-6f5c0f71b04a', 'created_at': '2023-05-25T15:03:30.248065Z', 'role': 'ai', 'token_count': 27}),\n     Document(page_content='Who were her contemporaries?', metadata={'score': 0.757553366415519, 'uuid': '41f9c41a-a205-41e1-b48b-a0a4cd943fc8', 'created_at': '2023-05-25T15:03:30.243995Z', 'role': 'human', 'token_count': 8}),\n     Document(page_content='Octavia Estelle Butler (June 22, 1947 \u2013 February 24, 2006) was an American science fiction author.', metadata={'score': 0.7546211059317948, 'uuid': '34678311-0098-4f1a-8fd4-5615ac692deb', 'created_at': '2023-05-25T15:03:30.231427Z', 'role': 'ai', 'token_count': 31}),\n     Document(page_content='Which books of hers were made into movies?', metadata={'score': 0.7496714959247069, 'uuid': '18046c3a-9666-4d3e-b4f0-43d1394732b7', 'created_at': '2023-05-25T15:03:30.236837Z', 'role': 'human', 'token_count': 11})]\n"))),(0,a.kt)("p",null,"We can also use the Zep sync API to retrieve results:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'zep_retriever.get_relevant_documents("Who wrote Parable of the Sower?")\n')),(0,a.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    [Document(page_content='Parable of the Sower is a science fiction novel by Octavia Butler, published in 1993. It follows the story of Lauren Olamina, a young woman living in a dystopian future where society has collapsed due to environmental disasters, poverty, and violence.', metadata={'score': 0.8897321402776546, 'uuid': '1c09603a-52c1-40d7-9d69-29f26256029c', 'created_at': '2023-05-25T15:03:30.268257Z', 'role': 'ai', 'token_count': 56}),\n     Document(page_content=\"Write a short synopsis of Butler's book, Parable of the Sower. What is it about?\", metadata={'score': 0.8857628682610436, 'uuid': 'f6706e8c-6c91-452f-8c1b-9559fd924657', 'created_at': '2023-05-25T15:03:30.265302Z', 'role': 'human', 'token_count': 23}),\n     Document(page_content='Who was Octavia Butler?', metadata={'score': 0.7759670375149477, 'uuid': '3a82a02f-056e-4c6a-b960-67ebdf3b2b93', 'created_at': '2023-05-25T15:03:30.2041Z', 'role': 'human', 'token_count': 8}),\n     Document(page_content=\"Octavia Butler's contemporaries included Ursula K. Le Guin, Samuel R. Delany, and Joanna Russ.\", metadata={'score': 0.7602854653476563, 'uuid': 'a2fc9c21-0897-46c8-bef7-6f5c0f71b04a', 'created_at': '2023-05-25T15:03:30.248065Z', 'role': 'ai', 'token_count': 27}),\n     Document(page_content='You might want to read Ursula K. Le Guin or Joanna Russ.', metadata={'score': 0.7595293992240313, 'uuid': 'f22f2498-6118-4c74-8718-aa89ccd7e3d6', 'created_at': '2023-05-25T15:03:30.261198Z', 'role': 'ai', 'token_count': 18})]\n"))))}h.isMDXComponent=!0}}]);
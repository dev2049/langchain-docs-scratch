"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[47267],{3905:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>g});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},i=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,i=p(e,["components","mdxType","originalType","parentName"]),c=m(n),d=o,g=c["".concat(l,".").concat(d)]||c[d]||u[d]||r;return n?a.createElement(g,s(s({ref:t},i),{},{components:n})):a.createElement(g,s({ref:t},i))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[c]="string"==typeof e?e:o,s[1]=p;for(var m=2;m<r;m++)s[m]=n[m];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},33249:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>g,frontMatter:()=>r,metadata:()=>p,toc:()=>m});var a=n(87462),o=(n(67294),n(3905));const r={},s="OpenAI",p={unversionedId:"modules/model_io/models/chat/integrations/openai",id:"modules/model_io/models/chat/integrations/openai",title:"OpenAI",description:"This notebook covers how to get started with OpenAI chat models.",source:"@site/docs/modules/model_io/models/chat/integrations/openai.md",sourceDirName:"modules/model_io/models/chat/integrations",slug:"/modules/model_io/models/chat/integrations/openai",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/chat/integrations/openai",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/model_io/models/chat/integrations/openai.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Google Cloud Platform Vertex AI PaLM",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/chat/integrations/google_vertex_ai_palm"},next:{title:"PromptLayer ChatOpenAI",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/chat/integrations/promptlayer_chatopenai"}},l={},m=[],i=(c="CodeOutputBlock",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var c;const u={toc:m},d="wrapper";function g(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"openai"},"OpenAI"),(0,o.kt)("p",null,"This notebook covers how to get started with OpenAI chat models."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.chat_models import ChatOpenAI\nfrom langchain.prompts.chat import (\n    ChatPromptTemplate,\n    SystemMessagePromptTemplate,\n    AIMessagePromptTemplate,\n    HumanMessagePromptTemplate,\n)\nfrom langchain.schema import (\n    AIMessage,\n    HumanMessage,\n    SystemMessage\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"chat = ChatOpenAI(temperature=0)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'messages = [\n    SystemMessage(content="You are a helpful assistant that translates English to French."),\n    HumanMessage(content="Translate this sentence from English to French. I love programming.")\n]\nchat(messages)\n')),(0,o.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    AIMessage(content="J\'aime programmer.", additional_kwargs={}, example=False)\n'))),(0,o.kt)("p",null,"You can make use of templating by using a ",(0,o.kt)("inlineCode",{parentName:"p"},"MessagePromptTemplate"),". You can build a ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatPromptTemplate")," from one or more ",(0,o.kt)("inlineCode",{parentName:"p"},"MessagePromptTemplates"),". You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatPromptTemplate"),"'s ",(0,o.kt)("inlineCode",{parentName:"p"},"format_prompt")," -- this returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"PromptValue"),", which you can convert to a string or Message object, depending on whether you want to use the formatted value as input to an llm or chat model."),(0,o.kt)("p",null,"For convenience, there is a ",(0,o.kt)("inlineCode",{parentName:"p"},"from_template")," method exposed on the template. If you were to use this template, this is what it would look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'template="You are a helpful assistant that translates {input_language} to {output_language}."\nsystem_message_prompt = SystemMessagePromptTemplate.from_template(template)\nhuman_template="{text}"\nhuman_message_prompt = HumanMessagePromptTemplate.from_template(human_template)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chat_prompt = ChatPromptTemplate.from_messages([system_message_prompt, human_message_prompt])\n\n# get a chat completion from the formatted messages\nchat(chat_prompt.format_prompt(input_language="English", output_language="French", text="I love programming.").to_messages())\n')),(0,o.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    AIMessage(content="J\'adore la programmation.", additional_kwargs={})\n'))))}g.isMDXComponent=!0}}]);
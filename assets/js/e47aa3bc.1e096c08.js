"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[75266],{3905:(e,t,o)=>{o.d(t,{Zo:()=>i,kt:()=>h});var n=o(67294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function p(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function m(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):p(p({},t),e)),o},i=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,i=m(e,["components","mdxType","originalType","parentName"]),c=l(o),d=a,h=c["".concat(s,".").concat(d)]||c[d]||u[d]||r;return o?n.createElement(h,p(p({ref:t},i),{},{components:o})):n.createElement(h,p({ref:t},i))}));function h(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=o.length,p=new Array(r);p[0]=d;var m={};for(var s in t)hasOwnProperty.call(t,s)&&(m[s]=t[s]);m.originalType=e,m[c]="string"==typeof e?e:a,p[1]=m;for(var l=2;l<r;l++)p[l]=o[l];return n.createElement.apply(null,p)}return n.createElement.apply(null,o)}d.displayName="MDXCreateElement"},71322:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>y,frontMatter:()=>i,metadata:()=>u,toc:()=>h});var n=o(87462),a=(o(67294),o(3905));const r=(p="CodeOutputBlock",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var p;const m={toc:[]},s="wrapper";function l(e){let{components:t,...o}=e;return(0,a.kt)(s,(0,n.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"You can make use of templating by using a ",(0,a.kt)("inlineCode",{parentName:"p"},"MessagePromptTemplate"),". You can build a ",(0,a.kt)("inlineCode",{parentName:"p"},"ChatPromptTemplate")," from one or more ",(0,a.kt)("inlineCode",{parentName:"p"},"MessagePromptTemplates"),". You can use ",(0,a.kt)("inlineCode",{parentName:"p"},"ChatPromptTemplate"),"'s ",(0,a.kt)("inlineCode",{parentName:"p"},"format_prompt")," -- this returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"PromptValue"),", which you can convert to a string or Message object, depending on whether you want to use the formatted value as input to an llm or chat model."),(0,a.kt)("p",null,"For convenience, there is a ",(0,a.kt)("inlineCode",{parentName:"p"},"from_template")," method exposed on the template. If you were to use this template, this is what it would look like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from langchain import PromptTemplate\nfrom langchain.prompts.chat import (\n    ChatPromptTemplate,\n    SystemMessagePromptTemplate,\n    AIMessagePromptTemplate,\n    HumanMessagePromptTemplate,\n)\n\ntemplate="You are a helpful assistant that translates {input_language} to {output_language}."\nsystem_message_prompt = SystemMessagePromptTemplate.from_template(template)\nhuman_template="{text}"\nhuman_message_prompt = HumanMessagePromptTemplate.from_template(human_template)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'chat_prompt = ChatPromptTemplate.from_messages([system_message_prompt, human_message_prompt])\n\n# get a chat completion from the formatted messages\nchat(chat_prompt.format_prompt(input_language="English", output_language="French", text="I love programming.").to_messages())\n')),(0,a.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    AIMessage(content="J\'adore la programmation.", additional_kwargs={})\n'))),(0,a.kt)("p",null,"If you wanted to construct the MessagePromptTemplate more directly, you could create a PromptTemplate outside and then pass it in, eg:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'prompt=PromptTemplate(\n    template="You are a helpful assistant that translates {input_language} to {output_language}.",\n    input_variables=["input_language", "output_language"],\n)\nsystem_message_prompt = SystemMessagePromptTemplate(prompt=prompt)\n')))}l.isMDXComponent=!0;const i={},c="Prompts",u={unversionedId:"modules/model_io/models/chat/how_to/prompts",id:"modules/model_io/models/chat/how_to/prompts",title:"Prompts",description:"Prompts for Chat models are built around messages, instead of just plain text.",source:"@site/docs/modules/model_io/models/chat/how_to/prompts.mdx",sourceDirName:"modules/model_io/models/chat/how_to",slug:"/modules/model_io/models/chat/how_to/prompts",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/chat/how_to/prompts",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/model_io/models/chat/how_to/prompts.mdx",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"LLMChain",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/chat/how_to/llm_chain"},next:{title:"Streaming",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/chat/how_to/streaming"}},d={},h=[],g={toc:h},f="wrapper";function y(e){let{components:t,...o}=e;return(0,a.kt)(f,(0,n.Z)({},g,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"prompts"},"Prompts"),(0,a.kt)("p",null,"Prompts for Chat models are built around messages, instead of just plain text."),(0,a.kt)(l,{mdxType:"Prompts"}))}y.isMDXComponent=!0}}]);
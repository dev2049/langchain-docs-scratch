"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[42050],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,y=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(y,i(i({ref:t},p),{},{components:n})):a.createElement(y,i({ref:t},p))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},75468:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={},i="Airbyte",l={unversionedId:"ecosystem/integrations/airbyte",id:"ecosystem/integrations/airbyte",title:"Airbyte",description:"Airbyte is a data integration platform for ELT pipelines from APIs,",source:"@site/docs/ecosystem/integrations/airbyte.mdx",sourceDirName:"ecosystem/integrations",slug:"/ecosystem/integrations/airbyte",permalink:"/langchain-docs-scratch/docs/ecosystem/integrations/airbyte",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/ecosystem/integrations/airbyte.mdx",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Aim",permalink:"/langchain-docs-scratch/docs/ecosystem/integrations/aim_tracking"},next:{title:"Aleph Alpha",permalink:"/langchain-docs-scratch/docs/ecosystem/integrations/aleph_alpha"}},s={},c=[{value:"Installation and Setup",id:"installation-and-setup",level:2},{value:"Document Loader",id:"document-loader",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"airbyte"},"Airbyte"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/airbytehq/airbyte"},"Airbyte")," is a data integration platform for ELT pipelines from APIs,\ndatabases & files to warehouses & lakes. It has the largest catalog of ELT connectors to data warehouses and databases.")),(0,r.kt)("h2",{id:"installation-and-setup"},"Installation and Setup"),(0,r.kt)("p",null,"This instruction shows how to load any source from ",(0,r.kt)("inlineCode",{parentName:"p"},"Airbyte")," into a local ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON")," file that can be read in as a document."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Prerequisites:"),"\nHave ",(0,r.kt)("inlineCode",{parentName:"p"},"docker desktop")," installed."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Steps:")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Clone Airbyte from GitHub - ",(0,r.kt)("inlineCode",{parentName:"li"},"git clone https://github.com/airbytehq/airbyte.git"),"."),(0,r.kt)("li",{parentName:"ol"},"Switch into Airbyte directory - ",(0,r.kt)("inlineCode",{parentName:"li"},"cd airbyte"),"."),(0,r.kt)("li",{parentName:"ol"},"Start Airbyte - ",(0,r.kt)("inlineCode",{parentName:"li"},"docker compose up"),"."),(0,r.kt)("li",{parentName:"ol"},"In your browser, just visit http://localhost:8000. You will be asked for a username and password. By default, that's username ",(0,r.kt)("inlineCode",{parentName:"li"},"airbyte")," and password ",(0,r.kt)("inlineCode",{parentName:"li"},"password"),"."),(0,r.kt)("li",{parentName:"ol"},"Setup any source you wish."),(0,r.kt)("li",{parentName:"ol"},"Set destination as Local JSON, with specified destination path - lets say ",(0,r.kt)("inlineCode",{parentName:"li"},"/json_data"),". Set up a manual sync."),(0,r.kt)("li",{parentName:"ol"},"Run the connection."),(0,r.kt)("li",{parentName:"ol"},"To see what files are created, navigate to: ",(0,r.kt)("inlineCode",{parentName:"li"},"file:///tmp/airbyte_local/"),".")),(0,r.kt)("h2",{id:"document-loader"},"Document Loader"),(0,r.kt)("p",null,"See a ",(0,r.kt)("a",{parentName:"p",href:"../modules/indexes/document_loaders/examples/airbyte_json.ipynb"},"usage example"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.document_loaders import AirbyteJSONLoader\n")))}u.isMDXComponent=!0}}]);
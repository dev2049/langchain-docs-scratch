"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[87825],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,g=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},62210:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={},i="Question Answering Benchmarking: Paul Graham Essay",l={unversionedId:"guides/evaluation/qa_benchmarking_pg",id:"guides/evaluation/qa_benchmarking_pg",title:"Question Answering Benchmarking: Paul Graham Essay",description:"Here we go over how to benchmark performance on a question answering task over a Paul Graham essay.",source:"@site/docs/guides/evaluation/qa_benchmarking_pg.md",sourceDirName:"guides/evaluation",slug:"/guides/evaluation/qa_benchmarking_pg",permalink:"/langchain-docs-scratch/docs/guides/evaluation/qa_benchmarking_pg",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/guides/evaluation/qa_benchmarking_pg.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Evaluating an OpenAPI Chain",permalink:"/langchain-docs-scratch/docs/guides/evaluation/openapi_eval"},next:{title:"Question Answering Benchmarking: State of the Union Address",permalink:"/langchain-docs-scratch/docs/guides/evaluation/qa_benchmarking_sota"}},p={},s=[{value:"Loading the data",id:"loading-the-data",level:2},{value:"Setting up a chain",id:"setting-up-a-chain",level:2},{value:"Make a prediction",id:"make-a-prediction",level:2},{value:"Make many predictions",id:"make-many-predictions",level:2},{value:"Evaluate performance",id:"evaluate-performance",level:2}],c=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var u;const d={toc:s},m="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"question-answering-benchmarking-paul-graham-essay"},"Question Answering Benchmarking: Paul Graham Essay"),(0,r.kt)("p",null,"Here we go over how to benchmark performance on a question answering task over a Paul Graham essay."),(0,r.kt)("p",null,"It is highly reccomended that you do any evaluation/benchmarking with tracing enabled. See ",(0,r.kt)("a",{parentName:"p",href:"https://langchain.readthedocs.io/en/latest/tracing.html"},"here")," for an explanation of what tracing is and how to set it up."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Comment this out if you are NOT using tracing\nimport os\nos.environ["LANGCHAIN_HANDLER"] = "langchain"\n')),(0,r.kt)("h2",{id:"loading-the-data"},"Loading the data"),(0,r.kt)("p",null,"First, let's load the data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.evaluation.loading import load_dataset\ndataset = load_dataset("question-answering-paul-graham")\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Found cached dataset json (/Users/harrisonchase/.cache/huggingface/datasets/LangChainDatasets___json/LangChainDatasets--question-answering-paul-graham-76e8f711e038d742/0.0.0/0f7e3662623656454fcd2b650f34e886a7db4b9104504885bd462096cc7a9f51)\n\n\n\n      0%|          | 0/1 [00:00<?, ?it/s]\n"))),(0,r.kt)("h2",{id:"setting-up-a-chain"},"Setting up a chain"),(0,r.kt)("p",null,"Now we need to create some pipelines for doing question answering. Step one in that is creating an index over the data in question."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.document_loaders import TextLoader\nloader = TextLoader("../../modules/paul_graham_essay.txt")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.indexes import VectorstoreIndexCreator\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"vectorstore = VectorstoreIndexCreator().from_loaders([loader]).vectorstore\n")),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Running Chroma using direct local API.\n    Using DuckDB in-memory for database. Data will be transient.\n"))),(0,r.kt)("p",null,"Now we can create a question answering chain."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.chains import RetrievalQA\nfrom langchain.llms import OpenAI\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain = RetrievalQA.from_chain_type(llm=OpenAI(), chain_type="stuff", retriever=vectorstore.as_retriever(), input_key="question")\n')),(0,r.kt)("h2",{id:"make-a-prediction"},"Make a prediction"),(0,r.kt)("p",null,"First, we can make predictions one datapoint at a time. Doing it at this level of granularity allows use to explore the outputs in detail, and also is a lot cheaper than running over multiple datapoints"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"chain(dataset[0])\n")),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'question': 'What were the two main things the author worked on before college?',\n     'answer': 'The two main things the author worked on before college were writing and programming.',\n     'result': ' Writing and programming.'}\n"))),(0,r.kt)("h2",{id:"make-many-predictions"},"Make many predictions"),(0,r.kt)("p",null,"Now we can make predictions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"predictions = chain.apply(dataset)\n")),(0,r.kt)("h2",{id:"evaluate-performance"},"Evaluate performance"),(0,r.kt)("p",null,"Now we can evaluate the predictions. The first thing we can do is look at them by eye."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"predictions[0]\n")),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'question': 'What were the two main things the author worked on before college?',\n     'answer': 'The two main things the author worked on before college were writing and programming.',\n     'result': ' Writing and programming.'}\n"))),(0,r.kt)("p",null,"Next, we can use a language model to score them programatically"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.evaluation.qa import QAEvalChain\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'llm = OpenAI(temperature=0)\neval_chain = QAEvalChain.from_llm(llm)\ngraded_outputs = eval_chain.evaluate(dataset, predictions, question_key="question", prediction_key="result")\n')),(0,r.kt)("p",null,"We can add in the graded output to the ",(0,r.kt)("inlineCode",{parentName:"p"},"predictions")," dict and then get a count of the grades."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"for i, prediction in enumerate(predictions):\n    prediction['grade'] = graded_outputs[i]['text']\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from collections import Counter\nCounter([pred['grade'] for pred in predictions])\n")),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Counter({' CORRECT': 12, ' INCORRECT': 10})\n"))),(0,r.kt)("p",null,"We can also filter the datapoints to the incorrect examples and look at them."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"incorrect = [pred for pred in predictions if pred['grade'] == \" INCORRECT\"]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"incorrect[0]\n")),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'question': 'What did the author write their dissertation on?',\n     'answer': 'The author wrote their dissertation on applications of continuations.',\n     'result': ' The author does not mention what their dissertation was on, so it is not known.',\n     'grade': ' INCORRECT'}\n"))))}g.isMDXComponent=!0}}]);
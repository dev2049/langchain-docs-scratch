"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[78875],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),h=r,m=c["".concat(l,".").concat(h)]||c[h]||d[h]||i;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},91075:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>g,default:()=>v,frontMatter:()=>m,metadata:()=>y,toc:()=>k});var a=n(87462),r=(n(67294),n(3905));const i=(o="CodeOutputBlock",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var o;const s={toc:[{value:"Prepare Data",id:"prepare-data",level:2},{value:"Quickstart",id:"quickstart",level:2},{value:"The <code>stuff</code> Chain",id:"the-stuff-chain",level:2},{value:"The <code>map_reduce</code> Chain",id:"the-map_reduce-chain",level:2},{value:"The <code>refine</code> Chain",id:"the-refine-chain",level:2},{value:"The <code>map-rerank</code> Chain",id:"the-map-rerank-chain",level:2}]},l="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(l,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"prepare-data"},"Prepare Data"),(0,r.kt)("p",null,"First we prepare the data. For this example we do similarity search over a vector database, but these documents could be fetched in any manner (the point of this notebook to highlight what to do AFTER you fetch the documents)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import Chroma\nfrom langchain.docstore.document import Document\nfrom langchain.prompts import PromptTemplate\nfrom langchain.indexes.vectorstore import VectorstoreIndexCreator\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'with open("../../state_of_the_union.txt") as f:\n    state_of_the_union = f.read()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ntexts = text_splitter.split_text(state_of_the_union)\n\nembeddings = OpenAIEmbeddings()\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'docsearch = Chroma.from_texts(texts, embeddings, metadatas=[{"source": str(i)} for i in range(len(texts))]).as_retriever()\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Running Chroma using direct local API.\n    Using DuckDB in-memory for database. Data will be transient.\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'query = "What did the president say about Justice Breyer"\ndocs = docsearch.get_relevant_documents(query)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.chains.question_answering import load_qa_chain\nfrom langchain.llms import OpenAI\n")),(0,r.kt)("h2",{id:"quickstart"},"Quickstart"),(0,r.kt)("p",null,"If you just want to get started as quickly as possible, this is the recommended way to do it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain = load_qa_chain(OpenAI(temperature=0), chain_type="stuff")\nquery = "What did the president say about Justice Breyer"\nchain.run(input_documents=docs, question=query)\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    ' The president said that Justice Breyer has dedicated his life to serve the country and thanked him for his service.'\n"))),(0,r.kt)("p",null,"If you want more control and understanding over what is happening, please see the information below."),(0,r.kt)("h2",{id:"the-stuff-chain"},"The ",(0,r.kt)("inlineCode",{parentName:"h2"},"stuff")," Chain"),(0,r.kt)("p",null,"This sections shows results of using the ",(0,r.kt)("inlineCode",{parentName:"p"},"stuff")," Chain to do question answering."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain = load_qa_chain(OpenAI(temperature=0), chain_type="stuff")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'query = "What did the president say about Justice Breyer"\nchain({"input_documents": docs, "question": query}, return_only_outputs=True)\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'output_text': ' The president said that Justice Breyer has dedicated his life to serve the country and thanked him for his service.'}\n"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Custom Prompts")),(0,r.kt)("p",null,"You can also use your own prompts with this chain. In this example, we will respond in Italian."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'prompt_template = """Use the following pieces of context to answer the question at the end. If you don\'t know the answer, just say that you don\'t know, don\'t try to make up an answer.\n\n{context}\n\nQuestion: {question}\nAnswer in Italian:"""\nPROMPT = PromptTemplate(\n    template=prompt_template, input_variables=["context", "question"]\n)\nchain = load_qa_chain(OpenAI(temperature=0), chain_type="stuff", prompt=PROMPT)\nchain({"input_documents": docs, "question": query}, return_only_outputs=True)\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'output_text': ' Il presidente ha detto che Justice Breyer ha dedicato la sua vita a servire questo paese e ha ricevuto una vasta gamma di supporto.'}\n"))),(0,r.kt)("h2",{id:"the-map_reduce-chain"},"The ",(0,r.kt)("inlineCode",{parentName:"h2"},"map_reduce")," Chain"),(0,r.kt)("p",null,"This sections shows results of using the ",(0,r.kt)("inlineCode",{parentName:"p"},"map_reduce")," Chain to do question answering."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain = load_qa_chain(OpenAI(temperature=0), chain_type="map_reduce")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'query = "What did the president say about Justice Breyer"\nchain({"input_documents": docs, "question": query}, return_only_outputs=True)\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'output_text': ' The president said that Justice Breyer is an Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court, and thanked him for his service.'}\n"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Intermediate Steps")),(0,r.kt)("p",null,"We can also return the intermediate steps for ",(0,r.kt)("inlineCode",{parentName:"p"},"map_reduce")," chains, should we want to inspect them. This is done with the ",(0,r.kt)("inlineCode",{parentName:"p"},"return_map_steps")," variable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain = load_qa_chain(OpenAI(temperature=0), chain_type="map_reduce", return_map_steps=True)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain({"input_documents": docs, "question": query}, return_only_outputs=True)\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'intermediate_steps': [' \"Tonight, I\u2019d like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer\u2014an Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.\"',\n      ' A former top litigator in private practice. A former federal public defender. And from a family of public school educators and police officers. A consensus builder. Since she\u2019s been nominated, she\u2019s received a broad range of support\u2014from the Fraternal Order of Police to former judges appointed by Democrats and Republicans.',\n      ' None',\n      ' None'],\n     'output_text': ' The president said that Justice Breyer is an Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court, and thanked him for his service.'}\n"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Custom Prompts")),(0,r.kt)("p",null,"You can also use your own prompts with this chain. In this example, we will respond in Italian."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'question_prompt_template = """Use the following portion of a long document to see if any of the text is relevant to answer the question. \nReturn any relevant text translated into italian.\n{context}\nQuestion: {question}\nRelevant text, if any, in Italian:"""\nQUESTION_PROMPT = PromptTemplate(\n    template=question_prompt_template, input_variables=["context", "question"]\n)\n\ncombine_prompt_template = """Given the following extracted parts of a long document and a question, create a final answer italian. \nIf you don\'t know the answer, just say that you don\'t know. Don\'t try to make up an answer.\n\nQUESTION: {question}\n=========\n{summaries}\n=========\nAnswer in Italian:"""\nCOMBINE_PROMPT = PromptTemplate(\n    template=combine_prompt_template, input_variables=["summaries", "question"]\n)\nchain = load_qa_chain(OpenAI(temperature=0), chain_type="map_reduce", return_map_steps=True, question_prompt=QUESTION_PROMPT, combine_prompt=COMBINE_PROMPT)\nchain({"input_documents": docs, "question": query}, return_only_outputs=True)\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'intermediate_steps': [\"\\nStasera vorrei onorare qualcuno che ha dedicato la sua vita a servire questo paese: il giustizia Stephen Breyer - un veterano dell'esercito, uno studioso costituzionale e un giustizia in uscita della Corte Suprema degli Stati Uniti. Giustizia Breyer, grazie per il tuo servizio.\",\n      '\\nNessun testo pertinente.',\n      ' Non ha detto nulla riguardo a Justice Breyer.',\n      \" Non c'\xe8 testo pertinente.\"],\n     'output_text': ' Non ha detto nulla riguardo a Justice Breyer.'}\n"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Batch Size")),(0,r.kt)("p",null,"When using the ",(0,r.kt)("inlineCode",{parentName:"p"},"map_reduce")," chain, one thing to keep in mind is the batch size you are using during the map step. If this is too high, it could cause rate limiting errors. You can control this by setting the batch size on the LLM used. Note that this only applies for LLMs with this parameter. Below is an example of doing so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"llm = OpenAI(batch_size=5, temperature=0)\n")),(0,r.kt)("h2",{id:"the-refine-chain"},"The ",(0,r.kt)("inlineCode",{parentName:"h2"},"refine")," Chain"),(0,r.kt)("p",null,"This sections shows results of using the ",(0,r.kt)("inlineCode",{parentName:"p"},"refine")," Chain to do question answering."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain = load_qa_chain(OpenAI(temperature=0), chain_type="refine")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'query = "What did the president say about Justice Breyer"\nchain({"input_documents": docs, "question": query}, return_only_outputs=True)\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'output_text': '\\n\\nThe president said that he wanted to honor Justice Breyer for his dedication to serving the country, his legacy of excellence, and his commitment to advancing liberty and justice, as well as for his support of the Equality Act and his commitment to protecting the rights of LGBTQ+ Americans. He also praised Justice Breyer for his role in helping to pass the Bipartisan Infrastructure Law, which he said would be the most sweeping investment to rebuild America in history and would help the country compete for the jobs of the 21st Century.'}\n"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Intermediate Steps")),(0,r.kt)("p",null,"We can also return the intermediate steps for ",(0,r.kt)("inlineCode",{parentName:"p"},"refine")," chains, should we want to inspect them. This is done with the ",(0,r.kt)("inlineCode",{parentName:"p"},"return_refine_steps")," variable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain = load_qa_chain(OpenAI(temperature=0), chain_type="refine", return_refine_steps=True)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain({"input_documents": docs, "question": query}, return_only_outputs=True)\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'intermediate_steps': ['\\nThe president said that he wanted to honor Justice Breyer for his dedication to serving the country and his legacy of excellence.',\n      '\\nThe president said that he wanted to honor Justice Breyer for his dedication to serving the country, his legacy of excellence, and his commitment to advancing liberty and justice.',\n      '\\n\\nThe president said that he wanted to honor Justice Breyer for his dedication to serving the country, his legacy of excellence, and his commitment to advancing liberty and justice, as well as for his support of the Equality Act and his commitment to protecting the rights of LGBTQ+ Americans.',\n      '\\n\\nThe president said that he wanted to honor Justice Breyer for his dedication to serving the country, his legacy of excellence, and his commitment to advancing liberty and justice, as well as for his support of the Equality Act and his commitment to protecting the rights of LGBTQ+ Americans. He also praised Justice Breyer for his role in helping to pass the Bipartisan Infrastructure Law, which is the most sweeping investment to rebuild America in history.'],\n     'output_text': '\\n\\nThe president said that he wanted to honor Justice Breyer for his dedication to serving the country, his legacy of excellence, and his commitment to advancing liberty and justice, as well as for his support of the Equality Act and his commitment to protecting the rights of LGBTQ+ Americans. He also praised Justice Breyer for his role in helping to pass the Bipartisan Infrastructure Law, which is the most sweeping investment to rebuild America in history.'}\n"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Custom Prompts")),(0,r.kt)("p",null,"You can also use your own prompts with this chain. In this example, we will respond in Italian."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'refine_prompt_template = (\n    "The original question is as follows: {question}\\n"\n    "We have provided an existing answer: {existing_answer}\\n"\n    "We have the opportunity to refine the existing answer"\n    "(only if needed) with some more context below.\\n"\n    "------------\\n"\n    "{context_str}\\n"\n    "------------\\n"\n    "Given the new context, refine the original answer to better "\n    "answer the question. "\n    "If the context isn\'t useful, return the original answer. Reply in Italian."\n)\nrefine_prompt = PromptTemplate(\n    input_variables=["question", "existing_answer", "context_str"],\n    template=refine_prompt_template,\n)\n\n\ninitial_qa_template = (\n    "Context information is below. \\n"\n    "---------------------\\n"\n    "{context_str}"\n    "\\n---------------------\\n"\n    "Given the context information and not prior knowledge, "\n    "answer the question: {question}\\nYour answer should be in Italian.\\n"\n)\ninitial_qa_prompt = PromptTemplate(\n    input_variables=["context_str", "question"], template=initial_qa_template\n)\nchain = load_qa_chain(OpenAI(temperature=0), chain_type="refine", return_refine_steps=True,\n                     question_prompt=initial_qa_prompt, refine_prompt=refine_prompt)\nchain({"input_documents": docs, "question": query}, return_only_outputs=True)\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'intermediate_steps': ['\\nIl presidente ha detto che Justice Breyer ha dedicato la sua vita al servizio di questo paese e ha reso omaggio al suo servizio.',\n      \"\\nIl presidente ha detto che Justice Breyer ha dedicato la sua vita al servizio di questo paese, ha reso omaggio al suo servizio e ha sostenuto la nomina di una top litigatrice in pratica privata, un ex difensore pubblico federale e una famiglia di insegnanti e agenti di polizia delle scuole pubbliche. Ha anche sottolineato l'importanza di avanzare la libert\xe0 e la giustizia attraverso la sicurezza delle frontiere e la risoluzione del sistema di immigrazione.\",\n      \"\\nIl presidente ha detto che Justice Breyer ha dedicato la sua vita al servizio di questo paese, ha reso omaggio al suo servizio e ha sostenuto la nomina di una top litigatrice in pratica privata, un ex difensore pubblico federale e una famiglia di insegnanti e agenti di polizia delle scuole pubbliche. Ha anche sottolineato l'importanza di avanzare la libert\xe0 e la giustizia attraverso la sicurezza delle frontiere, la risoluzione del sistema di immigrazione, la protezione degli americani LGBTQ+ e l'approvazione dell'Equality Act. Ha inoltre sottolineato l'importanza di lavorare insieme per sconfiggere l'epidemia di oppiacei.\",\n      \"\\n\\nIl presidente ha detto che Justice Breyer ha dedicato la sua vita al servizio di questo paese, ha reso omaggio al suo servizio e ha sostenuto la nomina di una top litigatrice in pratica privata, un ex difensore pubblico federale e una famiglia di insegnanti e agenti di polizia delle scuole pubbliche. Ha anche sottolineato l'importanza di avanzare la libert\xe0 e la giustizia attraverso la sicurezza delle frontiere, la risoluzione del sistema di immigrazione, la protezione degli americani LGBTQ+ e l'approvazione dell'Equality Act. Ha inoltre sottolineato l'importanza di lavorare insieme per sconfiggere l'epidemia di oppiacei e per investire in America, educare gli americani, far crescere la forza lavoro e costruire l'economia dal\"],\n     'output_text': \"\\n\\nIl presidente ha detto che Justice Breyer ha dedicato la sua vita al servizio di questo paese, ha reso omaggio al suo servizio e ha sostenuto la nomina di una top litigatrice in pratica privata, un ex difensore pubblico federale e una famiglia di insegnanti e agenti di polizia delle scuole pubbliche. Ha anche sottolineato l'importanza di avanzare la libert\xe0 e la giustizia attraverso la sicurezza delle frontiere, la risoluzione del sistema di immigrazione, la protezione degli americani LGBTQ+ e l'approvazione dell'Equality Act. Ha inoltre sottolineato l'importanza di lavorare insieme per sconfiggere l'epidemia di oppiacei e per investire in America, educare gli americani, far crescere la forza lavoro e costruire l'economia dal\"}\n"))),(0,r.kt)("h2",{id:"the-map-rerank-chain"},"The ",(0,r.kt)("inlineCode",{parentName:"h2"},"map-rerank")," Chain"),(0,r.kt)("p",null,"This sections shows results of using the ",(0,r.kt)("inlineCode",{parentName:"p"},"map-rerank")," Chain to do question answering with sources."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain = load_qa_chain(OpenAI(temperature=0), chain_type="map_rerank", return_intermediate_steps=True)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'query = "What did the president say about Justice Breyer"\nresults = chain({"input_documents": docs, "question": query}, return_only_outputs=True)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'results["output_text"]\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    ' The President thanked Justice Breyer for his service and honored him for dedicating his life to serve the country.'\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'results["intermediate_steps"]\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    [{'answer': ' The President thanked Justice Breyer for his service and honored him for dedicating his life to serve the country.',\n      'score': '100'},\n     {'answer': ' This document does not answer the question', 'score': '0'},\n     {'answer': ' This document does not answer the question', 'score': '0'},\n     {'answer': ' This document does not answer the question', 'score': '0'}]\n"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Custom Prompts")),(0,r.kt)("p",null,"You can also use your own prompts with this chain. In this example, we will respond in Italian."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.output_parsers import RegexParser\n\noutput_parser = RegexParser(\n    regex=r"(.*?)\\nScore: (.*)",\n    output_keys=["answer", "score"],\n)\n\nprompt_template = """Use the following pieces of context to answer the question at the end. If you don\'t know the answer, just say that you don\'t know, don\'t try to make up an answer.\n\nIn addition to giving an answer, also return a score of how fully it answered the user\'s question. This should be in the following format:\n\nQuestion: [question here]\nHelpful Answer In Italian: [answer here]\nScore: [score between 0 and 100]\n\nBegin!\n\nContext:\n---------\n{context}\n---------\nQuestion: {question}\nHelpful Answer In Italian:"""\nPROMPT = PromptTemplate(\n    template=prompt_template,\n    input_variables=["context", "question"],\n    output_parser=output_parser,\n)\n\nchain = load_qa_chain(OpenAI(temperature=0), chain_type="map_rerank", return_intermediate_steps=True, prompt=PROMPT)\nquery = "What did the president say about Justice Breyer"\nchain({"input_documents": docs, "question": query}, return_only_outputs=True)\n')),(0,r.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'intermediate_steps': [{'answer': ' Il presidente ha detto che Justice Breyer ha dedicato la sua vita a servire questo paese.',\n       'score': '100'},\n      {'answer': ' Il presidente non ha detto nulla sulla Giustizia Breyer.',\n       'score': '100'},\n      {'answer': ' Non so.', 'score': '0'},\n      {'answer': ' Non so.', 'score': '0'}],\n     'output_text': ' Il presidente ha detto che Justice Breyer ha dedicato la sua vita a servire questo paese.'}\n"))))}u.isMDXComponent=!0;const p=(e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)})("CodeOutputBlock"),c={toc:[]},d="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"We can also perform document QA and return the sources that were used to answer the question. To do this we'll just need to make sure each document has a \"source\" key in the metadata, and we'll use the ",(0,r.kt)("inlineCode",{parentName:"p"},"load_qa_with_sources")," helper to construct our chain:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'docsearch = Chroma.from_texts(texts, embeddings, metadatas=[{"source": str(i)} for i in range(len(texts))])\nquery = "What did the president say about Justice Breyer"\ndocs = docsearch.similarity_search(query)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.chains.qa_with_sources import load_qa_with_sources_chain\n\nchain = load_qa_with_sources_chain(OpenAI(temperature=0), chain_type="stuff")\nquery = "What did the president say about Justice Breyer"\nchain({"input_documents": docs, "question": query}, return_only_outputs=True)\n')),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'output_text': ' The president thanked Justice Breyer for his service.\\nSOURCES: 30-pl'}\n"))))}h.isMDXComponent=!0;const m={},g="Document QA",y={unversionedId:"modules/chains/additional/question_answering",id:"modules/chains/additional/question_answering",title:"Document QA",description:"Here we walk through how to use LangChain for question answering over a list of documents. Under the hood we'll be using our Document chains.",source:"@site/docs/modules/chains/additional/question_answering.mdx",sourceDirName:"modules/chains/additional",slug:"/modules/chains/additional/question_answering",permalink:"/langchain-docs-scratch/docs/modules/chains/additional/question_answering",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/chains/additional/question_answering.mdx",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Program-aided language model (PAL) chain",permalink:"/langchain-docs-scratch/docs/modules/chains/additional/pal"},next:{title:"Vector store-augmented text generation",permalink:"/langchain-docs-scratch/docs/modules/chains/additional/vector_db_text_generation"}},f={},k=[{value:"Document QA with sources",id:"document-qa-with-sources",level:2}],_={toc:k},w="wrapper";function v(e){let{components:t,...n}=e;return(0,r.kt)(w,(0,a.Z)({},_,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"document-qa"},"Document QA"),(0,r.kt)("p",null,"Here we walk through how to use LangChain for question answering over a list of documents. Under the hood we'll be using our ",(0,r.kt)("a",{parentName:"p",href:"../document.html"},"Document chains"),"."),(0,r.kt)(u,{mdxType:"Example"}),(0,r.kt)("h2",{id:"document-qa-with-sources"},"Document QA with sources"),(0,r.kt)(h,{mdxType:"ExampleWithSources"}))}v.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[60761],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>y});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(t),d=r,y=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return t?a.createElement(y,l(l({ref:n},c),{},{components:t})):a.createElement(y,l({ref:n},c))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=d;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[m]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},68398:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=t(87462),r=(t(67294),t(3905));const o={},l="Beam",i={unversionedId:"ecosystem/integrations/beam",id:"ecosystem/integrations/beam",title:"Beam",description:"This page covers how to use Beam within LangChain.",source:"@site/docs/ecosystem/integrations/beam.mdx",sourceDirName:"ecosystem/integrations",slug:"/ecosystem/integrations/beam",permalink:"/langchain-docs-scratch/docs/ecosystem/integrations/beam",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/ecosystem/integrations/beam.mdx",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Banana",permalink:"/langchain-docs-scratch/docs/ecosystem/integrations/bananadev"},next:{title:"Bedrock",permalink:"/langchain-docs-scratch/docs/ecosystem/integrations/bedrock"}},p={},s=[{value:"Installation and Setup",id:"installation-and-setup",level:2},{value:"Wrappers",id:"wrappers",level:2},{value:"LLM",id:"llm",level:3},{value:"Define your Beam app.",id:"define-your-beam-app",level:2},{value:"Deploy your Beam app",id:"deploy-your-beam-app",level:2},{value:"Call your Beam app",id:"call-your-beam-app",level:2}],c={toc:s},m="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"beam"},"Beam"),(0,r.kt)("p",null,"This page covers how to use Beam within LangChain.\nIt is broken into two parts: installation and setup, and then references to specific Beam wrappers."),(0,r.kt)("h2",{id:"installation-and-setup"},"Installation and Setup"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.beam.cloud/"},"Create an account")),(0,r.kt)("li",{parentName:"ul"},"Install the Beam CLI with ",(0,r.kt)("inlineCode",{parentName:"li"},"curl https://raw.githubusercontent.com/slai-labs/get-beam/main/get-beam.sh -sSfL | sh")),(0,r.kt)("li",{parentName:"ul"},"Register API keys with ",(0,r.kt)("inlineCode",{parentName:"li"},"beam configure")),(0,r.kt)("li",{parentName:"ul"},"Set environment variables (",(0,r.kt)("inlineCode",{parentName:"li"},"BEAM_CLIENT_ID"),") and (",(0,r.kt)("inlineCode",{parentName:"li"},"BEAM_CLIENT_SECRET"),")"),(0,r.kt)("li",{parentName:"ul"},"Install the Beam SDK ",(0,r.kt)("inlineCode",{parentName:"li"},"pip install beam-sdk"))),(0,r.kt)("h2",{id:"wrappers"},"Wrappers"),(0,r.kt)("h3",{id:"llm"},"LLM"),(0,r.kt)("p",null,"There exists a Beam LLM wrapper, which you can access with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.llms.beam import Beam\n")),(0,r.kt)("h2",{id:"define-your-beam-app"},"Define your Beam app."),(0,r.kt)("p",null,"This is the environment you\u2019ll be developing against once you start the app.\nIt's also used to define the maximum response length from the model."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'llm = Beam(model_name="gpt2",\n           name="langchain-gpt2-test",\n           cpu=8,\n           memory="32Gi",\n           gpu="A10G",\n           python_version="python3.8",\n           python_packages=[\n               "diffusers[torch]>=0.10",\n               "transformers",\n               "torch",\n               "pillow",\n               "accelerate",\n               "safetensors",\n               "xformers",],\n           max_length="50",\n           verbose=False)\n')),(0,r.kt)("h2",{id:"deploy-your-beam-app"},"Deploy your Beam app"),(0,r.kt)("p",null,"Once defined, you can deploy your Beam app by calling your model's ",(0,r.kt)("inlineCode",{parentName:"p"},"_deploy()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"llm._deploy()\n")),(0,r.kt)("h2",{id:"call-your-beam-app"},"Call your Beam app"),(0,r.kt)("p",null,"Once a beam model is deployed, it can be called by callying your model's ",(0,r.kt)("inlineCode",{parentName:"p"},"_call()")," method.\nThis returns the GPT2 text response to your prompt."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'response = llm._call("Running machine learning on a remote GPU")\n')),(0,r.kt)("p",null,"An example script which deploys the model and calls it would be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.llms.beam import Beam\nimport time\n\nllm = Beam(model_name="gpt2",\n           name="langchain-gpt2-test",\n           cpu=8,\n           memory="32Gi",\n           gpu="A10G",\n           python_version="python3.8",\n           python_packages=[\n               "diffusers[torch]>=0.10",\n               "transformers",\n               "torch",\n               "pillow",\n               "accelerate",\n               "safetensors",\n               "xformers",],\n           max_length="50",\n           verbose=False)\n\nllm._deploy()\n\nresponse = llm._call("Running machine learning on a remote GPU")\n\nprint(response)\n')))}u.isMDXComponent=!0}}]);
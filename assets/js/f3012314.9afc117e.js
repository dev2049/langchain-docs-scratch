"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[33889],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),m=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=m(e.components);return a.createElement(l.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=m(t),h=o,d=p["".concat(l,".").concat(h)]||p[h]||u[h]||r;return t?a.createElement(d,s(s({ref:n},c),{},{components:t})):a.createElement(d,s({ref:n},c))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=h;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[p]="string"==typeof e?e:o,s[1]=i;for(var m=2;m<r;m++)s[m]=t[m];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},61368:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>p,default:()=>f,frontMatter:()=>c,metadata:()=>u,toc:()=>d});var a=t(87462),o=(t(67294),t(3905));const r=(s="CodeOutputBlock",function(e){return console.warn("Component "+s+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var s;const i={toc:[{value:"ChatMessageHistory",id:"chatmessagehistory",level:2},{value:"ConversationBufferMemory",id:"conversationbuffermemory",level:2},{value:"Using in a chain",id:"using-in-a-chain",level:2},{value:"Saving Message History",id:"saving-message-history",level:2}]},l="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(l,(0,a.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,'We will walk through the simplest form of memory: "buffer" memory, which just involves keeping a buffer of all prior messages. We will show how to use the modular utility functions here, then show how it can be used in a chain (both returning a string as well as a list of messages).'),(0,o.kt)("h2",{id:"chatmessagehistory"},"ChatMessageHistory"),(0,o.kt)("p",null,"One of the core utility classes underpinning most (if not all) memory modules is the ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatMessageHistory")," class. This is a super lightweight wrapper which exposes convenience methods for saving Human messages, AI messages, and then fetching them all."),(0,o.kt)("p",null,"You may want to use this class directly if you are managing memory outside of a chain."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.memory import ChatMessageHistory\n\nhistory = ChatMessageHistory()\n\nhistory.add_user_message("hi!")\n\nhistory.add_ai_message("whats up?")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"history.messages\n")),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [HumanMessage(content='hi!', additional_kwargs={}),\n     AIMessage(content='whats up?', additional_kwargs={})]\n"))),(0,o.kt)("h2",{id:"conversationbuffermemory"},"ConversationBufferMemory"),(0,o.kt)("p",null,"We now show how to use this simple concept in a chain. We first showcase ",(0,o.kt)("inlineCode",{parentName:"p"},"ConversationBufferMemory")," which is just a wrapper around ChatMessageHistory that extracts the messages in a variable."),(0,o.kt)("p",null,"We can first extract it as a string."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.memory import ConversationBufferMemory\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'memory = ConversationBufferMemory()\nmemory.chat_memory.add_user_message("hi!")\nmemory.chat_memory.add_ai_message("whats up?")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"memory.load_memory_variables({})\n")),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    {'history': 'Human: hi!\\nAI: whats up?'}\n"))),(0,o.kt)("p",null,"We can also get the history as a list of messages"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'memory = ConversationBufferMemory(return_messages=True)\nmemory.chat_memory.add_user_message("hi!")\nmemory.chat_memory.add_ai_message("whats up?")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"memory.load_memory_variables({})\n")),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    {'history': [HumanMessage(content='hi!', additional_kwargs={}),\n      AIMessage(content='whats up?', additional_kwargs={})]}\n"))),(0,o.kt)("h2",{id:"using-in-a-chain"},"Using in a chain"),(0,o.kt)("p",null,"Finally, let's take a look at using this in a chain (setting ",(0,o.kt)("inlineCode",{parentName:"p"},"verbose=True")," so we can see the prompt)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.llms import OpenAI\nfrom langchain.chains import ConversationChain\n\n\nllm = OpenAI(temperature=0)\nconversation = ConversationChain(\n    llm=llm,\n    verbose=True,\n    memory=ConversationBufferMemory()\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'conversation.predict(input="Hi there!")\n')),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'\n\n    > Entering new ConversationChain chain...\n    Prompt after formatting:\n    The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n\n    Current conversation:\n\n    Human: Hi there!\n    AI:\n\n    > Finished chain.\n\n\n\n\n\n    " Hi there! It\'s nice to meet you. How can I help you today?"\n'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'conversation.predict(input="I\'m doing well! Just having a conversation with an AI.")\n')),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\n\n    > Entering new ConversationChain chain...\n    Prompt after formatting:\n    The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n\n    Current conversation:\n    Human: Hi there!\n    AI:  Hi there! It's nice to meet you. How can I help you today?\n    Human: I'm doing well! Just having a conversation with an AI.\n    AI:\n\n    > Finished chain.\n\n\n\n\n\n    \" That's great! It's always nice to have a conversation with someone new. What would you like to talk about?\"\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'conversation.predict(input="Tell me about yourself.")\n')),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\n\n    > Entering new ConversationChain chain...\n    Prompt after formatting:\n    The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n\n    Current conversation:\n    Human: Hi there!\n    AI:  Hi there! It's nice to meet you. How can I help you today?\n    Human: I'm doing well! Just having a conversation with an AI.\n    AI:  That's great! It's always nice to have a conversation with someone new. What would you like to talk about?\n    Human: Tell me about yourself.\n    AI:\n\n    > Finished chain.\n\n\n\n\n\n    \" Sure! I'm an AI created to help people with their everyday tasks. I'm programmed to understand natural language and provide helpful information. I'm also constantly learning and updating my knowledge base so I can provide more accurate and helpful answers.\"\n"))),(0,o.kt)("h2",{id:"saving-message-history"},"Saving Message History"),(0,o.kt)("p",null,"You may often have to save messages, and then load them to use again. This can be done easily by first converting the messages to normal python dictionaries, saving those (as json or something) and then loading those. Here is an example of doing that."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import json\n\nfrom langchain.memory import ChatMessageHistory\nfrom langchain.schema import messages_from_dict, messages_to_dict\n\nhistory = ChatMessageHistory()\n\nhistory.add_user_message("hi!")\n\nhistory.add_ai_message("whats up?")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"dicts = messages_to_dict(history.messages)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"dicts\n")),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [{'type': 'human', 'data': {'content': 'hi!', 'additional_kwargs': {}}},\n     {'type': 'ai', 'data': {'content': 'whats up?', 'additional_kwargs': {}}}]\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"new_messages = messages_from_dict(dicts)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"new_messages\n")),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [HumanMessage(content='hi!', additional_kwargs={}),\n     AIMessage(content='whats up?', additional_kwargs={})]\n"))),(0,o.kt)("p",null,"And that's it for the getting started! There are plenty of different types of memory, check out our examples to see them all"))}m.isMDXComponent=!0;const c={sidebar_position:3},p="Memory",u={unversionedId:"modules/memory/index",id:"modules/memory/index",title:"Memory",description:"By default, Chains and Agents are stateless,",source:"@site/docs/modules/memory/index.mdx",sourceDirName:"modules/memory",slug:"/modules/memory/",permalink:"/langchain-docs-scratch/docs/modules/memory/",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/memory/index.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"sidebar",previous:{title:"Vector store-augmented text generation",permalink:"/langchain-docs-scratch/docs/modules/chains/additional/vector_db_text_generation"},next:{title:"How to add Memory to an LLMChain",permalink:"/langchain-docs-scratch/docs/modules/memory/how_to/adding_memory"}},h={},d=[{value:"Get started",id:"get-started",level:2}],g={toc:d},y="wrapper";function f(e){let{components:n,...t}=e;return(0,o.kt)(y,(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"memory"},"Memory"),(0,o.kt)("p",null,"By default, Chains and Agents are stateless,\nmeaning that they treat each incoming query independently (like the underlying LLMs and chat models themselves).\nIn some applications, like chatbots, it is essential\nto remember previous interactions, both in the short and long-term.\nThe ",(0,o.kt)("strong",{parentName:"p"},"Memory")," class does exactly that."),(0,o.kt)("p",null,"LangChain provides memory components in two forms.\nFirst, LangChain provides helper utilities for managing and manipulating previous chat messages.\nThese are designed to be modular and useful regardless of how they are used.\nSecondly, LangChain provides easy ways to incorporate these utilities into chains."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://drive.google.com/uc?id=17h0HUHPK0ApHtTyj9J6xfTUf0PtMBKk_",alt:null})),(0,o.kt)("h2",{id:"get-started"},"Get started"),(0,o.kt)("p",null,"Memory involves keeping a concept of state around throughout a user's interactions with an language model. A user's interactions with a language model are captured in the concept of ChatMessages, so this boils down to ingesting, capturing, transforming and extracting knowledge from a sequence of chat messages. There are many different ways to do this, each of which exists as its own memory type."),(0,o.kt)("p",null,"In general, for each type of memory there are two ways to understanding using memory. These are the standalone functions which extract information from a sequence of messages, and then there is the way you can use this type of memory in a chain."),(0,o.kt)("p",null,"Memory can return multiple pieces of information (for example, the most recent N messages and a summary of all previous messages). The returned information can either be a string or a list of messages."),(0,o.kt)(m,{mdxType:"GetStarted"}))}f.isMDXComponent=!0}}]);
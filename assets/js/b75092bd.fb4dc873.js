"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[58044],{3905:(e,t,o)=>{o.d(t,{Zo:()=>i,kt:()=>f});var n=o(67294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function d(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):d(d({},t),e)),o},i=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),m=c(o),p=a,f=m["".concat(l,".").concat(p)]||m[p]||u[p]||r;return o?n.createElement(f,d(d({ref:t},i),{},{components:o})):n.createElement(f,d({ref:t},i))}));function f(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=o.length,d=new Array(r);d[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:a,d[1]=s;for(var c=2;c<r;c++)d[c]=o[c];return n.createElement.apply(null,d)}return n.createElement.apply(null,o)}p.displayName="MDXCreateElement"},51400:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>p,contentTitle:()=>m,default:()=>h,frontMatter:()=>i,metadata:()=>u,toc:()=>f});var n=o(87462),a=(o(67294),o(3905));const r=(d="CodeOutputBlock",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var d;const s={toc:[]},l="wrapper";function c(e){let{components:t,...o}=e;return(0,a.kt)(l,(0,n.Z)({},s,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The simplest loader reads in a file as text and places it all into one Document."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.document_loaders import TextLoader\n\nloader = TextLoader("./index.md")\nloader.load()\n')),(0,a.kt)(r,{language:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[\n    Document(page_content='---\\nsidebar_position: 0\\n---\\n# Document loaders\\n\\nUse document loaders to load data from a source as `Document`\\'s. A `Document` is a piece of text\\nand associated metadata. For example, there are document loaders for loading a simple `.txt` file, for loading the text\\ncontents of any web page, or even for loading a transcript of a YouTube video.\\n\\nEvery document loader exposes two methods:\\n1. \"Load\": load documents from the configured source\\n2. \"Load and split\": load documents from the configured source and split them using the passed in text splitter\\n\\nThey optionally implement:\\n\\n3. \"Lazy load\": load documents into memory lazily\\n', metadata={'source': '../docs/docs_skeleton/docs/modules/data_io/document_loaders/index.md'})\n]\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.text_splitter import CharacterTextSplitter\nloader.load_and_split(text_splitter=CharacterTextSplitter(chunk_size=10, chunk_overlap=0))\n")),(0,a.kt)(r,{language:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[\n    Document(page_content='---\\nsidebar_position: 0\\n---\\n# Document loaders', metadata={'source': '../docs/docs_skeleton/docs/modules/data_io/document_loaders/index.md'}),\n    Document(page_content=\"Use document loaders to load data from a source as `Document`'s. A `Document` is a piece of text\\nand associated metadata. For example, there are document loaders for loading a simple `.txt` file, for loading the text\\ncontents of any web page, or even for loading a transcript of a YouTube video.\", metadata={'source': '../docs/docs_skeleton/docs/modules/data_io/document_loaders/index.md'}),\n    Document(page_content='Every document loader exposes two methods:\\n1. \"Load\": load documents from the configured source\\n2. \"Load and split\": load documents from the configured source and split them using the passed in text splitter', metadata={'source': '../docs/docs_skeleton/docs/modules/data_io/document_loaders/index.md'}),\n    Document(page_content='They optionally implement:', metadata={'source': '../docs/docs_skeleton/docs/modules/data_io/document_loaders/index.md'}),\n    Document(page_content='3. \"Lazy load\": load documents into memory lazily', metadata={'source': '../docs/docs_skeleton/docs/modules/data_io/document_loaders/index.md'})\n]\n"))))}c.isMDXComponent=!0;const i={sidebar_position:0},m="Document loaders",u={unversionedId:"modules/data_io/document_loaders/index",id:"modules/data_io/document_loaders/index",title:"Document loaders",description:"Use document loaders to load data from a source as Document's. A Document is a piece of text",source:"@site/docs/modules/data_io/document_loaders/index.mdx",sourceDirName:"modules/data_io/document_loaders",slug:"/modules/data_io/document_loaders/",permalink:"/langchain-docs-scratch/docs/modules/data_io/document_loaders/",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/data_io/document_loaders/index.mdx",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"sidebar",previous:{title:"Data I/O",permalink:"/langchain-docs-scratch/docs/modules/data_io/"},next:{title:"CSV",permalink:"/langchain-docs-scratch/docs/modules/data_io/document_loaders/how_to/csv"}},p={},f=[{value:"Get started",id:"get-started",level:2}],y={toc:f},g="wrapper";function h(e){let{components:t,...o}=e;return(0,a.kt)(g,(0,n.Z)({},y,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"document-loaders"},"Document loaders"),(0,a.kt)("p",null,"Use document loaders to load data from a source as ",(0,a.kt)("inlineCode",{parentName:"p"},"Document"),"'s. A ",(0,a.kt)("inlineCode",{parentName:"p"},"Document")," is a piece of text\nand associated metadata. For example, there are document loaders for loading a simple ",(0,a.kt)("inlineCode",{parentName:"p"},".txt")," file, for loading the text\ncontents of any web page, or even for loading a transcript of a YouTube video."),(0,a.kt)("p",null,"Every document loader exposes two methods:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},'"Load": load documents from the configured source'),(0,a.kt)("li",{parentName:"ol"},'"Load and split": load documents from the configured source and split them using the passed in text splitter')),(0,a.kt)("p",null,"They optionally implement:"),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},'"Lazy load": load documents into memory lazily')),(0,a.kt)("h2",{id:"get-started"},"Get started"),(0,a.kt)(c,{mdxType:"GetStarted"}))}h.isMDXComponent=!0}}]);
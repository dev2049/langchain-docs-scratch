"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[79945],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),p=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return n?o.createElement(h,i(i({ref:t},l),{},{components:n})):o.createElement(h,i({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},26281:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>u,default:()=>b,frontMatter:()=>l,metadata:()=>d,toc:()=>h});var o=n(87462),r=(n(67294),n(3905));const a=(i="CodeOutputBlock",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var i;const s={toc:[]},c="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Setting ",(0,r.kt)("inlineCode",{parentName:"p"},"verbose")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"True")," will print out some internal states of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Chain")," object while it is being ran."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'conversation = ConversationChain(\n    llm=chat,\n    memory=ConversationBufferMemory(),\n    verbose=True\n)\nconversation.run("What is ChatGPT?")\n')),(0,r.kt)(a,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    > Entering new ConversationChain chain...\n    Prompt after formatting:\n    The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n\n    Current conversation:\n\n    Human: What is ChatGPT?\n    AI:\n\n    > Finished chain.\n\n    'ChatGPT is an AI language model developed by OpenAI. It is based on the GPT-3 architecture and is capable of generating human-like responses to text prompts. ChatGPT has been trained on a massive amount of text data and can understand and respond to a wide range of topics. It is often used for chatbots, virtual assistants, and other conversational AI applications.'\n"))))}p.isMDXComponent=!0;const l={},u="Debugging chains",d={unversionedId:"modules/chains/how_to/debugging",id:"modules/chains/how_to/debugging",title:"Debugging chains",description:"It can be hard to debug a Chain object solely from its output as most Chain objects involve a fair amount of input prompt preprocessing and LLM output post-processing.",source:"@site/docs/modules/chains/how_to/debugging.mdx",sourceDirName:"modules/chains/how_to",slug:"/modules/chains/how_to/debugging",permalink:"/langchain-docs-scratch/docs/modules/chains/how_to/debugging",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/chains/how_to/debugging.mdx",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Custom chain",permalink:"/langchain-docs-scratch/docs/modules/chains/how_to/custom_chain"},next:{title:"Adding memory (state)",permalink:"/langchain-docs-scratch/docs/modules/chains/how_to/memory"}},m={},h=[],g={toc:h},f="wrapper";function b(e){let{components:t,...n}=e;return(0,r.kt)(f,(0,o.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"debugging-chains"},"Debugging chains"),(0,r.kt)("p",null,"It can be hard to debug a ",(0,r.kt)("inlineCode",{parentName:"p"},"Chain")," object solely from its output as most ",(0,r.kt)("inlineCode",{parentName:"p"},"Chain")," objects involve a fair amount of input prompt preprocessing and LLM output post-processing."),(0,r.kt)(p,{mdxType:"Example"}))}b.isMDXComponent=!0}}]);
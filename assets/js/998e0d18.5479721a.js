"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[41170],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>g});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var m=r.createContext({}),c=function(e){var n=r.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(m.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,m=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(t),p=o,g=d["".concat(m,".").concat(p)]||d[p]||u[p]||a;return t?r.createElement(g,i(i({ref:n},l),{},{components:t})):r.createElement(g,i({ref:n},l))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=p;var s={};for(var m in n)hasOwnProperty.call(n,m)&&(s[m]=n[m]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},65979:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(87462),o=(t(67294),t(3905));const a={},i="MosaicML embeddings",s={unversionedId:"modules/model_io/models/text_embedding/integrations/mosaicml",id:"modules/model_io/models/text_embedding/integrations/mosaicml",title:"MosaicML embeddings",description:"MosaicML offers a managed inference service. You can either use a variety of open source models, or deploy your own.",source:"@site/docs/modules/model_io/models/text_embedding/integrations/mosaicml.md",sourceDirName:"modules/model_io/models/text_embedding/integrations",slug:"/modules/model_io/models/text_embedding/integrations/mosaicml",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/text_embedding/integrations/mosaicml",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/model_io/models/text_embedding/integrations/mosaicml.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"ModelScope",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/text_embedding/integrations/modelscope_hub"},next:{title:"OpenAI",permalink:"/langchain-docs-scratch/docs/modules/model_io/models/text_embedding/integrations/openai"}},m={},c=[],l={toc:c},d="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"mosaicml-embeddings"},"MosaicML embeddings"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://docs.mosaicml.com/en/latest/inference.html"},"MosaicML")," offers a managed inference service. You can either use a variety of open source models, or deploy your own."),(0,o.kt)("p",null,"This example goes over how to use LangChain to interact with MosaicML Inference for text embedding."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# sign up for an account: https://forms.mosaicml.com/demo?utm_source=langchain\n\nfrom getpass import getpass\n\nMOSAICML_API_TOKEN = getpass()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import os\n\nos.environ["MOSAICML_API_TOKEN"] = MOSAICML_API_TOKEN\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.embeddings import MosaicMLInstructorEmbeddings\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'embeddings = MosaicMLInstructorEmbeddings(\n    query_instruction="Represent the query for retrieval: "\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'query_text = "This is a test query."\nquery_result = embeddings.embed_query(query_text)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'document_text = "This is a test document."\ndocument_result = embeddings.embed_documents([document_text])\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import numpy as np\n\nquery_numpy = np.array(query_result)\ndocument_numpy = np.array(document_result[0])\nsimilarity = np.dot(query_numpy, document_numpy) / (np.linalg.norm(query_numpy)*np.linalg.norm(document_numpy))\nprint(f"Cosine similarity between document and query: {similarity}")\n')))}u.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[96862],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),m=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=m(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=m(t),y=o,h=c["".concat(l,".").concat(y)]||c[y]||u[y]||r;return t?a.createElement(h,s(s({ref:n},p),{},{components:t})):a.createElement(h,s({ref:n},p))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=y;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[c]="string"==typeof e?e:o,s[1]=i;for(var m=2;m<r;m++)s[m]=t[m];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},89095:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>m});var a=t(87462),o=(t(67294),t(3905));const r={},s="Dynamodb Chat Message History",i={unversionedId:"modules/memory/integrations/dynamodb_chat_message_history",id:"modules/memory/integrations/dynamodb_chat_message_history",title:"Dynamodb Chat Message History",description:"This notebook goes over how to use Dynamodb to store chat message history.",source:"@site/docs/modules/memory/integrations/dynamodb_chat_message_history.md",sourceDirName:"modules/memory/integrations",slug:"/modules/memory/integrations/dynamodb_chat_message_history",permalink:"/langchain-docs-scratch/docs/modules/memory/integrations/dynamodb_chat_message_history",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/memory/integrations/dynamodb_chat_message_history.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Cassandra Chat Message History",permalink:"/langchain-docs-scratch/docs/modules/memory/integrations/cassandra_chat_message_history"},next:{title:"Entity Memory with SQLite storage",permalink:"/langchain-docs-scratch/docs/modules/memory/integrations/entity_memory_with_sqlite"}},l={},m=[{value:"DynamoDBChatMessageHistory",id:"dynamodbchatmessagehistory",level:2},{value:"Agent with DynamoDB Memory",id:"agent-with-dynamodb-memory",level:2}],p=(c="CodeOutputBlock",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var c;const u={toc:m},y="wrapper";function h(e){let{components:n,...t}=e;return(0,o.kt)(y,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"dynamodb-chat-message-history"},"Dynamodb Chat Message History"),(0,o.kt)("p",null,"This notebook goes over how to use Dynamodb to store chat message history."),(0,o.kt)("p",null,"First make sure you have correctly configured the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html"},"AWS CLI"),". Then make sure you have installed boto3."),(0,o.kt)("p",null,"Next, create the DynamoDB Table where we will be storing messages:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import boto3\n\n# Get the service resource.\ndynamodb = boto3.resource('dynamodb')\n\n# Create the DynamoDB table.\ntable = dynamodb.create_table(\n    TableName='SessionTable',\n    KeySchema=[\n        {\n            'AttributeName': 'SessionId',\n            'KeyType': 'HASH'\n        }\n    ],\n    AttributeDefinitions=[\n        {\n            'AttributeName': 'SessionId',\n            'AttributeType': 'S'\n        }\n    ],\n    BillingMode='PAY_PER_REQUEST',\n)\n\n# Wait until the table exists.\ntable.meta.client.get_waiter('table_exists').wait(TableName='SessionTable')\n\n# Print out some data about the table.\nprint(table.item_count)\n")),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    0\n"))),(0,o.kt)("h2",{id:"dynamodbchatmessagehistory"},"DynamoDBChatMessageHistory"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.memory.chat_message_histories import DynamoDBChatMessageHistory\n\nhistory = DynamoDBChatMessageHistory(table_name="SessionTable", session_id="0")\n\nhistory.add_user_message("hi!")\n\nhistory.add_ai_message("whats up?")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"history.messages\n")),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [HumanMessage(content='hi!', additional_kwargs={}, example=False),\n     AIMessage(content='whats up?', additional_kwargs={}, example=False)]\n"))),(0,o.kt)("h2",{id:"agent-with-dynamodb-memory"},"Agent with DynamoDB Memory"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.agents import Tool\nfrom langchain.memory import ConversationBufferMemory\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.agents import initialize_agent\nfrom langchain.agents import AgentType\nfrom langchain.utilities import PythonREPL\nfrom getpass import getpass\n\nmessage_history = DynamoDBChatMessageHistory(table_name="SessionTable", session_id="1")\nmemory = ConversationBufferMemory(memory_key="chat_history", chat_memory=message_history, return_messages=True)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'python_repl = PythonREPL()\n\n# You can create the tool to pass to an agent\ntools = [Tool(\n    name="python_repl",\n    description="A Python shell. Use this to execute python commands. Input should be a valid python command. If you want to see the output of a value, you should print it out with `print(...)`.",\n    func=python_repl.run\n)]\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"llm=ChatOpenAI(temperature=0)\nagent_chain = initialize_agent(tools, llm, agent=AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION, verbose=True, memory=memory)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'agent_chain.run(input="Hello!")\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    \n    \n    > Entering new AgentExecutor chain...\n    {\n        "action": "Final Answer",\n        "action_input": "Hello! How can I assist you today?"\n    }\n    \n    > Finished chain.\n\n\n\n\n\n    \'Hello! How can I assist you today?\'\n'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'agent_chain.run(input="Who owns Twitter?")\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    \n    \n    > Entering new AgentExecutor chain...\n    {\n        "action": "python_repl",\n        "action_input": "import requests\\nfrom bs4 import BeautifulSoup\\n\\nurl = \'https://en.wikipedia.org/wiki/Twitter\'\\nresponse = requests.get(url)\\nsoup = BeautifulSoup(response.content, \'html.parser\')\\nowner = soup.find(\'th\', text=\'Owner\').find_next_sibling(\'td\').text.strip()\\nprint(owner)"\n    }\n    Observation: X Corp. (2023\u2013present)Twitter, Inc. (2006\u20132023)\n    \n    Thought:{\n        "action": "Final Answer",\n        "action_input": "X Corp. (2023\u2013present)Twitter, Inc. (2006\u20132023)"\n    }\n    \n    > Finished chain.\n\n\n\n\n\n    \'X Corp. (2023\u2013present)Twitter, Inc. (2006\u20132023)\'\n'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'agent_chain.run(input="My name is Bob.")\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    \n    \n    > Entering new AgentExecutor chain...\n    {\n        "action": "Final Answer",\n        "action_input": "Hello Bob! How can I assist you today?"\n    }\n    \n    > Finished chain.\n\n\n\n\n\n    \'Hello Bob! How can I assist you today?\'\n'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'agent_chain.run(input="Who am I?")\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    \n    \n    > Entering new AgentExecutor chain...\n    {\n        "action": "Final Answer",\n        "action_input": "Your name is Bob."\n    }\n    \n    > Finished chain.\n\n\n\n\n\n    \'Your name is Bob.\'\n'))))}h.isMDXComponent=!0}}]);
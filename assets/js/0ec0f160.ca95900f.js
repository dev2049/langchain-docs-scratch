"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[78865],{3905:(e,n,t)=>{t.d(n,{Zo:()=>h,kt:()=>m});var a=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var i=a.createContext({}),c=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},h=function(e){var n=c(e.components);return a.createElement(i.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,i=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),u=c(t),p=l,m=u["".concat(i,".").concat(p)]||u[p]||d[p]||o;return t?a.createElement(m,r(r({ref:n},h),{},{components:t})):a.createElement(m,r({ref:n},h))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,r=new Array(o);r[0]=p;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[u]="string"==typeof e?e:l,r[1]=s;for(var c=2;c<o;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},51119:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>u,default:()=>f,frontMatter:()=>h,metadata:()=>d,toc:()=>m});var a=t(87462),l=(t(67294),t(3905));const o=(r="CodeOutputBlock",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",e)});var r;const s={toc:[{value:"How to use callbacks",id:"how-to-use-callbacks",level:2},{value:"When do you want to use each of these?",id:"when-do-you-want-to-use-each-of-these",level:3},{value:"Using an existing handler",id:"using-an-existing-handler",level:2}]},i="wrapper";function c(e){let{components:n,...t}=e;return(0,l.kt)(i,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"You can subscribe to these events by using the ",(0,l.kt)("inlineCode",{parentName:"p"},"callbacks")," argument available throughout the API. This argument is list of handler objects, which are expected to implement one or more of the methods described below in more detail. There are two main callbacks mechanisms:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Constructor callbacks")," will be used for all calls made on that object, and will be scoped to that object only, i.e. if you pass a handler to the ",(0,l.kt)("inlineCode",{parentName:"li"},"LLMChain")," constructor, it will not be used by the model attached to that chain. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Request callbacks")," will be used for that specific request only, and all sub-requests that it contains (eg. a call to an ",(0,l.kt)("inlineCode",{parentName:"li"},"LLMChain")," triggers a call to a Model, which uses the same handler passed through). These are explicitly passed through.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Advanced:")," When you create a custom chain you can easily set it up to use the same callback system as all the built-in chains.\n",(0,l.kt)("inlineCode",{parentName:"p"},"_call"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"_generate"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"_run"),", and equivalent async methods on Chains / LLMs / Chat Models / Agents / Tools now receive a 2nd argument called ",(0,l.kt)("inlineCode",{parentName:"p"},"run_manager")," which is bound to that run, and contains the logging methods that can be used by that object (i.e. ",(0,l.kt)("inlineCode",{parentName:"p"},"on_llm_new_token"),"). This is useful when constructing a custom chain. See this guide for more information on how to ",(0,l.kt)("a",{parentName:"p",href:"https://python.langchain.com/en/latest/modules/chains/generic/custom_chain.html"},"create custom chains and use callbacks inside them.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"CallbackHandlers")," are objects that implement the ",(0,l.kt)("inlineCode",{parentName:"p"},"CallbackHandler")," interface, which has a method for each event that can be subscribed to. The ",(0,l.kt)("inlineCode",{parentName:"p"},"CallbackManager")," will call the appropriate method on each handler when the event is triggered."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'class BaseCallbackHandler:\n    """Base callback handler that can be used to handle callbacks from langchain."""\n\n    def on_llm_start(\n        self, serialized: Dict[str, Any], prompts: List[str], **kwargs: Any\n    ) -> Any:\n        """Run when LLM starts running."""\n\n    def on_llm_new_token(self, token: str, **kwargs: Any) -> Any:\n        """Run on new LLM token. Only available when streaming is enabled."""\n\n    def on_llm_end(self, response: LLMResult, **kwargs: Any) -> Any:\n        """Run when LLM ends running."""\n\n    def on_llm_error(\n        self, error: Union[Exception, KeyboardInterrupt], **kwargs: Any\n    ) -> Any:\n        """Run when LLM errors."""\n\n    def on_chain_start(\n        self, serialized: Dict[str, Any], inputs: Dict[str, Any], **kwargs: Any\n    ) -> Any:\n        """Run when chain starts running."""\n\n    def on_chain_end(self, outputs: Dict[str, Any], **kwargs: Any) -> Any:\n        """Run when chain ends running."""\n\n    def on_chain_error(\n        self, error: Union[Exception, KeyboardInterrupt], **kwargs: Any\n    ) -> Any:\n        """Run when chain errors."""\n\n    def on_tool_start(\n        self, serialized: Dict[str, Any], input_str: str, **kwargs: Any\n    ) -> Any:\n        """Run when tool starts running."""\n\n    def on_tool_end(self, output: str, **kwargs: Any) -> Any:\n        """Run when tool ends running."""\n\n    def on_tool_error(\n        self, error: Union[Exception, KeyboardInterrupt], **kwargs: Any\n    ) -> Any:\n        """Run when tool errors."""\n\n    def on_text(self, text: str, **kwargs: Any) -> Any:\n        """Run on arbitrary text."""\n\n    def on_agent_action(self, action: AgentAction, **kwargs: Any) -> Any:\n        """Run on agent action."""\n\n    def on_agent_finish(self, finish: AgentFinish, **kwargs: Any) -> Any:\n        """Run on agent end."""\n')),(0,l.kt)("h2",{id:"how-to-use-callbacks"},"How to use callbacks"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"callbacks")," argument is available on most objects throughout the API (Chains, Models, Tools, Agents, etc.) in two different places:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Constructor callbacks"),": defined in the constructor, eg. ",(0,l.kt)("inlineCode",{parentName:"li"},"LLMChain(callbacks=[handler])"),", which will be used for all calls made on that object, and will be scoped to that object only, eg. if you pass a handler to the ",(0,l.kt)("inlineCode",{parentName:"li"},"LLMChain")," constructor, it will not be used by the Model attached to that chain."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Request callbacks"),": defined in the ",(0,l.kt)("inlineCode",{parentName:"li"},"call()"),"/",(0,l.kt)("inlineCode",{parentName:"li"},"run()"),"/",(0,l.kt)("inlineCode",{parentName:"li"},"apply()")," methods used for issuing a request, eg. ",(0,l.kt)("inlineCode",{parentName:"li"},"chain.call(inputs, callbacks=[handler])"),", which will be used for that specific request only, and all sub-requests that it contains (eg. a call to an LLMChain triggers a call to a Model, which uses the same handler passed in the ",(0,l.kt)("inlineCode",{parentName:"li"},"call()")," method).")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"verbose")," argument is available on most objects throughout the API (Chains, Models, Tools, Agents, etc.) as a constructor argument, eg. ",(0,l.kt)("inlineCode",{parentName:"p"},"LLMChain(verbose=True)"),", and it is equivalent to passing a ",(0,l.kt)("inlineCode",{parentName:"p"},"ConsoleCallbackHandler")," to the ",(0,l.kt)("inlineCode",{parentName:"p"},"callbacks")," argument of that object and all child objects. This is useful for debugging, as it will log all events to the console."),(0,l.kt)("h3",{id:"when-do-you-want-to-use-each-of-these"},"When do you want to use each of these?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Constructor callbacks are most useful for use cases such as logging, monitoring, etc., which are ",(0,l.kt)("em",{parentName:"li"},"not specific to a single request"),", but rather to the entire chain. For example, if you want to log all the requests made to an LLMChain, you would pass a handler to the constructor."),(0,l.kt)("li",{parentName:"ul"},"Request callbacks are most useful for use cases such as streaming, where you want to stream the output of a single request to a specific websocket connection, or other similar use cases. For example, if you want to stream the output of a single request to a websocket, you would pass a handler to the ",(0,l.kt)("inlineCode",{parentName:"li"},"call()")," method")),(0,l.kt)("h2",{id:"using-an-existing-handler"},"Using an existing handler"),(0,l.kt)("p",null,"LangChain provides a few built-in handlers that you can use to get started. These are available in the ",(0,l.kt)("inlineCode",{parentName:"p"},"langchain/callbacks")," module. The most basic handler is the ",(0,l.kt)("inlineCode",{parentName:"p"},"StdOutCallbackHandler"),", which simply logs all events to ",(0,l.kt)("inlineCode",{parentName:"p"},"stdout"),". In the future we will add more default handlers to the library. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Note")," when the ",(0,l.kt)("inlineCode",{parentName:"p"},"verbose")," flag on the object is set to true, the ",(0,l.kt)("inlineCode",{parentName:"p"},"StdOutCallbackHandler")," will be invoked even without being explicitly passed in."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.callbacks import StdOutCallbackHandler\nfrom langchain.chains import LLMChain\nfrom langchain.llms import OpenAI\nfrom langchain.prompts import PromptTemplate\n\nhandler = StdOutCallbackHandler()\nllm = OpenAI()\nprompt = PromptTemplate.from_template(\"1 + {number} = \")\n\n# First, let's explicitly set the StdOutCallbackHandler in `callbacks`\nchain = LLMChain(llm=llm, prompt=prompt, callbacks=[handler])\nchain.run(number=2)\n\n# Then, let's use the `verbose` flag to achieve the same result\nchain = LLMChain(llm=llm, prompt=prompt, verbose=True)\nchain.run(number=2)\n\n# Finally, let's use the request `callbacks` to achieve the same result\nchain = LLMChain(llm=llm, prompt=prompt)\nchain.run(number=2, callbacks=[handler])\n")),(0,l.kt)(o,{lang:"python",mdxType:"CodeOutputBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new LLMChain chain...\n    Prompt after formatting:\n    1 + 2 = \n    \n    > Finished chain.\n    \n    \n    > Entering new LLMChain chain...\n    Prompt after formatting:\n    1 + 2 = \n    \n    > Finished chain.\n    \n    \n    > Entering new LLMChain chain...\n    Prompt after formatting:\n    1 + 2 = \n    \n    > Finished chain.\n\n\n\n\n\n    '\\n\\n3'\n"))))}c.isMDXComponent=!0;const h={sidebar_position:5},u="Callbacks",d={unversionedId:"modules/callbacks/index",id:"modules/callbacks/index",title:"Callbacks",description:"LangChain provides a callbacks system that allows you to hook into the various stages of your LLM application. This is useful for logging, monitoring, streaming, and other tasks.",source:"@site/docs/modules/callbacks/index.mdx",sourceDirName:"modules/callbacks",slug:"/modules/callbacks/",permalink:"/langchain-docs-scratch/docs/modules/callbacks/",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/callbacks/index.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"sidebar",previous:{title:"Vectorstore Agent",permalink:"/langchain-docs-scratch/docs/modules/agents/tools/toolkits/integrations/vectorstore"},next:{title:"Async callbacks",permalink:"/langchain-docs-scratch/docs/modules/callbacks/how_to/async_callbacks"}},p={},m=[{value:"How to use callbacks",id:"how-to-use-callbacks",level:2},{value:"When do you want to use each of these?",id:"when-do-you-want-to-use-each-of-these",level:3},{value:"Using an existing handler",id:"using-an-existing-handler",level:2}],k=(e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",n)})("CodeOutputBlock"),g={toc:m},b="wrapper";function f(e){let{components:n,...t}=e;return(0,l.kt)(b,(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"callbacks"},"Callbacks"),(0,l.kt)("p",null,"LangChain provides a callbacks system that allows you to hook into the various stages of your LLM application. This is useful for logging, monitoring, streaming, and other tasks."),(0,l.kt)(c,{mdxType:"GetStarted"}),(0,l.kt)("p",null,"You can subscribe to these events by using the ",(0,l.kt)("inlineCode",{parentName:"p"},"callbacks")," argument available throughout the API. This argument is list of handler objects, which are expected to implement one or more of the methods described below in more detail. There are two main callbacks mechanisms:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Constructor callbacks")," will be used for all calls made on that object, and will be scoped to that object only, i.e. if you pass a handler to the ",(0,l.kt)("inlineCode",{parentName:"li"},"LLMChain")," constructor, it will not be used by the model attached to that chain. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Request callbacks")," will be used for that specific request only, and all sub-requests that it contains (eg. a call to an ",(0,l.kt)("inlineCode",{parentName:"li"},"LLMChain")," triggers a call to a Model, which uses the same handler passed through). These are explicitly passed through.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Advanced:")," When you create a custom chain you can easily set it up to use the same callback system as all the built-in chains.\n",(0,l.kt)("inlineCode",{parentName:"p"},"_call"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"_generate"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"_run"),", and equivalent async methods on Chains / LLMs / Chat Models / Agents / Tools now receive a 2nd argument called ",(0,l.kt)("inlineCode",{parentName:"p"},"run_manager")," which is bound to that run, and contains the logging methods that can be used by that object (i.e. ",(0,l.kt)("inlineCode",{parentName:"p"},"on_llm_new_token"),"). This is useful when constructing a custom chain. See this guide for more information on how to ",(0,l.kt)("a",{parentName:"p",href:"https://python.langchain.com/en/latest/modules/chains/generic/custom_chain.html"},"create custom chains and use callbacks inside them.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"CallbackHandlers")," are objects that implement the ",(0,l.kt)("inlineCode",{parentName:"p"},"CallbackHandler")," interface, which has a method for each event that can be subscribed to. The ",(0,l.kt)("inlineCode",{parentName:"p"},"CallbackManager")," will call the appropriate method on each handler when the event is triggered."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'class BaseCallbackHandler:\n    """Base callback handler that can be used to handle callbacks from langchain."""\n\n    def on_llm_start(\n        self, serialized: Dict[str, Any], prompts: List[str], **kwargs: Any\n    ) -> Any:\n        """Run when LLM starts running."""\n\n    def on_llm_new_token(self, token: str, **kwargs: Any) -> Any:\n        """Run on new LLM token. Only available when streaming is enabled."""\n\n    def on_llm_end(self, response: LLMResult, **kwargs: Any) -> Any:\n        """Run when LLM ends running."""\n\n    def on_llm_error(\n        self, error: Union[Exception, KeyboardInterrupt], **kwargs: Any\n    ) -> Any:\n        """Run when LLM errors."""\n\n    def on_chain_start(\n        self, serialized: Dict[str, Any], inputs: Dict[str, Any], **kwargs: Any\n    ) -> Any:\n        """Run when chain starts running."""\n\n    def on_chain_end(self, outputs: Dict[str, Any], **kwargs: Any) -> Any:\n        """Run when chain ends running."""\n\n    def on_chain_error(\n        self, error: Union[Exception, KeyboardInterrupt], **kwargs: Any\n    ) -> Any:\n        """Run when chain errors."""\n\n    def on_tool_start(\n        self, serialized: Dict[str, Any], input_str: str, **kwargs: Any\n    ) -> Any:\n        """Run when tool starts running."""\n\n    def on_tool_end(self, output: str, **kwargs: Any) -> Any:\n        """Run when tool ends running."""\n\n    def on_tool_error(\n        self, error: Union[Exception, KeyboardInterrupt], **kwargs: Any\n    ) -> Any:\n        """Run when tool errors."""\n\n    def on_text(self, text: str, **kwargs: Any) -> Any:\n        """Run on arbitrary text."""\n\n    def on_agent_action(self, action: AgentAction, **kwargs: Any) -> Any:\n        """Run on agent action."""\n\n    def on_agent_finish(self, finish: AgentFinish, **kwargs: Any) -> Any:\n        """Run on agent end."""\n')),(0,l.kt)("h2",{id:"how-to-use-callbacks"},"How to use callbacks"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"callbacks")," argument is available on most objects throughout the API (Chains, Models, Tools, Agents, etc.) in two different places:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Constructor callbacks"),": defined in the constructor, eg. ",(0,l.kt)("inlineCode",{parentName:"li"},"LLMChain(callbacks=[handler])"),", which will be used for all calls made on that object, and will be scoped to that object only, eg. if you pass a handler to the ",(0,l.kt)("inlineCode",{parentName:"li"},"LLMChain")," constructor, it will not be used by the Model attached to that chain."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Request callbacks"),": defined in the ",(0,l.kt)("inlineCode",{parentName:"li"},"call()"),"/",(0,l.kt)("inlineCode",{parentName:"li"},"run()"),"/",(0,l.kt)("inlineCode",{parentName:"li"},"apply()")," methods used for issuing a request, eg. ",(0,l.kt)("inlineCode",{parentName:"li"},"chain.call(inputs, callbacks=[handler])"),", which will be used for that specific request only, and all sub-requests that it contains (eg. a call to an LLMChain triggers a call to a Model, which uses the same handler passed in the ",(0,l.kt)("inlineCode",{parentName:"li"},"call()")," method).")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"verbose")," argument is available on most objects throughout the API (Chains, Models, Tools, Agents, etc.) as a constructor argument, eg. ",(0,l.kt)("inlineCode",{parentName:"p"},"LLMChain(verbose=True)"),", and it is equivalent to passing a ",(0,l.kt)("inlineCode",{parentName:"p"},"ConsoleCallbackHandler")," to the ",(0,l.kt)("inlineCode",{parentName:"p"},"callbacks")," argument of that object and all child objects. This is useful for debugging, as it will log all events to the console."),(0,l.kt)("h3",{id:"when-do-you-want-to-use-each-of-these"},"When do you want to use each of these?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Constructor callbacks are most useful for use cases such as logging, monitoring, etc., which are ",(0,l.kt)("em",{parentName:"li"},"not specific to a single request"),", but rather to the entire chain. For example, if you want to log all the requests made to an LLMChain, you would pass a handler to the constructor."),(0,l.kt)("li",{parentName:"ul"},"Request callbacks are most useful for use cases such as streaming, where you want to stream the output of a single request to a specific websocket connection, or other similar use cases. For example, if you want to stream the output of a single request to a websocket, you would pass a handler to the ",(0,l.kt)("inlineCode",{parentName:"li"},"call()")," method")),(0,l.kt)("h2",{id:"using-an-existing-handler"},"Using an existing handler"),(0,l.kt)("p",null,"LangChain provides a few built-in handlers that you can use to get started. These are available in the ",(0,l.kt)("inlineCode",{parentName:"p"},"langchain/callbacks")," module. The most basic handler is the ",(0,l.kt)("inlineCode",{parentName:"p"},"StdOutCallbackHandler"),", which simply logs all events to ",(0,l.kt)("inlineCode",{parentName:"p"},"stdout"),". In the future we will add more default handlers to the library. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Note")," when the ",(0,l.kt)("inlineCode",{parentName:"p"},"verbose")," flag on the object is set to true, the ",(0,l.kt)("inlineCode",{parentName:"p"},"StdOutCallbackHandler")," will be invoked even without being explicitly passed in."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.callbacks import StdOutCallbackHandler\nfrom langchain.chains import LLMChain\nfrom langchain.llms import OpenAI\nfrom langchain.prompts import PromptTemplate\n\nhandler = StdOutCallbackHandler()\nllm = OpenAI()\nprompt = PromptTemplate.from_template(\"1 + {number} = \")\n\n# First, let's explicitly set the StdOutCallbackHandler in `callbacks`\nchain = LLMChain(llm=llm, prompt=prompt, callbacks=[handler])\nchain.run(number=2)\n\n# Then, let's use the `verbose` flag to achieve the same result\nchain = LLMChain(llm=llm, prompt=prompt, verbose=True)\nchain.run(number=2)\n\n# Finally, let's use the request `callbacks` to achieve the same result\nchain = LLMChain(llm=llm, prompt=prompt)\nchain.run(number=2, callbacks=[handler])\n")),(0,l.kt)(k,{lang:"python",mdxType:"CodeOutputBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new LLMChain chain...\n    Prompt after formatting:\n    1 + 2 = \n    \n    > Finished chain.\n    \n    \n    > Entering new LLMChain chain...\n    Prompt after formatting:\n    1 + 2 = \n    \n    > Finished chain.\n    \n    \n    > Entering new LLMChain chain...\n    Prompt after formatting:\n    1 + 2 = \n    \n    > Finished chain.\n\n\n\n\n\n    '\\n\\n3'\n"))))}f.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[26918],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),l=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(o.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,h=u["".concat(o,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(h,s(s({ref:t},p),{},{components:n})):r.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=m;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c[u]="string"==typeof e?e:a,s[1]=c;for(var l=2;l<i;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},88888:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const i={},s="Elasticsearch",c={unversionedId:"ecosystem/integrations/elasticsearch",id:"ecosystem/integrations/elasticsearch",title:"Elasticsearch",description:"Elasticsearch is a distributed, RESTful search and analytics engine.",source:"@site/docs/ecosystem/integrations/elasticsearch.mdx",sourceDirName:"ecosystem/integrations",slug:"/ecosystem/integrations/elasticsearch",permalink:"/langchain-docs-scratch/docs/ecosystem/integrations/elasticsearch",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/ecosystem/integrations/elasticsearch.mdx",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"DuckDB",permalink:"/langchain-docs-scratch/docs/ecosystem/integrations/duckdb"},next:{title:"EverNote",permalink:"/langchain-docs-scratch/docs/ecosystem/integrations/evernote"}},o={},l=[{value:"Installation and Setup",id:"installation-and-setup",level:2},{value:"Retriever",id:"retriever",level:2}],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"elasticsearch"},"Elasticsearch"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"https://www.elastic.co/elasticsearch/"},"Elasticsearch")," is a distributed, RESTful search and analytics engine.\nIt provides a distributed, multi-tenant-capable full-text search engine with an HTTP web interface and schema-free\nJSON documents.")),(0,a.kt)("h2",{id:"installation-and-setup"},"Installation and Setup"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip install elasticsearch\n")),(0,a.kt)("h2",{id:"retriever"},"Retriever"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"In information retrieval, ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Okapi_BM25"},"Okapi BM25")," (BM is an abbreviation of best matching) is a ranking function used by search engines to estimate the relevance of documents to a given search query. It is based on the probabilistic retrieval framework developed in the 1970s and 1980s by Stephen E. Robertson, Karen Sp\xe4rck Jones, and others.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The name of the actual ranking function is BM25. The fuller name, Okapi BM25, includes the name of the first system to use it, which was the Okapi information retrieval system, implemented at London's City University in the 1980s and 1990s. BM25 and its newer variants, e.g. BM25F (a version of BM25 that can take document structure and anchor text into account), represent TF-IDF-like retrieval functions used in document retrieval.")),(0,a.kt)("p",null,"See a ",(0,a.kt)("a",{parentName:"p",href:"../modules/indexes/retrievers/examples/elastic_search_bm25.ipynb"},"usage example"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.retrievers import ElasticSearchBM25Retriever\n")))}d.isMDXComponent=!0}}]);
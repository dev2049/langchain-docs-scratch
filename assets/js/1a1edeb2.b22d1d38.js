"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1945],{3905:(n,e,t)=>{t.d(e,{Zo:()=>u,kt:()=>m});var a=t(67294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},o=Object.keys(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var l=a.createContext({}),c=function(n){var e=a.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},u=function(n){var e=c(n.components);return a.createElement(l.Provider,{value:e},n.children)},p="mdxType",h={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},g=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,o=n.originalType,l=n.parentName,u=s(n,["components","mdxType","originalType","parentName"]),p=c(t),g=r,m=p["".concat(l,".").concat(g)]||p[g]||h[g]||o;return t?a.createElement(m,i(i({ref:e},u),{},{components:t})):a.createElement(m,i({ref:e},u))}));function m(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var o=t.length,i=new Array(o);i[0]=g;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s[p]="string"==typeof n?n:r,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},55632:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const o={},i="Tracing Walkthrough",s={unversionedId:"guides/tracing/agent_with_tracing",id:"guides/tracing/agent_with_tracing",title:"Tracing Walkthrough",description:"There are two recommended ways to trace your LangChains:",source:"@site/docs/guides/tracing/agent_with_tracing.md",sourceDirName:"guides/tracing",slug:"/guides/tracing/agent_with_tracing",permalink:"/langchain-docs-scratch/docs/guides/tracing/agent_with_tracing",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/guides/tracing/agent_with_tracing.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Tracing",permalink:"/langchain-docs-scratch/docs/guides/tracing/"},next:{title:"Ecosystem",permalink:"/langchain-docs-scratch/docs/ecosystem"}},l={},c=[{value:"Beta Tracing V2",id:"beta-tracing-v2",level:2}],u=(p="CodeOutputBlock",function(n){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",n)});var p;const h={toc:c},g="wrapper";function m(n){let{components:e,...t}=n;return(0,r.kt)(g,(0,a.Z)({},h,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tracing-walkthrough"},"Tracing Walkthrough"),(0,r.kt)("p",null,"There are two recommended ways to trace your LangChains:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Setting the ",(0,r.kt)("inlineCode",{parentName:"li"},"LANGCHAIN_TRACING"),' environment variable to "true".'),(0,r.kt)("li",{parentName:"ol"},"Using a context manager with tracing_enabled() to trace a particular block of code.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note")," if the environment variable is set, all code will be traced, regardless of whether or not it's within the context manager."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import os\nos.environ["LANGCHAIN_TRACING"] = "true"\n\n## Uncomment below if using hosted setup.\n# os.environ["LANGCHAIN_ENDPOINT"] = "https://langchain-api-gateway-57eoxz8z.uc.gateway.dev" \n\n## Uncomment below if you want traces to be recorded to "my_session" instead of "default".\n# os.environ["LANGCHAIN_SESSION"] = "my_session"  \n\n## Better to set this environment variable in the terminal\n## Uncomment below if using hosted version. Replace "my_api_key" with your actual API Key.\n# os.environ["LANGCHAIN_API_KEY"] = "my_api_key"  \n\nimport langchain\nfrom langchain.agents import Tool, initialize_agent, load_tools\nfrom langchain.agents import AgentType\nfrom langchain.callbacks import tracing_enabled\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.llms import OpenAI\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Agent run with tracing. Ensure that OPENAI_API_KEY is set appropriately to run this example.\n\nllm = OpenAI(temperature=0)\ntools = load_tools(["llm-math"], llm=llm)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent = initialize_agent(\n    tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True\n)\n\nagent.run("What is 2 raised to .123243 power?")\n')),(0,r.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new AgentExecutor chain...\n     I need to use a calculator to solve this.\n    Action: Calculator\n    Action Input: 2^.123243\n    Observation: Answer: 1.0891804557407723\n    Thought: I now know the final answer.\n    Final Answer: 1.0891804557407723\n    \n    > Finished chain.\n\n\n\n\n\n    '1.0891804557407723'\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Agent run with tracing using a chat model\nagent = initialize_agent(\n    tools, ChatOpenAI(temperature=0), agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True\n)\n\nagent.run("What is 2 raised to .123243 power?")\n')),(0,r.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new AgentExecutor chain...\n    I need to use a calculator to solve this.\n    Action: Calculator\n    Action Input: 2 ^ .123243\n    Observation: Answer: 1.0891804557407723\n    Thought:I now know the answer to the question. \n    Final Answer: 1.0891804557407723\n    \n    > Finished chain.\n\n\n\n\n\n    '1.0891804557407723'\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Both of the agent runs will be traced because the environment variable is set\nagent.run("What is 2 raised to .123243 power?")\nwith tracing_enabled() as session:\n    agent.run("What is 5 raised to .123243 power?")\n')),(0,r.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new AgentExecutor chain...\n    I need to use a calculator to solve this.\n    Action: Calculator\n    Action Input: 2 ^ .123243\n    Observation: Answer: 1.0891804557407723\n    Thought:I now know the answer to the question. \n    Final Answer: 1.0891804557407723\n    \n    > Finished chain.\n    \n    \n    > Entering new AgentExecutor chain...\n    I need to use a calculator to solve this.\n    Action: Calculator\n    Action Input: 5 ^ .123243\n    Observation: Answer: 1.2193914912400514\n    Thought:I now know the answer to the question. \n    Final Answer: 1.2193914912400514\n    \n    > Finished chain.\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Now, we unset the environment variable and use a context manager.\nif "LANGCHAIN_TRACING" in os.environ:\n    del os.environ["LANGCHAIN_TRACING"]\n\n# here, we are writing traces to "my_test_session"\nwith tracing_enabled("my_session") as session:\n    assert session\n    agent.run("What is 5 raised to .123243 power?")  # this should be traced\n\nagent.run("What is 2 raised to .123243 power?")  # this should not be traced\n')),(0,r.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new AgentExecutor chain...\n    I need to use a calculator to solve this.\n    Action: Calculator\n    Action Input: 5 ^ .123243\n    Observation: Answer: 1.2193914912400514\n    Thought:I now know the answer to the question. \n    Final Answer: 1.2193914912400514\n    \n    > Finished chain.\n    \n    \n    > Entering new AgentExecutor chain...\n    I need to use a calculator to solve this.\n    Action: Calculator\n    Action Input: 2 ^ .123243\n    Observation: Answer: 1.0891804557407723\n    Thought:I now know the answer to the question. \n    Final Answer: 1.0891804557407723\n    \n    > Finished chain.\n\n\n\n\n\n    '1.0891804557407723'\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# The context manager is concurrency safe:\nimport asyncio \nif "LANGCHAIN_TRACING" in os.environ:\n    del os.environ["LANGCHAIN_TRACING"]\n    \nquestions = [f"What is {i} raised to .123 power?" for i in range(1,4)]\n\n# start a background task\ntask = asyncio.create_task(agent.arun(questions[0]))  # this should not be traced\nwith tracing_enabled() as session:\n    assert session\n    tasks = [agent.arun(q) for q in questions[1:3]]  # these should be traced\n    await asyncio.gather(*tasks)\n\nawait task\n')),(0,r.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new AgentExecutor chain...\n    \n    > Entering new AgentExecutor chain...\n    \n    \n    > Entering new AgentExecutor chain...\n    \n    I need to use a calculator to solve this.\n    Action: Calculator\n    Action Input: 3^0.123I need to use a calculator to solve this.\n    Action: Calculator\n    Action Input: 2^0.123Any number raised to the power of 0 is 1, but I'm not sure about a decimal power.\n    Action: Calculator\n    Action Input: 1^.123\n    Observation: Answer: 1.1446847956963533\n    Thought:\n    Observation: Answer: 1.0889970153361064\n    Thought:\n    Observation: Answer: 1.0\n    Thought:\n    > Finished chain.\n    \n    > Finished chain.\n    \n    > Finished chain.\n\n\n\n\n\n    '1.0'\n"))),(0,r.kt)("h2",{id:"beta-tracing-v2"},"[Beta]"," Tracing V2"),(0,r.kt)("p",null,"We are rolling out a newer version of our tracing service with more features coming soon. Here are the instructions on how to use it to trace your runs."),(0,r.kt)("p",null,"To use, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracing_v2_enabled")," context manager or set ",(0,r.kt)("inlineCode",{parentName:"p"},"LANGCHAIN_TRACING_V2 = 'true'")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Option 1 (Local)"),": "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Run the local LangChainPlus Server")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"pip install --upgrade langchain\nlangchain plus start\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Option 2 (Hosted)"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"After making an account an grabbing a LangChainPlus API Key, set the ",(0,r.kt)("inlineCode",{parentName:"li"},"LANGCHAIN_ENDPOINT")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"LANGCHAIN_API_KEY")," environment variables")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import os\nos.environ["LANGCHAIN_TRACING_V2"] = "true"\n# os.environ["LANGCHAIN_ENDPOINT"] = "https://api.langchain.plus"  # Uncomment this line if you want to use the hosted version\n# os.environ["LANGCHAIN_API_KEY"] = "<YOUR-LANGCHAINPLUS-API-KEY>"  # Uncomment this line if you want to use the hosted version.\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import langchain\nfrom langchain.agents import Tool, initialize_agent, load_tools\nfrom langchain.agents import AgentType\nfrom langchain.callbacks import tracing_enabled\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.llms import OpenAI\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Agent run with tracing. Ensure that OPENAI_API_KEY is set appropriately to run this example.\n\nllm = OpenAI(temperature=0)\ntools = load_tools(["llm-math"], llm=llm)\nagent = initialize_agent(\n    tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True\n)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent.run("What is 2 raised to .123243 power?")\n')),(0,r.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new AgentExecutor chain...\n     I need to use a calculator to solve this.\n    Action: Calculator\n    Action Input: 2^.123243\n    Observation: Answer: 1.0891804557407723\n    Thought: I now know the final answer.\n    Final Answer: 1.0891804557407723\n    \n    > Finished chain.\n\n\n\n\n\n    '1.0891804557407723'\n"))))}m.isMDXComponent=!0}}]);
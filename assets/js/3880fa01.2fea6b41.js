"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[28602],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},13834:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>g,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const r={},i="Agent VectorDB Question Answering Benchmarking",s={unversionedId:"guides/evaluation/agent_vectordb_sota_pg",id:"guides/evaluation/agent_vectordb_sota_pg",title:"Agent VectorDB Question Answering Benchmarking",description:"Here we go over how to benchmark performance on a question answering task using an agent to route between multiple vectordatabases.",source:"@site/docs/guides/evaluation/agent_vectordb_sota_pg.md",sourceDirName:"guides/evaluation",slug:"/guides/evaluation/agent_vectordb_sota_pg",permalink:"/langchain-docs-scratch/docs/guides/evaluation/agent_vectordb_sota_pg",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/guides/evaluation/agent_vectordb_sota_pg.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Agent Benchmarking: Search + Calculator",permalink:"/langchain-docs-scratch/docs/guides/evaluation/agent_benchmarking"},next:{title:"Benchmarking Template",permalink:"/langchain-docs-scratch/docs/guides/evaluation/benchmarking_template"}},l={},p=[{value:"Loading the data",id:"loading-the-data",level:2},{value:"Setting up a chain",id:"setting-up-a-chain",level:2},{value:"Make a prediction",id:"make-a-prediction",level:2},{value:"Make many predictions",id:"make-many-predictions",level:2},{value:"Evaluate performance",id:"evaluate-performance",level:2}],c=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var u;const d={toc:p},m="wrapper";function g(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"agent-vectordb-question-answering-benchmarking"},"Agent VectorDB Question Answering Benchmarking"),(0,o.kt)("p",null,"Here we go over how to benchmark performance on a question answering task using an agent to route between multiple vectordatabases."),(0,o.kt)("p",null,"It is highly reccomended that you do any evaluation/benchmarking with tracing enabled. See ",(0,o.kt)("a",{parentName:"p",href:"https://langchain.readthedocs.io/en/latest/tracing.html"},"here")," for an explanation of what tracing is and how to set it up."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Comment this out if you are NOT using tracing\nimport os\nos.environ["LANGCHAIN_HANDLER"] = "langchain"\n')),(0,o.kt)("h2",{id:"loading-the-data"},"Loading the data"),(0,o.kt)("p",null,"First, let's load the data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.evaluation.loading import load_dataset\ndataset = load_dataset("agent-vectordb-qa-sota-pg")\n')),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Found cached dataset json (/Users/qt/.cache/huggingface/datasets/LangChainDatasets___json/LangChainDatasets--agent-vectordb-qa-sota-pg-d3ae24016b514f92/0.0.0/fe5dd6ea2639a6df622901539cb550cf8797e5a6b2dd7af1cf934bed8e233e6e)\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00<00:00, 414.42it/s]\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"dataset[0]\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    {'question': 'What is the purpose of the NATO Alliance?',\n     'answer': 'The purpose of the NATO Alliance is to secure peace and stability in Europe after World War 2.',\n     'steps': [{'tool': 'State of Union QA System', 'tool_input': None},\n      {'tool': None, 'tool_input': 'What is the purpose of the NATO Alliance?'}]}\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"dataset[-1]\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    {'question': 'What is the purpose of YC?',\n     'answer': 'The purpose of YC is to cause startups to be founded that would not otherwise have existed.',\n     'steps': [{'tool': 'Paul Graham QA System', 'tool_input': None},\n      {'tool': None, 'tool_input': 'What is the purpose of YC?'}]}\n"))),(0,o.kt)("h2",{id:"setting-up-a-chain"},"Setting up a chain"),(0,o.kt)("p",null,"Now we need to create some pipelines for doing question answering. Step one in that is creating indexes over the data in question."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.document_loaders import TextLoader\nloader = TextLoader("../../modules/state_of_the_union.txt")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.indexes import VectorstoreIndexCreator\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'vectorstore_sota = VectorstoreIndexCreator(vectorstore_kwargs={"collection_name":"sota"}).from_loaders([loader]).vectorstore\n')),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Using embedded DuckDB without persistence: data will be transient\n"))),(0,o.kt)("p",null,"Now we can create a question answering chain."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.chains import RetrievalQA\nfrom langchain.llms import OpenAI\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain_sota = RetrievalQA.from_chain_type(llm=OpenAI(temperature=0), chain_type="stuff", retriever=vectorstore_sota.as_retriever(), input_key="question")\n')),(0,o.kt)("p",null,"Now we do the same for the Paul Graham data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'loader = TextLoader("../../modules/paul_graham_essay.txt")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'vectorstore_pg = VectorstoreIndexCreator(vectorstore_kwargs={"collection_name":"paul_graham"}).from_loaders([loader]).vectorstore\n')),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Using embedded DuckDB without persistence: data will be transient\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain_pg = RetrievalQA.from_chain_type(llm=OpenAI(temperature=0), chain_type="stuff", retriever=vectorstore_pg.as_retriever(), input_key="question")\n')),(0,o.kt)("p",null,"We can now set up an agent to route between them."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.agents import initialize_agent, Tool\nfrom langchain.agents import AgentType\ntools = [\n    Tool(\n        name = "State of Union QA System",\n        func=chain_sota.run,\n        description="useful for when you need to answer questions about the most recent state of the union address. Input should be a fully formed question."\n    ),\n    Tool(\n        name = "Paul Graham System",\n        func=chain_pg.run,\n        description="useful for when you need to answer questions about Paul Graham. Input should be a fully formed question."\n    ),\n]\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"agent = initialize_agent(tools, OpenAI(temperature=0), agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, max_iterations=4)\n")),(0,o.kt)("h2",{id:"make-a-prediction"},"Make a prediction"),(0,o.kt)("p",null,"First, we can make predictions one datapoint at a time. Doing it at this level of granularity allows use to explore the outputs in detail, and also is a lot cheaper than running over multiple datapoints"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"agent.run(dataset[0]['question'])\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    'The purpose of the NATO Alliance is to secure peace and stability in Europe after World War 2.'\n"))),(0,o.kt)("h2",{id:"make-many-predictions"},"Make many predictions"),(0,o.kt)("p",null,"Now we can make predictions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'predictions = []\npredicted_dataset = []\nerror_dataset = []\nfor data in dataset:\n    new_data = {"input": data["question"], "answer": data["answer"]}\n    try:\n        predictions.append(agent(new_data))\n        predicted_dataset.append(new_data)\n    except Exception:\n        error_dataset.append(new_data)\n')),(0,o.kt)("h2",{id:"evaluate-performance"},"Evaluate performance"),(0,o.kt)("p",null,"Now we can evaluate the predictions. The first thing we can do is look at them by eye."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"predictions[0]\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    {'input': 'What is the purpose of the NATO Alliance?',\n     'answer': 'The purpose of the NATO Alliance is to secure peace and stability in Europe after World War 2.',\n     'output': 'The purpose of the NATO Alliance is to secure peace and stability in Europe after World War 2.'}\n"))),(0,o.kt)("p",null,"Next, we can use a language model to score them programatically"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.evaluation.qa import QAEvalChain\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'llm = OpenAI(temperature=0)\neval_chain = QAEvalChain.from_llm(llm)\ngraded_outputs = eval_chain.evaluate(predicted_dataset, predictions, question_key="input", prediction_key="output")\n')),(0,o.kt)("p",null,"We can add in the graded output to the ",(0,o.kt)("inlineCode",{parentName:"p"},"predictions")," dict and then get a count of the grades."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"for i, prediction in enumerate(predictions):\n    prediction['grade'] = graded_outputs[i]['text']\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from collections import Counter\nCounter([pred['grade'] for pred in predictions])\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Counter({' CORRECT': 28, ' INCORRECT': 5})\n"))),(0,o.kt)("p",null,"We can also filter the datapoints to the incorrect examples and look at them."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"incorrect = [pred for pred in predictions if pred['grade'] == \" INCORRECT\"]\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"incorrect[0]\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    {'input': 'What are the four common sense steps that the author suggests to move forward safely?',\n     'answer': 'The four common sense steps suggested by the author to move forward safely are: stay protected with vaccines and treatments, prepare for new variants, end the shutdown of schools and businesses, and stay vigilant.',\n     'output': 'The four common sense steps suggested in the most recent State of the Union address are: cutting the cost of prescription drugs, providing a pathway to citizenship for Dreamers, revising laws so businesses have the workers they need and families don\u2019t wait decades to reunite, and protecting access to health care and preserving a woman\u2019s right to choose.',\n     'grade': ' INCORRECT'}\n"))))}g.isMDXComponent=!0}}]);
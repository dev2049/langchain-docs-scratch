"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[96524],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var o=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),d=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=d(r),u=n,h=m["".concat(s,".").concat(u)]||m[u]||p[u]||a;return r?o.createElement(h,i(i({ref:t},c),{},{components:r})):o.createElement(h,i({ref:t},c))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:n,i[1]=l;for(var d=2;d<a;d++)i[d]=r[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}u.displayName="MDXCreateElement"},36247:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>m,default:()=>v,frontMatter:()=>c,metadata:()=>p,toc:()=>h});var o=r(87462),n=(r(67294),r(3905));const a=(i="CodeOutputBlock",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",e)});var i;const l={toc:[{value:"Low Decay Rate",id:"low-decay-rate",level:2},{value:"High Decay Rate",id:"high-decay-rate",level:2},{value:"Virtual Time",id:"virtual-time",level:2}]},s="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(s,(0,o.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"import faiss\n\nfrom datetime import datetime, timedelta\nfrom langchain.docstore import InMemoryDocstore\nfrom langchain.embeddings import OpenAIEmbeddings\nfrom langchain.retrievers import TimeWeightedVectorStoreRetriever\nfrom langchain.schema import Document\nfrom langchain.vectorstores import FAISS\n")),(0,n.kt)("h2",{id:"low-decay-rate"},"Low Decay Rate"),(0,n.kt)("p",null,"A low ",(0,n.kt)("inlineCode",{parentName:"p"},"decay rate"),' (in this, to be extreme, we will set close to 0) means memories will be "remembered" for longer. A ',(0,n.kt)("inlineCode",{parentName:"p"},"decay rate")," of 0 means memories never be forgotten, making this retriever equivalent to the vector lookup."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"# Define your embedding model\nembeddings_model = OpenAIEmbeddings()\n# Initialize the vectorstore as empty\nembedding_size = 1536\nindex = faiss.IndexFlatL2(embedding_size)\nvectorstore = FAISS(embeddings_model.embed_query, index, InMemoryDocstore({}), {})\nretriever = TimeWeightedVectorStoreRetriever(vectorstore=vectorstore, decay_rate=.0000000000000000000000001, k=1)\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'yesterday = datetime.now() - timedelta(days=1)\nretriever.add_documents([Document(page_content="hello world", metadata={"last_accessed_at": yesterday})])\nretriever.add_documents([Document(page_content="hello foo")])\n')),(0,n.kt)(a,{lang:"python",mdxType:"CodeOutputBlock"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"    ['d7f85756-2371-4bdf-9140-052780a0f9b3']\n"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'# "Hello World" is returned first because it is most salient, and the decay rate is close to 0., meaning it\'s still recent enough\nretriever.get_relevant_documents("hello world")\n')),(0,n.kt)(a,{lang:"python",mdxType:"CodeOutputBlock"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"    [Document(page_content='hello world', metadata={'last_accessed_at': datetime.datetime(2023, 5, 13, 21, 0, 27, 678341), 'created_at': datetime.datetime(2023, 5, 13, 21, 0, 27, 279596), 'buffer_idx': 0})]\n"))),(0,n.kt)("h2",{id:"high-decay-rate"},"High Decay Rate"),(0,n.kt)("p",null,"With a high ",(0,n.kt)("inlineCode",{parentName:"p"},"decay rate")," (e.g., several 9's), the ",(0,n.kt)("inlineCode",{parentName:"p"},"recency score")," quickly goes to 0! If you set this all the way to 1, ",(0,n.kt)("inlineCode",{parentName:"p"},"recency")," is 0 for all objects, once again making this equivalent to a vector lookup."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"# Define your embedding model\nembeddings_model = OpenAIEmbeddings()\n# Initialize the vectorstore as empty\nembedding_size = 1536\nindex = faiss.IndexFlatL2(embedding_size)\nvectorstore = FAISS(embeddings_model.embed_query, index, InMemoryDocstore({}), {})\nretriever = TimeWeightedVectorStoreRetriever(vectorstore=vectorstore, decay_rate=.999, k=1)\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'yesterday = datetime.now() - timedelta(days=1)\nretriever.add_documents([Document(page_content="hello world", metadata={"last_accessed_at": yesterday})])\nretriever.add_documents([Document(page_content="hello foo")])\n')),(0,n.kt)(a,{lang:"python",mdxType:"CodeOutputBlock"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"    ['40011466-5bbe-4101-bfd1-e22e7f505de2']\n"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'# "Hello Foo" is returned first because "hello world" is mostly forgotten\nretriever.get_relevant_documents("hello world")\n')),(0,n.kt)(a,{lang:"python",mdxType:"CodeOutputBlock"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"    [Document(page_content='hello foo', metadata={'last_accessed_at': datetime.datetime(2023, 4, 16, 22, 9, 2, 494798), 'created_at': datetime.datetime(2023, 4, 16, 22, 9, 2, 178722), 'buffer_idx': 1})]\n"))),(0,n.kt)("h2",{id:"virtual-time"},"Virtual Time"),(0,n.kt)("p",null,"Using some utils in LangChain, you can mock out the time component"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.utils import mock_now\nimport datetime\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'# Notice the last access time is that date time\nwith mock_now(datetime.datetime(2011, 2, 3, 10, 11)):\n    print(retriever.get_relevant_documents("hello world"))\n')),(0,n.kt)(a,{lang:"python",mdxType:"CodeOutputBlock"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"    [Document(page_content='hello world', metadata={'last_accessed_at': MockDateTime(2011, 2, 3, 10, 11), 'created_at': datetime.datetime(2023, 5, 13, 21, 0, 27, 279596), 'buffer_idx': 0})]\n"))))}d.isMDXComponent=!0;const c={},m="Time-weighted vector store retriever",p={unversionedId:"modules/data_io/retrievers/how_to/time_weighted_vectorstore",id:"modules/data_io/retrievers/how_to/time_weighted_vectorstore",title:"Time-weighted vector store retriever",description:"This retriever uses a combination of semantic similarity and a time decay.",source:"@site/docs/modules/data_io/retrievers/how_to/time_weighted_vectorstore.mdx",sourceDirName:"modules/data_io/retrievers/how_to",slug:"/modules/data_io/retrievers/how_to/time_weighted_vectorstore",permalink:"/langchain-docs-scratch/docs/modules/data_io/retrievers/how_to/time_weighted_vectorstore",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/data_io/retrievers/how_to/time_weighted_vectorstore.mdx",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Self-querying with Weaviate",permalink:"/langchain-docs-scratch/docs/modules/data_io/retrievers/how_to/self_query/weaviate_self_query"},next:{title:"Vector store-backed retriever",permalink:"/langchain-docs-scratch/docs/modules/data_io/retrievers/how_to/vectorstore"}},u={},h=[],g={toc:h},y="wrapper";function v(e){let{components:t,...r}=e;return(0,n.kt)(y,(0,o.Z)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"time-weighted-vector-store-retriever"},"Time-weighted vector store retriever"),(0,n.kt)("p",null,"This retriever uses a combination of semantic similarity and a time decay."),(0,n.kt)("p",null,"The algorithm for scoring them is:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"semantic_similarity + (1.0 - decay_rate) ^ hours_passed\n")),(0,n.kt)("p",null,"Notably, ",(0,n.kt)("inlineCode",{parentName:"p"},"hours_passed")," refers to the hours passed since the object in the retriever ",(0,n.kt)("strong",{parentName:"p"},"was last accessed"),', not since it was created. This means that frequently accessed objects remain "fresh."'),(0,n.kt)(d,{mdxType:"Example"}))}v.isMDXComponent=!0}}]);
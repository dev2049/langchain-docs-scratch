"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[14633],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,g=d["".concat(i,".").concat(m)]||d[m]||u[m]||l;return n?a.createElement(g,r(r({ref:t},s),{},{components:n})):a.createElement(g,r({ref:t},s))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,r=new Array(l);r[0]=m;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[d]="string"==typeof e?e:o,r[1]=c;for(var p=2;p<l;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},89857:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>d,default:()=>y,frontMatter:()=>s,metadata:()=>u,toc:()=>g});var a=n(87462),o=(n(67294),n(3905));const l=(r="CodeOutputBlock",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var r;const c={toc:[{value:"Python",id:"python",level:2},{value:"JS",id:"js",level:2},{value:"Markdown",id:"markdown",level:2},{value:"Latex",id:"latex",level:2},{value:"HTML",id:"html",level:2}]},i="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(i,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.text_splitter import (\n    RecursiveCharacterTextSplitter,\n    Language,\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Full list of support languages\n[e.value for e in Language]\n")),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    ['cpp',\n     'go',\n     'java',\n     'js',\n     'php',\n     'proto',\n     'python',\n     'rst',\n     'ruby',\n     'rust',\n     'scala',\n     'swift',\n     'markdown',\n     'latex',\n     'html']\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# You can also see the separators used for a given language\nRecursiveCharacterTextSplitter.get_separators_for_language(Language.PYTHON)\n")),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    ['\\nclass ', '\\ndef ', '\\n\\tdef ', '\\n\\n', '\\n', ' ', '']\n"))),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("p",null,"Here's an example using the PythonTextSplitter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'PYTHON_CODE = """\ndef hello_world():\n    print("Hello, World!")\n\n# Call the function\nhello_world()\n"""\npython_splitter = RecursiveCharacterTextSplitter.from_language(\n    language=Language.PYTHON, chunk_size=50, chunk_overlap=0\n)\npython_docs = python_splitter.create_documents([PYTHON_CODE])\npython_docs\n')),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [Document(page_content='def hello_world():\\n    print(\"Hello, World!\")', metadata={}),\n     Document(page_content='# Call the function\\nhello_world()', metadata={})]\n"))),(0,o.kt)("h2",{id:"js"},"JS"),(0,o.kt)("p",null,"Here's an example using the JS text splitter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'JS_CODE = """\nfunction helloWorld() {\n  console.log("Hello, World!");\n}\n\n// Call the function\nhelloWorld();\n"""\n\njs_splitter = RecursiveCharacterTextSplitter.from_language(\n    language=Language.JS, chunk_size=60, chunk_overlap=0\n)\njs_docs = js_splitter.create_documents([JS_CODE])\njs_docs\n')),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [Document(page_content='function helloWorld() {\\n  console.log(\"Hello, World!\");\\n}', metadata={}),\n     Document(page_content='// Call the function\\nhelloWorld();', metadata={})]\n"))),(0,o.kt)("h2",{id:"markdown"},"Markdown"),(0,o.kt)("p",null,"Here's an example using the Markdown text splitter."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'markdown_text = """\n# \ud83e\udd9c\ufe0f\ud83d\udd17 LangChain\n\n\u26a1 Building applications with LLMs through composability \u26a1\n\n## Quick Install\n\n```bash\n# Hopefully this code block isn\'t split\npip install langchain\n')),(0,o.kt)("p",null,'As an open source project in a rapidly developing field, we are extremely open to contributions.\n"""'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\n\n```python\nmd_splitter = RecursiveCharacterTextSplitter.from_language(\n    language=Language.MARKDOWN, chunk_size=60, chunk_overlap=0\n)\nmd_docs = md_splitter.create_documents([markdown_text])\nmd_docs\n")),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [Document(page_content='# \ud83e\udd9c\ufe0f\ud83d\udd17 LangChain', metadata={}),\n     Document(page_content='\u26a1 Building applications with LLMs through composability \u26a1', metadata={}),\n     Document(page_content='## Quick Install', metadata={}),\n     Document(page_content=\"```bash\\n# Hopefully this code block isn't split\", metadata={}),\n     Document(page_content='pip install langchain', metadata={}),\n     Document(page_content='```', metadata={}),\n     Document(page_content='As an open source project in a rapidly developing field, we', metadata={}),\n     Document(page_content='are extremely open to contributions.', metadata={})]\n"))),(0,o.kt)("h2",{id:"latex"},"Latex"),(0,o.kt)("p",null,"Here's an example on Latex text"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'latex_text = """\n\\documentclass{article}\n\n\\begin{document}\n\n\\maketitle\n\n\\section{Introduction}\nLarge language models (LLMs) are a type of machine learning model that can be trained on vast amounts of text data to generate human-like language. In recent years, LLMs have made significant advances in a variety of natural language processing tasks, including language translation, text generation, and sentiment analysis.\n\n\\subsection{History of LLMs}\nThe earliest LLMs were developed in the 1980s and 1990s, but they were limited by the amount of data that could be processed and the computational power available at the time. In the past decade, however, advances in hardware and software have made it possible to train LLMs on massive datasets, leading to significant improvements in performance.\n\n\\subsection{Applications of LLMs}\nLLMs have many applications in industry, including chatbots, content creation, and virtual assistants. They can also be used in academia for research in linguistics, psychology, and computational linguistics.\n\n\\end{document}\n"""\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"latex_splitter = RecursiveCharacterTextSplitter.from_language(\n    language=Language.MARKDOWN, chunk_size=60, chunk_overlap=0\n)\nlatex_docs = latex_splitter.create_documents([latex_text])\nlatex_docs\n")),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [Document(page_content='\\\\documentclass{article}\\n\\n\\x08egin{document}\\n\\n\\\\maketitle', metadata={}),\n     Document(page_content='\\\\section{Introduction}', metadata={}),\n     Document(page_content='Large language models (LLMs) are a type of machine learning', metadata={}),\n     Document(page_content='model that can be trained on vast amounts of text data to', metadata={}),\n     Document(page_content='generate human-like language. In recent years, LLMs have', metadata={}),\n     Document(page_content='made significant advances in a variety of natural language', metadata={}),\n     Document(page_content='processing tasks, including language translation, text', metadata={}),\n     Document(page_content='generation, and sentiment analysis.', metadata={}),\n     Document(page_content='\\\\subsection{History of LLMs}', metadata={}),\n     Document(page_content='The earliest LLMs were developed in the 1980s and 1990s,', metadata={}),\n     Document(page_content='but they were limited by the amount of data that could be', metadata={}),\n     Document(page_content='processed and the computational power available at the', metadata={}),\n     Document(page_content='time. In the past decade, however, advances in hardware and', metadata={}),\n     Document(page_content='software have made it possible to train LLMs on massive', metadata={}),\n     Document(page_content='datasets, leading to significant improvements in', metadata={}),\n     Document(page_content='performance.', metadata={}),\n     Document(page_content='\\\\subsection{Applications of LLMs}', metadata={}),\n     Document(page_content='LLMs have many applications in industry, including', metadata={}),\n     Document(page_content='chatbots, content creation, and virtual assistants. They', metadata={}),\n     Document(page_content='can also be used in academia for research in linguistics,', metadata={}),\n     Document(page_content='psychology, and computational linguistics.', metadata={}),\n     Document(page_content='\\\\end{document}', metadata={})]\n"))),(0,o.kt)("h2",{id:"html"},"HTML"),(0,o.kt)("p",null,"Here's an example using an HTML text splitter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'html_text = """\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>\ud83e\udd9c\ufe0f\ud83d\udd17 LangChain</title>\n        <style>\n            body {\n                font-family: Arial, sans-serif;\n            }\n            h1 {\n                color: darkblue;\n            }\n        </style>\n    </head>\n    <body>\n        <div>\n            <h1>\ud83e\udd9c\ufe0f\ud83d\udd17 LangChain</h1>\n            <p>\u26a1 Building applications with LLMs through composability \u26a1</p>\n        </div>\n        <div>\n            As an open source project in a rapidly developing field, we are extremely open to contributions.\n        </div>\n    </body>\n</html>\n"""\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"html_splitter = RecursiveCharacterTextSplitter.from_language(\n    language=Language.MARKDOWN, chunk_size=60, chunk_overlap=0\n)\nhtml_docs = html_splitter.create_documents([html_text])\nhtml_docs\n")),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [Document(page_content='<!DOCTYPE html>\\n<html>\\n    <head>', metadata={}),\n     Document(page_content='<title>\ud83e\udd9c\ufe0f\ud83d\udd17 LangChain</title>\\n        <style>', metadata={}),\n     Document(page_content='body {', metadata={}),\n     Document(page_content='font-family: Arial, sans-serif;', metadata={}),\n     Document(page_content='}\\n            h1 {', metadata={}),\n     Document(page_content='color: darkblue;\\n            }', metadata={}),\n     Document(page_content='</style>\\n    </head>\\n    <body>\\n        <div>', metadata={}),\n     Document(page_content='<h1>\ud83e\udd9c\ufe0f\ud83d\udd17 LangChain</h1>', metadata={}),\n     Document(page_content='<p>\u26a1 Building applications with LLMs through', metadata={}),\n     Document(page_content='composability \u26a1</p>', metadata={}),\n     Document(page_content='</div>\\n        <div>', metadata={}),\n     Document(page_content='As an open source project in a rapidly', metadata={}),\n     Document(page_content='developing field, we are extremely open to contributions.', metadata={}),\n     Document(page_content='</div>\\n    </body>\\n</html>', metadata={})]\n"))))}p.isMDXComponent=!0;const s={},d="Split code",u={unversionedId:"modules/data_io/text_splitters/how_to/code_splitter",id:"modules/data_io/text_splitters/how_to/code_splitter",title:"Split code",description:"CodeTextSplitter allows you to split your code with multiple language support. Import enum Language and specify the language.",source:"@site/docs/modules/data_io/text_splitters/how_to/code_splitter.mdx",sourceDirName:"modules/data_io/text_splitters/how_to",slug:"/modules/data_io/text_splitters/how_to/code_splitter",permalink:"/langchain-docs-scratch/docs/modules/data_io/text_splitters/how_to/code_splitter",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/data_io/text_splitters/how_to/code_splitter.mdx",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Split by character",permalink:"/langchain-docs-scratch/docs/modules/data_io/text_splitters/how_to/character_text_splitter"},next:{title:"Split by tokens (Hugging Face tokenizer)",permalink:"/langchain-docs-scratch/docs/modules/data_io/text_splitters/how_to/huggingface_length_function"}},m={},g=[],h={toc:g},_="wrapper";function y(e){let{components:t,...n}=e;return(0,o.kt)(_,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"split-code"},"Split code"),(0,o.kt)("p",null,"CodeTextSplitter allows you to split your code with multiple language support. Import enum ",(0,o.kt)("inlineCode",{parentName:"p"},"Language")," and specify the language. "),(0,o.kt)(p,{mdxType:"Example"}))}y.isMDXComponent=!0}}]);
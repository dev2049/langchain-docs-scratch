"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[84326],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>g});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=r.createContext({}),l=function(e){var t=r.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,c=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),d=l(a),u=n,g=d["".concat(c,".").concat(u)]||d[u]||p[u]||s;return a?r.createElement(g,o(o({ref:t},m),{},{components:a})):r.createElement(g,o({ref:t},m))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,o=new Array(s);o[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:n,o[1]=i;for(var l=2;l<s;l++)o[l]=a[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},32828:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>g,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=a(87462),n=(a(67294),a(3905));const s={},o="Cassandra Chat Message History",i={unversionedId:"modules/memory/integrations/cassandra_chat_message_history",id:"modules/memory/integrations/cassandra_chat_message_history",title:"Cassandra Chat Message History",description:"This notebook goes over how to use Cassandra to store chat message history.",source:"@site/docs/modules/memory/integrations/cassandra_chat_message_history.md",sourceDirName:"modules/memory/integrations",slug:"/modules/memory/integrations/cassandra_chat_message_history",permalink:"/langchain-docs-scratch/docs/modules/memory/integrations/cassandra_chat_message_history",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/memory/integrations/cassandra_chat_message_history.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Vector store-backed memory",permalink:"/langchain-docs-scratch/docs/modules/memory/how_to/vectorstore_retriever_memory"},next:{title:"Dynamodb Chat Message History",permalink:"/langchain-docs-scratch/docs/modules/memory/integrations/dynamodb_chat_message_history"}},c={},l=[],m=(d="CodeOutputBlock",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",e)});var d;const p={toc:l},u="wrapper";function g(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"cassandra-chat-message-history"},"Cassandra Chat Message History"),(0,n.kt)("p",null,"This notebook goes over how to use Cassandra to store chat message history."),(0,n.kt)("p",null,"Cassandra is a distributed database that is well suited for storing large amounts of data. "),(0,n.kt)("p",null,"It is a good choice for storing chat message history because it is easy to scale and can handle a large number of writes."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'# List of contact points to try connecting to Cassandra cluster.\ncontact_points = ["cassandra"]\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.memory import CassandraChatMessageHistory\n\nmessage_history = CassandraChatMessageHistory(\n    contact_points=contact_points, session_id="test-session"\n)\n\nmessage_history.add_user_message("hi!")\n\nmessage_history.add_ai_message("whats up?")\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"message_history.messages\n")),(0,n.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"    [HumanMessage(content='hi!', additional_kwargs={}, example=False),\n     AIMessage(content='whats up?', additional_kwargs={}, example=False)]\n"))))}g.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[38375],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),l=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(i.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),m=l(n),u=o,h=m["".concat(i,".").concat(u)]||m[u]||p[u]||r;return n?a.createElement(h,s(s({ref:t},d),{},{components:n})):a.createElement(h,s({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=u;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[m]="string"==typeof e?e:o,s[1]=c;for(var l=2;l<r;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},96301:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var a=n(87462),o=(n(67294),n(3905));const r={},s="MongoDB Atlas Vector Search",c={unversionedId:"modules/data_io/vectorstores/integrations/mongodb_atlas_vector_search",id:"modules/data_io/vectorstores/integrations/mongodb_atlas_vector_search",title:"MongoDB Atlas Vector Search",description:"MongoDB Atlas is a document database managed in the cloud. It also enables Lucene and its vector search feature.",source:"@site/docs/modules/data_io/vectorstores/integrations/mongodb_atlas_vector_search.md",sourceDirName:"modules/data_io/vectorstores/integrations",slug:"/modules/data_io/vectorstores/integrations/mongodb_atlas_vector_search",permalink:"/langchain-docs-scratch/docs/modules/data_io/vectorstores/integrations/mongodb_atlas_vector_search",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/data_io/vectorstores/integrations/mongodb_atlas_vector_search.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Milvus",permalink:"/langchain-docs-scratch/docs/modules/data_io/vectorstores/integrations/milvus"},next:{title:"MyScale",permalink:"/langchain-docs-scratch/docs/modules/data_io/vectorstores/integrations/myscale"}},i={},l=[],d={toc:l},m="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"mongodb-atlas-vector-search"},"MongoDB Atlas Vector Search"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://www.mongodb.com/docs/atlas/"},"MongoDB Atlas")," is a document database managed in the cloud. It also enables Lucene and its vector search feature.")),(0,o.kt)("p",null,"This notebook shows how to use the functionality related to the ",(0,o.kt)("inlineCode",{parentName:"p"},"MongoDB Atlas Vector Search")," feature where you can store your embeddings in MongoDB documents and create a Lucene vector index to perform a KNN search."),(0,o.kt)("p",null,"It uses the ",(0,o.kt)("a",{parentName:"p",href:"https://www.mongodb.com/docs/atlas/atlas-search/knn-beta"},"knnBeta Operator")," available in MongoDB Atlas Search. This feature is in early access and available only for evaluation purposes, to validate functionality, and to gather feedback from a small closed group of early access users. It is not recommended for production deployments as we may introduce breaking changes."),(0,o.kt)("p",null,"To use MongoDB Atlas, you must have first deployed a cluster. Free clusters are available.\nHere is the MongoDB Atlas ",(0,o.kt)("a",{parentName:"p",href:"https://www.mongodb.com/docs/atlas/getting-started/"},"quick start"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pip install pymongo\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import os\n\nMONGODB_ATLAS_URI = os.environ['MONGODB_ATLAS_URI']\n")),(0,o.kt)("p",null,"We want to use ",(0,o.kt)("inlineCode",{parentName:"p"},"OpenAIEmbeddings")," so we have to get the OpenAI API Key. Make sure the environment variable ",(0,o.kt)("inlineCode",{parentName:"p"},"OPENAI_API_KEY")," is set up before proceeding."),(0,o.kt)("p",null,"Now, let's create a Lucene vector index on your cluster. In the below example, ",(0,o.kt)("inlineCode",{parentName:"p"},"embedding")," is the name of the field that contains the embedding vector. Please refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://www.mongodb.com/docs/atlas/atlas-search/define-field-mappings-for-vector-search"},"documentation")," to get more details on how to define an Atlas Search index.\nYou can name the index ",(0,o.kt)("inlineCode",{parentName:"p"},"langchain_demo")," and create the index on the namespace ",(0,o.kt)("inlineCode",{parentName:"p"},"lanchain_db.langchain_col"),". Finally, write the following definition in the JSON editor:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "mappings": {\n    "dynamic": true,\n    "fields": {\n      "embedding": {\n        "dimensions": 1536,\n        "similarity": "cosine",\n        "type": "knnVector"\n      }\n    }\n  }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import MongoDBAtlasVectorSearch\nfrom langchain.document_loaders import TextLoader\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.document_loaders import TextLoader\nloader = TextLoader('../../../state_of_the_union.txt')\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from pymongo import MongoClient\n\n# initialize MongoDB python client\nclient = MongoClient(MONGODB_ATLAS_CONNECTION_STRING)\n\ndb_name = "lanchain_db"\ncollection_name = "langchain_col"\ncollection = client[db_name][collection_name]\nindex_name = "langchain_demo"\n\n# insert the documents in MongoDB Atlas with their embedding\ndocsearch = MongoDBAtlasVectorSearch.from_documents(\n    docs,\n    embeddings,\n    collection=collection,\n    index_name=index_name\n)\n\n# perform a similarity search between the embedding of the query and the embeddings of the documents\nquery = "What did the president say about Ketanji Brown Jackson"\ndocs = docsearch.similarity_search(query)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(docs[0].page_content)\n")))}p.isMDXComponent=!0}}]);
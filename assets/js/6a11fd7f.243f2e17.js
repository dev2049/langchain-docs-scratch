"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[60775],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),h=o,d=c["".concat(l,".").concat(h)]||c[h]||g[h]||r;return n?a.createElement(d,s(s({ref:t},u),{},{components:n})):a.createElement(d,s({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},49248:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>c,default:()=>f,frontMatter:()=>u,metadata:()=>g,toc:()=>d});var a=n(87462),o=(n(67294),n(3905));const r=(s="CodeOutputBlock",function(e){return console.warn("Component "+s+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var s;const i={toc:[]},l="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(l,(0,a.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.agents import load_tools\nfrom langchain.agents import initialize_agent\nfrom langchain.agents import AgentType\nfrom langchain.llms import OpenAI\n")),(0,o.kt)("p",null,"First, let's load the language model we're going to use to control the agent."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"llm = OpenAI(temperature=0)\n")),(0,o.kt)("p",null,"Next, let's load some tools to use. Note that the ",(0,o.kt)("inlineCode",{parentName:"p"},"llm-math")," tool uses an LLM, so we need to pass that in."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'tools = load_tools(["serpapi", "llm-math"], llm=llm)\n')),(0,o.kt)("p",null,"Finally, let's initialize an agent with the tools, the language model, and the type of agent we want to use."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"agent = initialize_agent(tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True)\n")),(0,o.kt)("p",null,"Now let's test it out!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'agent.run("Who is Leo DiCaprio\'s girlfriend? What is her current age raised to the 0.43 power?")\n')),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    \n    \n    > Entering new AgentExecutor chain...\n     I need to find out who Leo DiCaprio\'s girlfriend is and then calculate her age raised to the 0.43 power.\n    Action: Search\n    Action Input: "Leo DiCaprio girlfriend"\n    Observation: Camila Morrone\n    Thought: I need to find out Camila Morrone\'s age\n    Action: Search\n    Action Input: "Camila Morrone age"\n    Observation: 25 years\n    Thought: I need to calculate 25 raised to the 0.43 power\n    Action: Calculator\n    Action Input: 25^0.43\n    Observation: Answer: 3.991298452658078\n    \n    Thought: I now know the final answer\n    Final Answer: Camila Morrone is Leo DiCaprio\'s girlfriend and her current age raised to the 0.43 power is 3.991298452658078.\n    \n    > Finished chain.\n\n\n\n\n\n    "Camila Morrone is Leo DiCaprio\'s girlfriend and her current age raised to the 0.43 power is 3.991298452658078."\n'))))}p.isMDXComponent=!0;const u={sidebar_position:4},c="Agents",g={unversionedId:"modules/agents/index",id:"modules/agents/index",title:"Agents",description:"Some applications require not just a predetermined chain of calls to LLMs/other tools,",source:"@site/docs/modules/agents/index.mdx",sourceDirName:"modules/agents",slug:"/modules/agents/",permalink:"/langchain-docs-scratch/docs/modules/agents/",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/edit/main/docs/docs/modules/agents/index.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"sidebar",previous:{title:"Zep Memory",permalink:"/langchain-docs-scratch/docs/modules/memory/integrations/zep_memory"},next:{title:"Agents",permalink:"/langchain-docs-scratch/docs/modules/agents/agents/"}},h={},d=[{value:"Action Agents",id:"action-agents",level:2},{value:"Plan-and-Execute Agents",id:"plan-and-execute-agents",level:2},{value:"Get started",id:"get-started",level:2}],m={toc:d},k="wrapper";function f(e){let{components:t,...r}=e;return(0,o.kt)(k,(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"agents"},"Agents"),(0,o.kt)("p",null,"Some applications require not just a predetermined chain of calls to LLMs/other tools,\nbut potentially an unknown chain that depends on the user's input.\nIn these types of chains, there is an ",(0,o.kt)("strong",{parentName:"p"},"agent")," which has access to a suite of ",(0,o.kt)("strong",{parentName:"p"},"tools"),".\nDepending on the user input, the agent can then decide which, if any, of these tools to call."),(0,o.kt)("p",null,"At the moment, there are two main types of agents:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Action Agents"),": these agents decide the actions to take and execute that actions one action at a time."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Plan-and-Execute Agents"),": these agents first decide a plan of actions to take, and then execute those actions one at a time.")),(0,o.kt)("p",null,"When should you use each one? Action Agents are more conventional, and good for small tasks.\nFor more complex or long running tasks, the initial planning step helps to maintain long term objectives and focus.\nHowever, that comes at the expense of generally more calls and higher latency.\nThese two agents are also not mutually exclusive - in fact, it is often best to have an Action Agent be in charge\nof the execution for the Plan and Execute agent."),(0,o.kt)("h2",{id:"action-agents"},"Action Agents"),(0,o.kt)("p",null,"High level pseudocode of the Action Agents:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("strong",{parentName:"li"},"user input")," is received"),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("strong",{parentName:"li"},"agent")," decides which ",(0,o.kt)("strong",{parentName:"li"},"tool")," - if any - to use, and what the ",(0,o.kt)("strong",{parentName:"li"},"tool input")," should be"),(0,o.kt)("li",{parentName:"ul"},"That ",(0,o.kt)("strong",{parentName:"li"},"tool")," is then called with the ",(0,o.kt)("strong",{parentName:"li"},"tool input"),", and an ",(0,o.kt)("strong",{parentName:"li"},"observation")," is recorded (the output of this calling)"),(0,o.kt)("li",{parentName:"ul"},"That history of ",(0,o.kt)("strong",{parentName:"li"},"tool"),", ",(0,o.kt)("strong",{parentName:"li"},"tool input"),", and ",(0,o.kt)("strong",{parentName:"li"},"observation")," is passed back into the ",(0,o.kt)("strong",{parentName:"li"},"agent"),", and it decides the next step"),(0,o.kt)("li",{parentName:"ul"},"This is repeated until the ",(0,o.kt)("strong",{parentName:"li"},"agent")," decides it no longer needs to use a ",(0,o.kt)("strong",{parentName:"li"},"tool"),", and then it responds directly to the user.")),(0,o.kt)("p",null,"The different abstractions involved in agents are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Agent"),": this is where the logic of the application lives. Agents expose an interface that takes in user input\nalong with a list of previous steps the agent has taken, and returns either an ",(0,o.kt)("strong",{parentName:"p"},"AgentAction")," or ",(0,o.kt)("strong",{parentName:"p"},"AgentFinish")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"AgentAction")," corresponds to the tool to use and the input to that tool"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"AgentFinish")," means the agent is done, and has information around what to return to the user"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Tools"),": these are the actions an agent can take. What tools you give an agent highly depend on what you want the agent to do")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Toolkits"),": these are groups of tools designed for a specific use case. For example, in order for an agent to\ninteract with a SQL database in the best way it may need access to one tool to execute queries and another tool to inspect tables.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Agent Executor"),": this wraps an agent and a list of tools. This is responsible for the loop of running the agent\niteratively until the stopping criteria is met."))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Get started <./agents/getting_started.html>"),"_: An overview of agents. It covers how to use all things related to agents in an end-to-end manner.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Agent Construction:")),(0,o.kt)("p",null,"Although an agent can be constructed in many way, the typical way to construct an agent is with:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"PromptTemplate"),": this is responsible for taking the user input and previous steps and constructing a prompt\nto send to the language model"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Language Model"),": this takes the prompt constructed by the PromptTemplate and returns some output"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Output Parser"),": this takes the output of the Language Model and parses it into an ",(0,o.kt)("strong",{parentName:"li"},"AgentAction")," or ",(0,o.kt)("strong",{parentName:"li"},"AgentFinish")," object.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Additional Documentation:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Tools <./agents/tools.html>"),"_: Different types of ",(0,o.kt)("strong",{parentName:"p"},"tools")," LangChain supports natively. We also cover how to add your own tools.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Agents <./agents/agents.html>"),"_: Different types of ",(0,o.kt)("strong",{parentName:"p"},"agents")," LangChain supports natively. We also cover how to\nmodify and create your own agents.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Toolkits <./agents/toolkits.html>"),"_: Various ",(0,o.kt)("strong",{parentName:"p"},"toolkits")," that LangChain supports out of the box, and how to\ncreate an agent from them.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Agent Executor <./agents/agent_executors.html>"),"_: The ",(0,o.kt)("strong",{parentName:"p"},"Agent Executor")," class, which is responsible for calling\nthe agent and tools in a loop. We go over different ways to customize this, and options you can use for more control."))),(0,o.kt)("h2",{id:"plan-and-execute-agents"},"Plan-and-Execute Agents"),(0,o.kt)("p",null,"High level pseudocode of the ",(0,o.kt)("strong",{parentName:"p"},"Plan-and-Execute Agents"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("strong",{parentName:"li"},"user input")," is received"),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("strong",{parentName:"li"},"planner")," lists out the steps to take"),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("strong",{parentName:"li"},"executor")," goes through the list of steps, executing them")),(0,o.kt)("p",null,"The most typical implementation is to have the planner be a language model, and the executor be an action agent."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Plan-and-Execute Agents <./agents/plan_and_execute.html>"),"_")),(0,o.kt)("h2",{id:"get-started"},"Get started"),(0,o.kt)("p",null,"Agents use an LLM to determine which actions to take and in what order.\nAn action can either be using a tool and observing its output, or returning to the user."),(0,o.kt)("p",null,"When used correctly agents can be extremely powerful. The purpose of this notebook is to show you how to easily use agents through the simplest, highest level API."),(0,o.kt)("p",null,"In order to load agents, you should understand the following concepts:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Tool: A function that performs a specific duty. This can be things like: Google Search, Database lookup, Python REPL, other chains. The interface for a tool is currently a function that is expected to have a string as an input, with a string as an output."),(0,o.kt)("li",{parentName:"ul"},"LLM: The language model powering the agent."),(0,o.kt)("li",{parentName:"ul"},"Agent: The agent to use. This should be a string that references a support agent class. Because this notebook focuses on the simplest, highest level API, this only covers using the standard supported agents. If you want to implement a custom agent, see the documentation for ",(0,o.kt)("a",{target:"_blank",href:n(2888).Z},"custom agents"),".")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Agents"),": For a list of supported agents and their specifications, see ",(0,o.kt)("a",{parentName:"p",href:"agents.md"},"here"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Tools"),": For a list of predefined tools and their specifications, see ",(0,o.kt)("a",{parentName:"p",href:"./tools.html"},"here"),"."),(0,o.kt)(p,{mdxType:"GetStarted"}))}f.isMDXComponent=!0},2888:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/custom_agent-67185b84dfdcd5ffa2365e01a91157c8.ipynb"}}]);